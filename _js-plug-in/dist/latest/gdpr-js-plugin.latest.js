/*! For license information please see gdpr-js-plugin.latest.js.LICENSE.txt */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("GDPRCommons",[],t):"object"==typeof exports?exports.GDPRCommons=t():e.GDPRCommons=t()}(self,(()=>(()=>{var e={649:()=>{!function(){"use strict";function e(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function t(t){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?e(Object(i),!0).forEach((function(e){r(t,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):e(Object(i)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(i,e))}))}return t}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(e);!(a=(i=n.next()).done)&&(o.push(i.value),!t||o.length!==t);a=!0);}catch(e){s=!0,r=e}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(e,t)||s(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||s(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){if(e){if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(e,t):void 0}}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var c=function(){},u={},f={},d=null,p={mark:c,measure:c};try{"undefined"!=typeof window&&(u=window),"undefined"!=typeof document&&(f=document),"undefined"!=typeof MutationObserver&&(d=MutationObserver),"undefined"!=typeof performance&&(p=performance)}catch(e){}var h=(u.navigator||{}).userAgent,m=void 0===h?"":h,g=u,v=f,b=d,y=p,_=!!g.document,w=!!v.documentElement&&!!v.head&&"function"==typeof v.addEventListener&&"function"==typeof v.createElement,x=~m.indexOf("MSIE")||~m.indexOf("Trident/"),k="svg-inline--fa",E="data-fa-i2svg",A="data-fa-pseudo-element",T="data-prefix",C="data-icon",O="fontawesome-i2svg",S=["HTML","HEAD","STYLE","SCRIPT"],N=function(){try{return!0}catch(e){return!1}}(),D={fas:"solid","fa-solid":"solid",far:"regular","fa-regular":"regular",fal:"light","fa-light":"light",fat:"thin","fa-thin":"thin",fad:"duotone","fa-duotone":"duotone",fab:"brands","fa-brands":"brands",fak:"kit","fa-kit":"kit",fa:"solid"},L={solid:"fas",regular:"far",light:"fal",thin:"fat",duotone:"fad",brands:"fab",kit:"fak"},j={fab:"fa-brands",fad:"fa-duotone",fak:"fa-kit",fal:"fa-light",far:"fa-regular",fas:"fa-solid",fat:"fa-thin"},P={"fa-brands":"fab","fa-duotone":"fad","fa-kit":"fak","fa-light":"fal","fa-regular":"far","fa-solid":"fas","fa-thin":"fat"},M=/fa[srltdbk\-\ ]/,I="fa-layers-text",H=/Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Kit)?.*/i,R={900:"fas",400:"far",normal:"far",300:"fal",100:"fat"},q=[1,2,3,4,5,6,7,8,9,10],z=q.concat([11,12,13,14,15,16,17,18,19,20]),B=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],W="duotone-group",F="primary",$="secondary",Y=[].concat(a(Object.keys(L)),["2xs","xs","sm","lg","xl","2xl","beat","border","fade","beat-fade","bounce","flip-both","flip-horizontal","flip-vertical","flip","fw","inverse","layers-counter","layers-text","layers","li","pull-left","pull-right","pulse","rotate-180","rotate-270","rotate-90","rotate-by","shake","spin-pulse","spin-reverse","spin","stack-1x","stack-2x","stack","ul",W,"swap-opacity",F,$]).concat(q.map((function(e){return"".concat(e,"x")}))).concat(z.map((function(e){return"w-".concat(e)}))),U=g.FontAwesomeConfig||{};v&&"function"==typeof v.querySelector&&[["data-family-prefix","familyPrefix"],["data-style-default","styleDefault"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach((function(e){var t=o(e,2),n=t[0],i=t[1],r=function(e){return""===e||"false"!==e&&("true"===e||e)}(function(e){var t=v.querySelector("script["+e+"]");if(t)return t.getAttribute(e)}(n));null!=r&&(U[i]=r)}));var V=t(t({},{familyPrefix:"fa",styleDefault:"solid",replacementClass:k,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0}),U);V.autoReplaceSvg||(V.observeMutations=!1);var X={};Object.keys(V).forEach((function(e){Object.defineProperty(X,e,{enumerable:!0,set:function(t){V[e]=t,K.forEach((function(e){return e(X)}))},get:function(){return V[e]}})})),g.FontAwesomeConfig=X;var K=[],Q=16,G={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function J(){for(var e=12,t="";e-- >0;)t+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[62*Math.random()|0];return t}function Z(e){for(var t=[],n=(e||[]).length>>>0;n--;)t[n]=e[n];return t}function ee(e){return e.classList?Z(e.classList):(e.getAttribute("class")||"").split(" ").filter((function(e){return e}))}function te(e){return"".concat(e).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function ne(e){return Object.keys(e||{}).reduce((function(t,n){return t+"".concat(n,": ").concat(e[n].trim(),";")}),"")}function ie(e){return e.size!==G.size||e.x!==G.x||e.y!==G.y||e.rotate!==G.rotate||e.flipX||e.flipY}function re(){var e="fa",t=k,n=X.familyPrefix,i=X.replacementClass,r=':host,:root{--fa-font-solid:normal 900 1em/1 "Font Awesome 6 Solid";--fa-font-regular:normal 400 1em/1 "Font Awesome 6 Regular";--fa-font-light:normal 300 1em/1 "Font Awesome 6 Light";--fa-font-thin:normal 100 1em/1 "Font Awesome 6 Thin";--fa-font-duotone:normal 900 1em/1 "Font Awesome 6 Duotone";--fa-font-brands:normal 400 1em/1 "Font Awesome 6 Brands"}svg:not(:host).svg-inline--fa,svg:not(:root).svg-inline--fa{overflow:visible;box-sizing:content-box}.svg-inline--fa{display:var(--fa-display,inline-block);height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-2xs{vertical-align:.1em}.svg-inline--fa.fa-xs{vertical-align:0}.svg-inline--fa.fa-sm{vertical-align:-.0714285705em}.svg-inline--fa.fa-lg{vertical-align:-.2em}.svg-inline--fa.fa-xl{vertical-align:-.25em}.svg-inline--fa.fa-2xl{vertical-align:-.3125em}.svg-inline--fa.fa-pull-left{margin-right:var(--fa-pull-margin,.3em);width:auto}.svg-inline--fa.fa-pull-right{margin-left:var(--fa-pull-margin,.3em);width:auto}.svg-inline--fa.fa-li{width:var(--fa-li-width,2em);top:.25em}.svg-inline--fa.fa-fw{width:var(--fa-fw-width,1.25em)}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:var(--fa-counter-background-color,#ff253a);border-radius:var(--fa-counter-border-radius,1em);box-sizing:border-box;color:var(--fa-inverse,#fff);line-height:var(--fa-counter-line-height,1);max-width:var(--fa-counter-max-width,5em);min-width:var(--fa-counter-min-width,1.5em);overflow:hidden;padding:var(--fa-counter-padding,.25em .5em);right:var(--fa-right,0);text-overflow:ellipsis;top:var(--fa-top,0);-webkit-transform:scale(var(--fa-counter-scale,.25));transform:scale(var(--fa-counter-scale,.25));-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:var(--fa-bottom,0);right:var(--fa-right,0);top:auto;-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:var(--fa-bottom,0);left:var(--fa-left,0);right:auto;top:auto;-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{top:var(--fa-top,0);right:var(--fa-right,0);-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:var(--fa-left,0);right:auto;top:var(--fa-top,0);-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:top left;transform-origin:top left}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-2xs{font-size:.625em;line-height:.1em;vertical-align:.225em}.fa-xs{font-size:.75em;line-height:.0833333337em;vertical-align:.125em}.fa-sm{font-size:.875em;line-height:.0714285718em;vertical-align:.0535714295em}.fa-lg{font-size:1.25em;line-height:.05em;vertical-align:-.075em}.fa-xl{font-size:1.5em;line-height:.0416666682em;vertical-align:-.125em}.fa-2xl{font-size:2em;line-height:.03125em;vertical-align:-.1875em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:var(--fa-li-margin,2.5em);padding-left:0}.fa-ul>li{position:relative}.fa-li{left:calc(var(--fa-li-width,2em) * -1);position:absolute;text-align:center;width:var(--fa-li-width,2em);line-height:inherit}.fa-border{border-color:var(--fa-border-color,#eee);border-radius:var(--fa-border-radius,.1em);border-style:var(--fa-border-style,solid);border-width:var(--fa-border-width,.08em);padding:var(--fa-border-padding,.2em .25em .15em)}.fa-pull-left{float:left;margin-right:var(--fa-pull-margin,.3em)}.fa-pull-right{float:right;margin-left:var(--fa-pull-margin,.3em)}.fa-beat{-webkit-animation-name:fa-beat;animation-name:fa-beat;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-bounce{-webkit-animation-name:fa-bounce;animation-name:fa-bounce;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1))}.fa-fade{-webkit-animation-name:fa-fade;animation-name:fa-fade;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-beat-fade{-webkit-animation-name:fa-beat-fade;animation-name:fa-beat-fade;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-flip{-webkit-animation-name:fa-flip;animation-name:fa-flip;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-shake{-webkit-animation-name:fa-shake;animation-name:fa-shake;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,2s);animation-duration:var(--fa-animation-duration,2s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin-reverse{--fa-animation-direction:reverse}.fa-pulse,.fa-spin-pulse{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,steps(8));animation-timing-function:var(--fa-animation-timing,steps(8))}@media (prefers-reduced-motion:reduce){.fa-beat,.fa-beat-fade,.fa-bounce,.fa-fade,.fa-flip,.fa-pulse,.fa-shake,.fa-spin,.fa-spin-pulse{-webkit-animation-delay:-1ms;animation-delay:-1ms;-webkit-animation-duration:1ms;animation-duration:1ms;-webkit-animation-iteration-count:1;animation-iteration-count:1;transition-delay:0s;transition-duration:0s}}@-webkit-keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@-webkit-keyframes fa-bounce{0%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}100%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}}@keyframes fa-bounce{0%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}100%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}}@-webkit-keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@-webkit-keyframes fa-beat-fade{0%,100%{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@keyframes fa-beat-fade{0%,100%{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@-webkit-keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@-webkit-keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}100%,40%{-webkit-transform:rotate(0);transform:rotate(0)}}@keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}100%,40%{-webkit-transform:rotate(0);transform:rotate(0)}}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}.fa-rotate-by{-webkit-transform:rotate(var(--fa-rotate-angle,none));transform:rotate(var(--fa-rotate-angle,none))}.fa-stack{display:inline-block;vertical-align:middle;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0;z-index:var(--fa-stack-z-index,auto)}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:var(--fa-inverse,#fff)}.fa-sr-only,.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.fa-sr-only-focusable:not(:focus),.sr-only-focusable:not(:focus){position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.svg-inline--fa .fa-primary{fill:var(--fa-primary-color,currentColor);opacity:var(--fa-primary-opacity,1)}.svg-inline--fa .fa-secondary{fill:var(--fa-secondary-color,currentColor);opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-primary{opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-secondary{opacity:var(--fa-primary-opacity,1)}.svg-inline--fa mask .fa-primary,.svg-inline--fa mask .fa-secondary{fill:#000}.fa-duotone.fa-inverse,.fad.fa-inverse{color:var(--fa-inverse,#fff)}';if(n!==e||i!==t){var o=new RegExp("\\.".concat(e,"\\-"),"g"),a=new RegExp("\\--".concat(e,"\\-"),"g"),s=new RegExp("\\.".concat(t),"g");r=r.replace(o,".".concat(n,"-")).replace(a,"--".concat(n,"-")).replace(s,".".concat(i))}return r}var oe=!1;function ae(){X.autoAddCss&&!oe&&(function(e){if(e&&w){var t=v.createElement("style");t.setAttribute("type","text/css"),t.innerHTML=e;for(var n=v.head.childNodes,i=null,r=n.length-1;r>-1;r--){var o=n[r],a=(o.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(a)>-1&&(i=o)}v.head.insertBefore(t,i)}}(re()),oe=!0)}var se={mixout:function(){return{dom:{css:re,insertCss:ae}}},hooks:function(){return{beforeDOMElementCreation:function(){ae()},beforeI2svg:function(){ae()}}}},le=g||{};le.___FONT_AWESOME___||(le.___FONT_AWESOME___={}),le.___FONT_AWESOME___.styles||(le.___FONT_AWESOME___.styles={}),le.___FONT_AWESOME___.hooks||(le.___FONT_AWESOME___.hooks={}),le.___FONT_AWESOME___.shims||(le.___FONT_AWESOME___.shims=[]);var ce=le.___FONT_AWESOME___,ue=[],fe=!1;function de(e){w&&(fe?setTimeout(e,0):ue.push(e))}function pe(e){var t=e.tag,n=e.attributes,i=void 0===n?{}:n,r=e.children,o=void 0===r?[]:r;return"string"==typeof e?te(e):"<".concat(t," ").concat(function(e){return Object.keys(e||{}).reduce((function(t,n){return t+"".concat(n,'="').concat(te(e[n]),'" ')}),"").trim()}(i),">").concat(o.map(pe).join(""),"</").concat(t,">")}function he(e,t,n){if(e&&e[t]&&e[t][n])return{prefix:t,iconName:n,icon:e[t][n]}}w&&((fe=(v.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(v.readyState))||v.addEventListener("DOMContentLoaded",(function e(){v.removeEventListener("DOMContentLoaded",e),fe=1,ue.map((function(e){return e()}))})));var me=function(e,t,n,i){var r,o,a,s=Object.keys(e),l=s.length,c=void 0!==i?function(e,t){return function(n,i,r,o){return e.call(t,n,i,r,o)}}(t,i):t;for(void 0===n?(r=1,a=e[s[0]]):(r=0,a=n);r<l;r++)a=c(a,e[o=s[r]],o,e);return a};function ge(e){var t=function(e){for(var t=[],n=0,i=e.length;n<i;){var r=e.charCodeAt(n++);if(r>=55296&&r<=56319&&n<i){var o=e.charCodeAt(n++);56320==(64512&o)?t.push(((1023&r)<<10)+(1023&o)+65536):(t.push(r),n--)}else t.push(r)}return t}(e);return 1===t.length?t[0].toString(16):null}function ve(e){return Object.keys(e).reduce((function(t,n){var i=e[n];return i.icon?t[i.iconName]=i.icon:t[n]=i,t}),{})}function be(e,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=i.skipHooks,o=void 0!==r&&r,a=ve(n);"function"!=typeof ce.hooks.addPack||o?ce.styles[e]=t(t({},ce.styles[e]||{}),a):ce.hooks.addPack(e,ve(n)),"fas"===e&&be("fa",n)}var ye=ce.styles,_e=ce.shims,we=Object.values(j),xe=null,ke={},Ee={},Ae={},Te={},Ce={},Oe=Object.keys(D);function Se(e,t){var n,i=t.split("-"),r=i[0],o=i.slice(1).join("-");return r!==e||""===o||(n=o,~Y.indexOf(n))?null:o}var Ne,De=function(){var e=function(e){return me(ye,(function(t,n,i){return t[i]=me(n,e,{}),t}),{})};ke=e((function(e,t,n){return t[3]&&(e[t[3]]=n),t[2]&&t[2].filter((function(e){return"number"==typeof e})).forEach((function(t){e[t.toString(16)]=n})),e})),Ee=e((function(e,t,n){return e[n]=n,t[2]&&t[2].filter((function(e){return"string"==typeof e})).forEach((function(t){e[t]=n})),e})),Ce=e((function(e,t,n){var i=t[2];return e[n]=n,i.forEach((function(t){e[t]=n})),e}));var t="far"in ye||X.autoFetchSvg,n=me(_e,(function(e,n){var i=n[0],r=n[1],o=n[2];return"far"!==r||t||(r="fas"),"string"==typeof i&&(e.names[i]={prefix:r,iconName:o}),"number"==typeof i&&(e.unicodes[i.toString(16)]={prefix:r,iconName:o}),e}),{names:{},unicodes:{}});Ae=n.names,Te=n.unicodes,xe=Ie(X.styleDefault)};function Le(e,t){return(ke[e]||{})[t]}function je(e,t){return(Ce[e]||{})[t]}function Pe(e){return Ae[e]||{prefix:null,iconName:null}}function Me(){return xe}function Ie(e){var t=L[e]||L[D[e]],n=e in ce.styles?e:null;return t||n||null}function He(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.skipLookups,i=void 0!==n&&n,r=null,o=e.reduce((function(e,t){var n=Se(X.familyPrefix,t);if(ye[t]?(t=we.includes(t)?P[t]:t,r=t,e.prefix=t):Oe.indexOf(t)>-1?(r=t,e.prefix=Ie(t)):n?e.iconName=n:t!==X.replacementClass&&e.rest.push(t),!i&&e.prefix&&e.iconName){var o="fa"===r?Pe(e.iconName):{},a=je(e.prefix,e.iconName);o.prefix&&(r=null),e.iconName=o.iconName||a||e.iconName,e.prefix=o.prefix||e.prefix,"far"!==e.prefix||ye.far||!ye.fas||X.autoFetchSvg||(e.prefix="fas")}return e}),{prefix:null,iconName:null,rest:[]});return"fa"!==o.prefix&&"fa"!==r||(o.prefix=Me()||"fas"),o}Ne=function(e){xe=Ie(e.styleDefault)},K.push(Ne),De();var Re=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.definitions={}}var n,r;return n=e,r=[{key:"add",value:function(){for(var e=this,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];var o=i.reduce(this._pullDefinitions,{});Object.keys(o).forEach((function(n){e.definitions[n]=t(t({},e.definitions[n]||{}),o[n]),be(n,o[n]);var i=j[n];i&&be(i,o[n]),De()}))}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(e,t){var n=t.prefix&&t.iconName&&t.icon?{0:t}:t;return Object.keys(n).map((function(t){var i=n[t],r=i.prefix,o=i.iconName,a=i.icon,s=a[2];e[r]||(e[r]={}),s.length>0&&s.forEach((function(t){"string"==typeof t&&(e[r][t]=a)})),e[r][o]=a})),e}}],r&&i(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),e}(),qe=[],ze={},Be={},We=Object.keys(Be);function Fe(e,t){for(var n=arguments.length,i=new Array(n>2?n-2:0),r=2;r<n;r++)i[r-2]=arguments[r];var o=ze[e]||[];return o.forEach((function(e){t=e.apply(null,[t].concat(i))})),t}function $e(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];var r=ze[e]||[];r.forEach((function(e){e.apply(null,n)}))}function Ye(){var e=arguments[0],t=Array.prototype.slice.call(arguments,1);return Be[e]?Be[e].apply(null,t):void 0}function Ue(e){"fa"===e.prefix&&(e.prefix="fas");var t=e.iconName,n=e.prefix||Me();if(t)return t=je(n,t)||t,he(Ve.definitions,n,t)||he(ce.styles,n,t)}var Ve=new Re,Xe={i2svg:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return w?($e("beforeI2svg",e),Ye("pseudoElements2svg",e),Ye("i2svg",e)):Promise.reject("Operation requires a DOM of some kind.")},watch:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.autoReplaceSvgRoot;!1===X.autoReplaceSvg&&(X.autoReplaceSvg=!0),X.observeMutations=!0,de((function(){Qe({autoReplaceSvgRoot:t}),$e("watch",e)}))}},Ke={noAuto:function(){X.autoReplaceSvg=!1,X.observeMutations=!1,$e("noAuto")},config:X,dom:Xe,parse:{icon:function(e){if(null===e)return null;if("object"===n(e)&&e.prefix&&e.iconName)return{prefix:e.prefix,iconName:je(e.prefix,e.iconName)||e.iconName};if(Array.isArray(e)&&2===e.length){var t=0===e[1].indexOf("fa-")?e[1].slice(3):e[1],i=Ie(e[0]);return{prefix:i,iconName:je(i,t)||t}}if("string"==typeof e&&(e.indexOf("".concat(X.familyPrefix,"-"))>-1||e.match(M))){var r=He(e.split(" "),{skipLookups:!0});return{prefix:r.prefix||Me(),iconName:je(r.prefix,r.iconName)||r.iconName}}if("string"==typeof e){var o=Me();return{prefix:o,iconName:je(o,e)||e}}}},library:Ve,findIconDefinition:Ue,toHtml:pe},Qe=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.autoReplaceSvgRoot,n=void 0===t?v:t;(Object.keys(ce.styles).length>0||X.autoFetchSvg)&&w&&X.autoReplaceSvg&&Ke.dom.i2svg({node:n})};function Ge(e,t){return Object.defineProperty(e,"abstract",{get:t}),Object.defineProperty(e,"html",{get:function(){return e.abstract.map((function(e){return pe(e)}))}}),Object.defineProperty(e,"node",{get:function(){if(w){var t=v.createElement("div");return t.innerHTML=e.html,t.children}}}),e}function Je(e){var n=e.icons,i=n.main,r=n.mask,o=e.prefix,a=e.iconName,s=e.transform,l=e.symbol,c=e.title,u=e.maskId,f=e.titleId,d=e.extra,p=e.watchable,h=void 0!==p&&p,m=r.found?r:i,g=m.width,v=m.height,b="fak"===o,y=[X.replacementClass,a?"".concat(X.familyPrefix,"-").concat(a):""].filter((function(e){return-1===d.classes.indexOf(e)})).filter((function(e){return""!==e||!!e})).concat(d.classes).join(" "),_={children:[],attributes:t(t({},d.attributes),{},{"data-prefix":o,"data-icon":a,class:y,role:d.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(g," ").concat(v)})},w=b&&!~d.classes.indexOf("fa-fw")?{width:"".concat(g/v*16*.0625,"em")}:{};h&&(_.attributes[E]=""),c&&(_.children.push({tag:"title",attributes:{id:_.attributes["aria-labelledby"]||"title-".concat(f||J())},children:[c]}),delete _.attributes.title);var x=t(t({},_),{},{prefix:o,iconName:a,main:i,mask:r,maskId:u,transform:s,symbol:l,styles:t(t({},w),d.styles)}),k=r.found&&i.found?Ye("generateAbstractMask",x)||{children:[],attributes:{}}:Ye("generateAbstractIcon",x)||{children:[],attributes:{}},A=k.children,T=k.attributes;return x.children=A,x.attributes=T,l?function(e){var n=e.prefix,i=e.iconName,r=e.children,o=e.attributes,a=e.symbol,s=!0===a?"".concat(n,"-").concat(X.familyPrefix,"-").concat(i):a;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:t(t({},o),{},{id:s}),children:r}]}]}(x):function(e){var n=e.children,i=e.main,r=e.mask,o=e.attributes,a=e.styles,s=e.transform;if(ie(s)&&i.found&&!r.found){var l={x:i.width/i.height/2,y:.5};o.style=ne(t(t({},a),{},{"transform-origin":"".concat(l.x+s.x/16,"em ").concat(l.y+s.y/16,"em")}))}return[{tag:"svg",attributes:o,children:n}]}(x)}function Ze(e){var n=e.content,i=e.width,r=e.height,o=e.transform,a=e.title,s=e.extra,l=e.watchable,c=void 0!==l&&l,u=t(t(t({},s.attributes),a?{title:a}:{}),{},{class:s.classes.join(" ")});c&&(u[E]="");var f=t({},s.styles);ie(o)&&(f.transform=function(e){var t=e.transform,n=e.width,i=void 0===n?16:n,r=e.height,o=void 0===r?16:r,a=e.startCentered,s=void 0!==a&&a,l="";return l+=s&&x?"translate(".concat(t.x/Q-i/2,"em, ").concat(t.y/Q-o/2,"em) "):s?"translate(calc(-50% + ".concat(t.x/Q,"em), calc(-50% + ").concat(t.y/Q,"em)) "):"translate(".concat(t.x/Q,"em, ").concat(t.y/Q,"em) "),(l+="scale(".concat(t.size/Q*(t.flipX?-1:1),", ").concat(t.size/Q*(t.flipY?-1:1),") "))+"rotate(".concat(t.rotate,"deg) ")}({transform:o,startCentered:!0,width:i,height:r}),f["-webkit-transform"]=f.transform);var d=ne(f);d.length>0&&(u.style=d);var p=[];return p.push({tag:"span",attributes:u,children:[n]}),a&&p.push({tag:"span",attributes:{class:"sr-only"},children:[a]}),p}function et(e){var n=e.content,i=e.title,r=e.extra,o=t(t(t({},r.attributes),i?{title:i}:{}),{},{class:r.classes.join(" ")}),a=ne(r.styles);a.length>0&&(o.style=a);var s=[];return s.push({tag:"span",attributes:o,children:[n]}),i&&s.push({tag:"span",attributes:{class:"sr-only"},children:[i]}),s}var tt=ce.styles;function nt(e){var t=e[0],n=e[1],i=o(e.slice(4),1)[0];return{found:!0,width:t,height:n,icon:Array.isArray(i)?{tag:"g",attributes:{class:"".concat(X.familyPrefix,"-").concat(W)},children:[{tag:"path",attributes:{class:"".concat(X.familyPrefix,"-").concat($),fill:"currentColor",d:i[0]}},{tag:"path",attributes:{class:"".concat(X.familyPrefix,"-").concat(F),fill:"currentColor",d:i[1]}}]}:{tag:"path",attributes:{fill:"currentColor",d:i}}}}var it={found:!1,width:512,height:512};function rt(e,n){var i=n;return"fa"===n&&null!==X.styleDefault&&(n=Me()),new Promise((function(r,o){if(Ye("missingIconAbstract"),"fa"===i){var a=Pe(e)||{};e=a.iconName||e,n=a.prefix||n}if(e&&n&&tt[n]&&tt[n][e])return r(nt(tt[n][e]));!function(e,t){N||X.showMissingIcons||!e||console.error('Icon with name "'.concat(e,'" and prefix "').concat(t,'" is missing.'))}(e,n),r(t(t({},it),{},{icon:X.showMissingIcons&&e&&Ye("missingIconAbstract")||{}}))}))}var ot=function(){},at=X.measurePerformance&&y&&y.mark&&y.measure?y:{mark:ot,measure:ot},st='FA "6.1.1"',lt=function(e){return at.mark("".concat(st," ").concat(e," begins")),function(){return function(e){at.mark("".concat(st," ").concat(e," ends")),at.measure("".concat(st," ").concat(e),"".concat(st," ").concat(e," begins"),"".concat(st," ").concat(e," ends"))}(e)}},ct=function(){};function ut(e){return"string"==typeof(e.getAttribute?e.getAttribute(E):null)}function ft(e){return v.createElementNS("http://www.w3.org/2000/svg",e)}function dt(e){return v.createElement(e)}function pt(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.ceFn,i=void 0===n?"svg"===e.tag?ft:dt:n;if("string"==typeof e)return v.createTextNode(e);var r=i(e.tag);Object.keys(e.attributes||[]).forEach((function(t){r.setAttribute(t,e.attributes[t])}));var o=e.children||[];return o.forEach((function(e){r.appendChild(pt(e,{ceFn:i}))})),r}var ht={replace:function(e){var t=e[0];if(t.parentNode)if(e[1].forEach((function(e){t.parentNode.insertBefore(pt(e),t)})),null===t.getAttribute(E)&&X.keepOriginalSource){var n=v.createComment(function(e){var t=" ".concat(e.outerHTML," ");return"".concat(t,"Font Awesome fontawesome.com ")}(t));t.parentNode.replaceChild(n,t)}else t.remove()},nest:function(e){var t=e[0],n=e[1];if(~ee(t).indexOf(X.replacementClass))return ht.replace(e);var i=new RegExp("".concat(X.familyPrefix,"-.*"));if(delete n[0].attributes.id,n[0].attributes.class){var r=n[0].attributes.class.split(" ").reduce((function(e,t){return t===X.replacementClass||t.match(i)?e.toSvg.push(t):e.toNode.push(t),e}),{toNode:[],toSvg:[]});n[0].attributes.class=r.toSvg.join(" "),0===r.toNode.length?t.removeAttribute("class"):t.setAttribute("class",r.toNode.join(" "))}var o=n.map((function(e){return pe(e)})).join("\n");t.setAttribute(E,""),t.innerHTML=o}};function mt(e){e()}function gt(e,t){var n="function"==typeof t?t:ct;if(0===e.length)n();else{var i=mt;"async"===X.mutateApproach&&(i=g.requestAnimationFrame||mt),i((function(){var t=!0===X.autoReplaceSvg?ht.replace:ht[X.autoReplaceSvg]||ht.replace,i=lt("mutate");e.map(t),i(),n()}))}}var vt=!1;function bt(){vt=!0}function yt(){vt=!1}var _t=null;function wt(e){if(b&&X.observeMutations){var t=e.treeCallback,n=void 0===t?ct:t,i=e.nodeCallback,r=void 0===i?ct:i,o=e.pseudoElementsCallback,a=void 0===o?ct:o,s=e.observeMutationsRoot,l=void 0===s?v:s;_t=new b((function(e){if(!vt){var t=Me();Z(e).forEach((function(e){if("childList"===e.type&&e.addedNodes.length>0&&!ut(e.addedNodes[0])&&(X.searchPseudoElements&&a(e.target),n(e.target)),"attributes"===e.type&&e.target.parentNode&&X.searchPseudoElements&&a(e.target.parentNode),"attributes"===e.type&&ut(e.target)&&~B.indexOf(e.attributeName))if("class"===e.attributeName&&function(e){var t=e.getAttribute?e.getAttribute(T):null,n=e.getAttribute?e.getAttribute(C):null;return t&&n}(e.target)){var i=He(ee(e.target)),o=i.prefix,s=i.iconName;e.target.setAttribute(T,o||t),s&&e.target.setAttribute(C,s)}else(l=e.target)&&l.classList&&l.classList.contains&&l.classList.contains(X.replacementClass)&&r(e.target);var l}))}})),w&&_t.observe(l,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}function xt(e){var t=e.getAttribute("style"),n=[];return t&&(n=t.split(";").reduce((function(e,t){var n=t.split(":"),i=n[0],r=n.slice(1);return i&&r.length>0&&(e[i]=r.join(":").trim()),e}),{})),n}function kt(e){var t,n,i=e.getAttribute("data-prefix"),r=e.getAttribute("data-icon"),o=void 0!==e.innerText?e.innerText.trim():"",a=He(ee(e));return a.prefix||(a.prefix=Me()),i&&r&&(a.prefix=i,a.iconName=r),a.iconName&&a.prefix||a.prefix&&o.length>0&&(a.iconName=(t=a.prefix,n=e.innerText,(Ee[t]||{})[n]||Le(a.prefix,ge(e.innerText)))),a}function Et(e){var t=Z(e.attributes).reduce((function(e,t){return"class"!==e.name&&"style"!==e.name&&(e[t.name]=t.value),e}),{}),n=e.getAttribute("title"),i=e.getAttribute("data-fa-title-id");return X.autoA11y&&(n?t["aria-labelledby"]="".concat(X.replacementClass,"-title-").concat(i||J()):(t["aria-hidden"]="true",t.focusable="false")),t}function At(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{styleParser:!0},i=kt(e),r=i.iconName,o=i.prefix,a=i.rest,s=Et(e),l=Fe("parseNodeAttributes",{},e),c=n.styleParser?xt(e):[];return t({iconName:r,title:e.getAttribute("title"),titleId:e.getAttribute("data-fa-title-id"),prefix:o,transform:G,mask:{iconName:null,prefix:null,rest:[]},maskId:null,symbol:!1,extra:{classes:a,styles:c,attributes:s}},l)}var Tt=ce.styles;function Ct(e){var t="nest"===X.autoReplaceSvg?At(e,{styleParser:!1}):At(e);return~t.extra.classes.indexOf(I)?Ye("generateLayersText",e,t):Ye("generateSvgReplacementMutation",e,t)}function Ot(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!w)return Promise.resolve();var n=v.documentElement.classList,i=function(e){return n.add("".concat(O,"-").concat(e))},r=function(e){return n.remove("".concat(O,"-").concat(e))},o=X.autoFetchSvg?Object.keys(D):Object.keys(Tt),a=[".".concat(I,":not([").concat(E,"])")].concat(o.map((function(e){return".".concat(e,":not([").concat(E,"])")}))).join(", ");if(0===a.length)return Promise.resolve();var s=[];try{s=Z(e.querySelectorAll(a))}catch(e){}if(!(s.length>0))return Promise.resolve();i("pending"),r("complete");var l=lt("onTree"),c=s.reduce((function(e,t){try{var n=Ct(t);n&&e.push(n)}catch(e){N||"MissingIcon"===e.name&&console.error(e)}return e}),[]);return new Promise((function(e,n){Promise.all(c).then((function(n){gt(n,(function(){i("active"),i("complete"),r("pending"),"function"==typeof t&&t(),l(),e()}))})).catch((function(e){l(),n(e)}))}))}function St(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;Ct(e).then((function(e){e&&gt([e],t)}))}var Nt=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.transform,r=void 0===i?G:i,o=n.symbol,a=void 0!==o&&o,s=n.mask,l=void 0===s?null:s,c=n.maskId,u=void 0===c?null:c,f=n.title,d=void 0===f?null:f,p=n.titleId,h=void 0===p?null:p,m=n.classes,g=void 0===m?[]:m,v=n.attributes,b=void 0===v?{}:v,y=n.styles,_=void 0===y?{}:y;if(e){var w=e.prefix,x=e.iconName,k=e.icon;return Ge(t({type:"icon"},e),(function(){return $e("beforeDOMElementCreation",{iconDefinition:e,params:n}),X.autoA11y&&(d?b["aria-labelledby"]="".concat(X.replacementClass,"-title-").concat(h||J()):(b["aria-hidden"]="true",b.focusable="false")),Je({icons:{main:nt(k),mask:l?nt(l.icon):{found:!1,width:null,height:null,icon:{}}},prefix:w,iconName:x,transform:t(t({},G),r),symbol:a,title:d,maskId:u,titleId:h,extra:{attributes:b,styles:_,classes:g}})}))}},Dt={mixout:function(){return{icon:(e=Nt,function(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(n||{}).icon?n:Ue(n||{}),o=i.mask;return o&&(o=(o||{}).icon?o:Ue(o||{})),e(r,t(t({},i),{},{mask:o}))})};var e},hooks:function(){return{mutationObserverCallbacks:function(e){return e.treeCallback=Ot,e.nodeCallback=St,e}}},provides:function(e){e.i2svg=function(e){var t=e.node,n=void 0===t?v:t,i=e.callback;return Ot(n,void 0===i?function(){}:i)},e.generateSvgReplacementMutation=function(e,t){var n=t.iconName,i=t.title,r=t.titleId,a=t.prefix,s=t.transform,l=t.symbol,c=t.mask,u=t.maskId,f=t.extra;return new Promise((function(t,d){Promise.all([rt(n,a),c.iconName?rt(c.iconName,c.prefix):Promise.resolve({found:!1,width:512,height:512,icon:{}})]).then((function(c){var d=o(c,2),p=d[0],h=d[1];t([e,Je({icons:{main:p,mask:h},prefix:a,iconName:n,transform:s,symbol:l,maskId:u,title:i,titleId:r,extra:f,watchable:!0})])})).catch(d)}))},e.generateAbstractIcon=function(e){var t,n=e.children,i=e.attributes,r=e.main,o=e.transform,a=ne(e.styles);return a.length>0&&(i.style=a),ie(o)&&(t=Ye("generateAbstractTransformGrouping",{main:r,transform:o,containerWidth:r.width,iconWidth:r.width})),n.push(t||r.icon),{children:n,attributes:i}}}},Lt={mixout:function(){return{layer:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.classes,i=void 0===n?[]:n;return Ge({type:"layer"},(function(){$e("beforeDOMElementCreation",{assembler:e,params:t});var n=[];return e((function(e){Array.isArray(e)?e.map((function(e){n=n.concat(e.abstract)})):n=n.concat(e.abstract)})),[{tag:"span",attributes:{class:["".concat(X.familyPrefix,"-layers")].concat(a(i)).join(" ")},children:n}]}))}}}},jt={mixout:function(){return{counter:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.title,i=void 0===n?null:n,r=t.classes,o=void 0===r?[]:r,s=t.attributes,l=void 0===s?{}:s,c=t.styles,u=void 0===c?{}:c;return Ge({type:"counter",content:e},(function(){return $e("beforeDOMElementCreation",{content:e,params:t}),et({content:e.toString(),title:i,extra:{attributes:l,styles:u,classes:["".concat(X.familyPrefix,"-layers-counter")].concat(a(o))}})}))}}}},Pt={mixout:function(){return{text:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.transform,r=void 0===i?G:i,o=n.title,s=void 0===o?null:o,l=n.classes,c=void 0===l?[]:l,u=n.attributes,f=void 0===u?{}:u,d=n.styles,p=void 0===d?{}:d;return Ge({type:"text",content:e},(function(){return $e("beforeDOMElementCreation",{content:e,params:n}),Ze({content:e,transform:t(t({},G),r),title:s,extra:{attributes:f,styles:p,classes:["".concat(X.familyPrefix,"-layers-text")].concat(a(c))}})}))}}},provides:function(e){e.generateLayersText=function(e,t){var n=t.title,i=t.transform,r=t.extra,o=null,a=null;if(x){var s=parseInt(getComputedStyle(e).fontSize,10),l=e.getBoundingClientRect();o=l.width/s,a=l.height/s}return X.autoA11y&&!n&&(r.attributes["aria-hidden"]="true"),Promise.resolve([e,Ze({content:e.innerHTML,width:o,height:a,transform:i,title:n,extra:r,watchable:!0})])}}},Mt=new RegExp('"',"ug"),It=[1105920,1112319];function Ht(e,n){var i="".concat("data-fa-pseudo-element-pending").concat(n.replace(":","-"));return new Promise((function(r,o){if(null!==e.getAttribute(i))return r();var a,s,l,c=Z(e.children).filter((function(e){return e.getAttribute(A)===n}))[0],u=g.getComputedStyle(e,n),f=u.getPropertyValue("font-family").match(H),d=u.getPropertyValue("font-weight"),p=u.getPropertyValue("content");if(c&&!f)return e.removeChild(c),r();if(f&&"none"!==p&&""!==p){var h=u.getPropertyValue("content"),m=~["Solid","Regular","Light","Thin","Duotone","Brands","Kit"].indexOf(f[2])?L[f[2].toLowerCase()]:R[d],b=function(e){var t,n,i,r,o=e.replace(Mt,""),a=(0,i=(t=o).length,(r=t.charCodeAt(0))>=55296&&r<=56319&&i>1&&(n=t.charCodeAt(1))>=56320&&n<=57343?1024*(r-55296)+n-56320+65536:r),s=a>=It[0]&&a<=It[1],l=2===o.length&&o[0]===o[1];return{value:ge(l?o[0]:o),isSecondary:s||l}}(h),y=b.value,_=b.isSecondary,w=f[0].startsWith("FontAwesome"),x=Le(m,y),k=x;if(w){var E=(s=Te[a=y],l=Le("fas",a),s||(l?{prefix:"fas",iconName:l}:null)||{prefix:null,iconName:null});E.iconName&&E.prefix&&(x=E.iconName,m=E.prefix)}if(!x||_||c&&c.getAttribute(T)===m&&c.getAttribute(C)===k)r();else{e.setAttribute(i,k),c&&e.removeChild(c);var O={iconName:null,title:null,titleId:null,prefix:null,transform:G,symbol:!1,mask:{iconName:null,prefix:null,rest:[]},maskId:null,extra:{classes:[],styles:{},attributes:{}}},S=O.extra;S.attributes[A]=n,rt(x,m).then((function(o){var a=Je(t(t({},O),{},{icons:{main:o,mask:{prefix:null,iconName:null,rest:[]}},prefix:m,iconName:k,extra:S,watchable:!0})),s=v.createElement("svg");"::before"===n?e.insertBefore(s,e.firstChild):e.appendChild(s),s.outerHTML=a.map((function(e){return pe(e)})).join("\n"),e.removeAttribute(i),r()})).catch(o)}}else r()}))}function Rt(e){return Promise.all([Ht(e,"::before"),Ht(e,"::after")])}function qt(e){return!(e.parentNode===document.head||~S.indexOf(e.tagName.toUpperCase())||e.getAttribute(A)||e.parentNode&&"svg"===e.parentNode.tagName)}function zt(e){if(w)return new Promise((function(t,n){var i=Z(e.querySelectorAll("*")).filter(qt).map(Rt),r=lt("searchPseudoElements");bt(),Promise.all(i).then((function(){r(),yt(),t()})).catch((function(){r(),yt(),n()}))}))}var Bt=!1,Wt=function(e){return e.toLowerCase().split(" ").reduce((function(e,t){var n=t.toLowerCase().split("-"),i=n[0],r=n.slice(1).join("-");if(i&&"h"===r)return e.flipX=!0,e;if(i&&"v"===r)return e.flipY=!0,e;if(r=parseFloat(r),isNaN(r))return e;switch(i){case"grow":e.size=e.size+r;break;case"shrink":e.size=e.size-r;break;case"left":e.x=e.x-r;break;case"right":e.x=e.x+r;break;case"up":e.y=e.y-r;break;case"down":e.y=e.y+r;break;case"rotate":e.rotate=e.rotate+r}return e}),{size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0})},Ft={mixout:function(){return{parse:{transform:function(e){return Wt(e)}}}},hooks:function(){return{parseNodeAttributes:function(e,t){var n=t.getAttribute("data-fa-transform");return n&&(e.transform=Wt(n)),e}}},provides:function(e){e.generateAbstractTransformGrouping=function(e){var n=e.main,i=e.transform,r=e.containerWidth,o=e.iconWidth,a={transform:"translate(".concat(r/2," 256)")},s="translate(".concat(32*i.x,", ").concat(32*i.y,") "),l="scale(".concat(i.size/16*(i.flipX?-1:1),", ").concat(i.size/16*(i.flipY?-1:1),") "),c="rotate(".concat(i.rotate," 0 0)"),u={outer:a,inner:{transform:"".concat(s," ").concat(l," ").concat(c)},path:{transform:"translate(".concat(o/2*-1," -256)")}};return{tag:"g",attributes:t({},u.outer),children:[{tag:"g",attributes:t({},u.inner),children:[{tag:n.icon.tag,children:n.icon.children,attributes:t(t({},n.icon.attributes),u.path)}]}]}}}},$t={x:0,y:0,width:"100%",height:"100%"};function Yt(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return e.attributes&&(e.attributes.fill||t)&&(e.attributes.fill="black"),e}var Ut,Vt={hooks:function(){return{parseNodeAttributes:function(e,t){var n=t.getAttribute("data-fa-mask"),i=n?He(n.split(" ").map((function(e){return e.trim()}))):{prefix:null,iconName:null,rest:[]};return i.prefix||(i.prefix=Me()),e.mask=i,e.maskId=t.getAttribute("data-fa-mask-id"),e}}},provides:function(e){e.generateAbstractMask=function(e){var n,i=e.children,r=e.attributes,o=e.main,a=e.mask,s=e.maskId,l=e.transform,c=o.width,u=o.icon,f=a.width,d=a.icon,p=function(e){var t=e.transform,n=e.iconWidth,i={transform:"translate(".concat(e.containerWidth/2," 256)")},r="translate(".concat(32*t.x,", ").concat(32*t.y,") "),o="scale(".concat(t.size/16*(t.flipX?-1:1),", ").concat(t.size/16*(t.flipY?-1:1),") "),a="rotate(".concat(t.rotate," 0 0)");return{outer:i,inner:{transform:"".concat(r," ").concat(o," ").concat(a)},path:{transform:"translate(".concat(n/2*-1," -256)")}}}({transform:l,containerWidth:f,iconWidth:c}),h={tag:"rect",attributes:t(t({},$t),{},{fill:"white"})},m=u.children?{children:u.children.map(Yt)}:{},g={tag:"g",attributes:t({},p.inner),children:[Yt(t({tag:u.tag,attributes:t(t({},u.attributes),p.path)},m))]},v={tag:"g",attributes:t({},p.outer),children:[g]},b="mask-".concat(s||J()),y="clip-".concat(s||J()),_={tag:"mask",attributes:t(t({},$t),{},{id:b,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[h,v]},w={tag:"defs",children:[{tag:"clipPath",attributes:{id:y},children:(n=d,"g"===n.tag?n.children:[n])},_]};return i.push(w,{tag:"rect",attributes:t({fill:"currentColor","clip-path":"url(#".concat(y,")"),mask:"url(#".concat(b,")")},$t)}),{children:i,attributes:r}}}},Xt={provides:function(e){var n=!1;g.matchMedia&&(n=g.matchMedia("(prefers-reduced-motion: reduce)").matches),e.missingIconAbstract=function(){var e=[],i={fill:"currentColor"},r={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};e.push({tag:"path",attributes:t(t({},i),{},{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})});var o=t(t({},r),{},{attributeName:"opacity"}),a={tag:"circle",attributes:t(t({},i),{},{cx:"256",cy:"364",r:"28"}),children:[]};return n||a.children.push({tag:"animate",attributes:t(t({},r),{},{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:t(t({},o),{},{values:"1;0;1;1;0;1;"})}),e.push(a),e.push({tag:"path",attributes:t(t({},i),{},{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:n?[]:[{tag:"animate",attributes:t(t({},o),{},{values:"1;0;0;0;0;1;"})}]}),n||e.push({tag:"path",attributes:t(t({},i),{},{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:t(t({},o),{},{values:"0;0;1;1;0;0;"})}]}),{tag:"g",attributes:{class:"missing"},children:e}}}};Ut={mixoutsTo:Ke}.mixoutsTo,qe=[se,Dt,Lt,jt,Pt,{hooks:function(){return{mutationObserverCallbacks:function(e){return e.pseudoElementsCallback=zt,e}}},provides:function(e){e.pseudoElements2svg=function(e){var t=e.node,n=void 0===t?v:t;X.searchPseudoElements&&zt(n)}}},{mixout:function(){return{dom:{unwatch:function(){bt(),Bt=!0}}}},hooks:function(){return{bootstrap:function(){wt(Fe("mutationObserverCallbacks",{}))},noAuto:function(){_t&&_t.disconnect()},watch:function(e){var t=e.observeMutationsRoot;Bt?yt():wt(Fe("mutationObserverCallbacks",{observeMutationsRoot:t}))}}}},Ft,Vt,Xt,{hooks:function(){return{parseNodeAttributes:function(e,t){var n=t.getAttribute("data-fa-symbol"),i=null!==n&&(""===n||n);return e.symbol=i,e}}}}],ze={},Object.keys(Be).forEach((function(e){-1===We.indexOf(e)&&delete Be[e]})),qe.forEach((function(e){var t=e.mixout?e.mixout():{};if(Object.keys(t).forEach((function(e){"function"==typeof t[e]&&(Ut[e]=t[e]),"object"===n(t[e])&&Object.keys(t[e]).forEach((function(n){Ut[e]||(Ut[e]={}),Ut[e][n]=t[e][n]}))})),e.hooks){var i=e.hooks();Object.keys(i).forEach((function(e){ze[e]||(ze[e]=[]),ze[e].push(i[e])}))}e.provides&&e.provides(Be)})),function(e){try{for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];e.apply(void 0,n)}catch(e){if(!N)throw e}}((function(e){_&&(g.FontAwesome||(g.FontAwesome=Ke),de((function(){Qe(),$e("bootstrap")}))),ce.hooks=t(t({},ce.hooks),{},{addPack:function(e,n){ce.styles[e]=t(t({},ce.styles[e]||{}),n),De(),Qe()},addPacks:function(e){e.forEach((function(e){var n=o(e,2),i=n[0],r=n[1];ce.styles[i]=t(t({},ce.styles[i]||{}),r)})),De(),Qe()},addShims:function(e){var t;(t=ce.shims).push.apply(t,a(e)),De(),Qe()}})}))}()},169:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Alert:()=>bt,Button:()=>_t,Carousel:()=>It,Collapse:()=>Ut,Dropdown:()=>pn,Modal:()=>zn,Offcanvas:()=>Vn,Popover:()=>bi,ScrollSpy:()=>Ai,Tab:()=>Di,Toast:()=>Ri,Tooltip:()=>hi});var i={};n.r(i),n.d(i,{afterMain:()=>k,afterRead:()=>_,afterWrite:()=>T,applyStyles:()=>j,arrow:()=>G,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>b,beforeWrite:()=>E,bottom:()=>o,clippingParents:()=>d,computeStyles:()=>te,createPopper:()=>Ne,createPopperBase:()=>Se,createPopperLite:()=>De,detectOverflow:()=>ge,end:()=>f,eventListeners:()=>ie,flip:()=>ve,hide:()=>_e,left:()=>s,main:()=>x,modifierPhases:()=>C,offset:()=>we,placements:()=>v,popper:()=>h,popperGenerator:()=>Oe,popperOffsets:()=>xe,preventOverflow:()=>ke,read:()=>y,reference:()=>m,right:()=>a,start:()=>u,top:()=>r,variationPlacements:()=>g,viewport:()=>p,write:()=>A});var r="top",o="bottom",a="right",s="left",l="auto",c=[r,o,a,s],u="start",f="end",d="clippingParents",p="viewport",h="popper",m="reference",g=c.reduce((function(e,t){return e.concat([t+"-"+u,t+"-"+f])}),[]),v=[].concat(c,[l]).reduce((function(e,t){return e.concat([t,t+"-"+u,t+"-"+f])}),[]),b="beforeRead",y="read",_="afterRead",w="beforeMain",x="main",k="afterMain",E="beforeWrite",A="write",T="afterWrite",C=[b,y,_,w,x,k,E,A,T];function O(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function N(e){return e instanceof S(e).Element||e instanceof Element}function D(e){return e instanceof S(e).HTMLElement||e instanceof HTMLElement}function L(e){return"undefined"!=typeof ShadowRoot&&(e instanceof S(e).ShadowRoot||e instanceof ShadowRoot)}const j={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];D(r)&&O(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});D(i)&&O(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]};function P(e){return e.split("-")[0]}var M=Math.max,I=Math.min,H=Math.round;function R(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),i=1,r=1;if(D(e)&&t){var o=e.offsetHeight,a=e.offsetWidth;a>0&&(i=H(n.width)/a||1),o>0&&(r=H(n.height)/o||1)}return{width:n.width/i,height:n.height/r,top:n.top/r,right:n.right/i,bottom:n.bottom/r,left:n.left/i,x:n.left/i,y:n.top/r}}function q(e){var t=R(e),n=e.offsetWidth,i=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-i)<=1&&(i=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:i}}function z(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&L(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function B(e){return S(e).getComputedStyle(e)}function W(e){return["table","td","th"].indexOf(O(e))>=0}function F(e){return((N(e)?e.ownerDocument:e.document)||window.document).documentElement}function $(e){return"html"===O(e)?e:e.assignedSlot||e.parentNode||(L(e)?e.host:null)||F(e)}function Y(e){return D(e)&&"fixed"!==B(e).position?e.offsetParent:null}function U(e){for(var t=S(e),n=Y(e);n&&W(n)&&"static"===B(n).position;)n=Y(n);return n&&("html"===O(n)||"body"===O(n)&&"static"===B(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&D(e)&&"fixed"===B(e).position)return null;var n=$(e);for(L(n)&&(n=n.host);D(n)&&["html","body"].indexOf(O(n))<0;){var i=B(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}function V(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function X(e,t,n){return M(e,I(t,n))}function K(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Q(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}const G={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,l=e.options,u=n.elements.arrow,f=n.modifiersData.popperOffsets,d=P(n.placement),p=V(d),h=[s,a].indexOf(d)>=0?"height":"width";if(u&&f){var m=function(e,t){return K("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Q(e,c))}(l.padding,n),g=q(u),v="y"===p?r:s,b="y"===p?o:a,y=n.rects.reference[h]+n.rects.reference[p]-f[p]-n.rects.popper[h],_=f[p]-n.rects.reference[p],w=U(u),x=w?"y"===p?w.clientHeight||0:w.clientWidth||0:0,k=y/2-_/2,E=m[v],A=x-g[h]-m[b],T=x/2-g[h]/2+k,C=X(E,T,A),O=p;n.modifiersData[i]=((t={})[O]=C,t.centerOffset=C-T,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&z(t.elements.popper,i)&&(t.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function J(e){return e.split("-")[1]}var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ee(e){var t,n=e.popper,i=e.popperRect,l=e.placement,c=e.variation,u=e.offsets,d=e.position,p=e.gpuAcceleration,h=e.adaptive,m=e.roundOffsets,g=e.isFixed,v=u.x,b=void 0===v?0:v,y=u.y,_=void 0===y?0:y,w="function"==typeof m?m({x:b,y:_}):{x:b,y:_};b=w.x,_=w.y;var x=u.hasOwnProperty("x"),k=u.hasOwnProperty("y"),E=s,A=r,T=window;if(h){var C=U(n),O="clientHeight",N="clientWidth";C===S(n)&&"static"!==B(C=F(n)).position&&"absolute"===d&&(O="scrollHeight",N="scrollWidth"),(l===r||(l===s||l===a)&&c===f)&&(A=o,_-=(g&&C===T&&T.visualViewport?T.visualViewport.height:C[O])-i.height,_*=p?1:-1),l!==s&&(l!==r&&l!==o||c!==f)||(E=a,b-=(g&&C===T&&T.visualViewport?T.visualViewport.width:C[N])-i.width,b*=p?1:-1)}var D,L=Object.assign({position:d},h&&Z),j=!0===m?function(e){var t=e.x,n=e.y,i=window.devicePixelRatio||1;return{x:H(t*i)/i||0,y:H(n*i)/i||0}}({x:b,y:_}):{x:b,y:_};return b=j.x,_=j.y,p?Object.assign({},L,((D={})[A]=k?"0":"",D[E]=x?"0":"",D.transform=(T.devicePixelRatio||1)<=1?"translate("+b+"px, "+_+"px)":"translate3d("+b+"px, "+_+"px, 0)",D)):Object.assign({},L,((t={})[A]=k?_+"px":"",t[E]=x?b+"px":"",t.transform="",t))}const te={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,a=void 0===o||o,s=n.roundOffsets,l=void 0===s||s,c={placement:P(t.placement),variation:J(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,ee(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,ee(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var ne={passive:!0};const ie={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,i=e.options,r=i.scroll,o=void 0===r||r,a=i.resize,s=void 0===a||a,l=S(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",n.update,ne)})),s&&l.addEventListener("resize",n.update,ne),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",n.update,ne)})),s&&l.removeEventListener("resize",n.update,ne)}},data:{}};var re={left:"right",right:"left",bottom:"top",top:"bottom"};function oe(e){return e.replace(/left|right|bottom|top/g,(function(e){return re[e]}))}var ae={start:"end",end:"start"};function se(e){return e.replace(/start|end/g,(function(e){return ae[e]}))}function le(e){var t=S(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function ce(e){return R(F(e)).left+le(e).scrollLeft}function ue(e){var t=B(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function fe(e){return["html","body","#document"].indexOf(O(e))>=0?e.ownerDocument.body:D(e)&&ue(e)?e:fe($(e))}function de(e,t){var n;void 0===t&&(t=[]);var i=fe(e),r=i===(null==(n=e.ownerDocument)?void 0:n.body),o=S(i),a=r?[o].concat(o.visualViewport||[],ue(i)?i:[]):i,s=t.concat(a);return r?s:s.concat(de($(a)))}function pe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function he(e,t){return t===p?pe(function(e){var t=S(e),n=F(e),i=t.visualViewport,r=n.clientWidth,o=n.clientHeight,a=0,s=0;return i&&(r=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=i.offsetLeft,s=i.offsetTop)),{width:r,height:o,x:a+ce(e),y:s}}(e)):N(t)?function(e){var t=R(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):pe(function(e){var t,n=F(e),i=le(e),r=null==(t=e.ownerDocument)?void 0:t.body,o=M(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),a=M(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),s=-i.scrollLeft+ce(e),l=-i.scrollTop;return"rtl"===B(r||n).direction&&(s+=M(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:a,x:s,y:l}}(F(e)))}function me(e){var t,n=e.reference,i=e.element,l=e.placement,c=l?P(l):null,d=l?J(l):null,p=n.x+n.width/2-i.width/2,h=n.y+n.height/2-i.height/2;switch(c){case r:t={x:p,y:n.y-i.height};break;case o:t={x:p,y:n.y+n.height};break;case a:t={x:n.x+n.width,y:h};break;case s:t={x:n.x-i.width,y:h};break;default:t={x:n.x,y:n.y}}var m=c?V(c):null;if(null!=m){var g="y"===m?"height":"width";switch(d){case u:t[m]=t[m]-(n[g]/2-i[g]/2);break;case f:t[m]=t[m]+(n[g]/2-i[g]/2)}}return t}function ge(e,t){void 0===t&&(t={});var n=t,i=n.placement,s=void 0===i?e.placement:i,l=n.boundary,u=void 0===l?d:l,f=n.rootBoundary,g=void 0===f?p:f,v=n.elementContext,b=void 0===v?h:v,y=n.altBoundary,_=void 0!==y&&y,w=n.padding,x=void 0===w?0:w,k=K("number"!=typeof x?x:Q(x,c)),E=b===h?m:h,A=e.rects.popper,T=e.elements[_?E:b],C=function(e,t,n){var i="clippingParents"===t?function(e){var t=de($(e)),n=["absolute","fixed"].indexOf(B(e).position)>=0&&D(e)?U(e):e;return N(n)?t.filter((function(e){return N(e)&&z(e,n)&&"body"!==O(e)})):[]}(e):[].concat(t),r=[].concat(i,[n]),o=r[0],a=r.reduce((function(t,n){var i=he(e,n);return t.top=M(i.top,t.top),t.right=I(i.right,t.right),t.bottom=I(i.bottom,t.bottom),t.left=M(i.left,t.left),t}),he(e,o));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(N(T)?T:T.contextElement||F(e.elements.popper),u,g),S=R(e.elements.reference),L=me({reference:S,element:A,strategy:"absolute",placement:s}),j=pe(Object.assign({},A,L)),P=b===h?j:S,H={top:C.top-P.top+k.top,bottom:P.bottom-C.bottom+k.bottom,left:C.left-P.left+k.left,right:P.right-C.right+k.right},q=e.modifiersData.offset;if(b===h&&q){var W=q[s];Object.keys(H).forEach((function(e){var t=[a,o].indexOf(e)>=0?1:-1,n=[r,o].indexOf(e)>=0?"y":"x";H[e]+=W[n]*t}))}return H}const ve={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var f=n.mainAxis,d=void 0===f||f,p=n.altAxis,h=void 0===p||p,m=n.fallbackPlacements,b=n.padding,y=n.boundary,_=n.rootBoundary,w=n.altBoundary,x=n.flipVariations,k=void 0===x||x,E=n.allowedAutoPlacements,A=t.options.placement,T=P(A),C=m||(T!==A&&k?function(e){if(P(e)===l)return[];var t=oe(e);return[se(e),t,se(t)]}(A):[oe(A)]),O=[A].concat(C).reduce((function(e,n){return e.concat(P(n)===l?function(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,o=n.rootBoundary,a=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?v:l,f=J(i),d=f?s?g:g.filter((function(e){return J(e)===f})):c,p=d.filter((function(e){return u.indexOf(e)>=0}));0===p.length&&(p=d);var h=p.reduce((function(t,n){return t[n]=ge(e,{placement:n,boundary:r,rootBoundary:o,padding:a})[P(n)],t}),{});return Object.keys(h).sort((function(e,t){return h[e]-h[t]}))}(t,{placement:n,boundary:y,rootBoundary:_,padding:b,flipVariations:k,allowedAutoPlacements:E}):n)}),[]),S=t.rects.reference,N=t.rects.popper,D=new Map,L=!0,j=O[0],M=0;M<O.length;M++){var I=O[M],H=P(I),R=J(I)===u,q=[r,o].indexOf(H)>=0,z=q?"width":"height",B=ge(t,{placement:I,boundary:y,rootBoundary:_,altBoundary:w,padding:b}),W=q?R?a:s:R?o:r;S[z]>N[z]&&(W=oe(W));var F=oe(W),$=[];if(d&&$.push(B[H]<=0),h&&$.push(B[W]<=0,B[F]<=0),$.every((function(e){return e}))){j=I,L=!1;break}D.set(I,$)}if(L)for(var Y=function(e){var t=O.find((function(t){var n=D.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return j=t,"break"},U=k?3:1;U>0&&"break"!==Y(U);U--);t.placement!==j&&(t.modifiersData[i]._skip=!0,t.placement=j,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function be(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ye(e){return[r,a,o,s].some((function(t){return e[t]>=0}))}const _e={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,o=t.modifiersData.preventOverflow,a=ge(t,{elementContext:"reference"}),s=ge(t,{altBoundary:!0}),l=be(a,i),c=be(s,r,o),u=ye(l),f=ye(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":f})}},we={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,o=n.offset,l=void 0===o?[0,0]:o,c=v.reduce((function(e,n){return e[n]=function(e,t,n){var i=P(e),o=[s,r].indexOf(i)>=0?-1:1,l="function"==typeof n?n(Object.assign({},t,{placement:e})):n,c=l[0],u=l[1];return c=c||0,u=(u||0)*o,[s,a].indexOf(i)>=0?{x:u,y:c}:{x:c,y:u}}(n,t.rects,l),e}),{}),u=c[t.placement],f=u.x,d=u.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=f,t.modifiersData.popperOffsets.y+=d),t.modifiersData[i]=c}},xe={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=me({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},ke={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,l=n.mainAxis,c=void 0===l||l,f=n.altAxis,d=void 0!==f&&f,p=n.boundary,h=n.rootBoundary,m=n.altBoundary,g=n.padding,v=n.tether,b=void 0===v||v,y=n.tetherOffset,_=void 0===y?0:y,w=ge(t,{boundary:p,rootBoundary:h,padding:g,altBoundary:m}),x=P(t.placement),k=J(t.placement),E=!k,A=V(x),T="x"===A?"y":"x",C=t.modifiersData.popperOffsets,O=t.rects.reference,S=t.rects.popper,N="function"==typeof _?_(Object.assign({},t.rects,{placement:t.placement})):_,D="number"==typeof N?{mainAxis:N,altAxis:N}:Object.assign({mainAxis:0,altAxis:0},N),L=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,j={x:0,y:0};if(C){if(c){var H,R="y"===A?r:s,z="y"===A?o:a,B="y"===A?"height":"width",W=C[A],F=W+w[R],$=W-w[z],Y=b?-S[B]/2:0,K=k===u?O[B]:S[B],Q=k===u?-S[B]:-O[B],G=t.elements.arrow,Z=b&&G?q(G):{width:0,height:0},ee=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},te=ee[R],ne=ee[z],ie=X(0,O[B],Z[B]),re=E?O[B]/2-Y-ie-te-D.mainAxis:K-ie-te-D.mainAxis,oe=E?-O[B]/2+Y+ie+ne+D.mainAxis:Q+ie+ne+D.mainAxis,ae=t.elements.arrow&&U(t.elements.arrow),se=ae?"y"===A?ae.clientTop||0:ae.clientLeft||0:0,le=null!=(H=null==L?void 0:L[A])?H:0,ce=W+oe-le,ue=X(b?I(F,W+re-le-se):F,W,b?M($,ce):$);C[A]=ue,j[A]=ue-W}if(d){var fe,de="x"===A?r:s,pe="x"===A?o:a,he=C[T],me="y"===T?"height":"width",ve=he+w[de],be=he-w[pe],ye=-1!==[r,s].indexOf(x),_e=null!=(fe=null==L?void 0:L[T])?fe:0,we=ye?ve:he-O[me]-S[me]-_e+D.altAxis,xe=ye?he+O[me]+S[me]-_e-D.altAxis:be,ke=b&&ye?function(e,t,n){var i=X(e,t,n);return i>n?n:i}(we,he,xe):X(b?we:ve,he,b?xe:be);C[T]=ke,j[T]=ke-he}t.modifiersData[i]=j}},requiresIfExists:["offset"]};function Ee(e,t,n){void 0===n&&(n=!1);var i,r,o=D(t),a=D(t)&&function(e){var t=e.getBoundingClientRect(),n=H(t.width)/e.offsetWidth||1,i=H(t.height)/e.offsetHeight||1;return 1!==n||1!==i}(t),s=F(t),l=R(e,a),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==O(t)||ue(s))&&(c=(i=t)!==S(i)&&D(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:le(i)),D(t)?((u=R(t,!0)).x+=t.clientLeft,u.y+=t.clientTop):s&&(u.x=ce(s))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function Ae(e){var t=new Map,n=new Set,i=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var i=t.get(e);i&&r(i)}})),i.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),i}var Te={placement:"bottom",modifiers:[],strategy:"absolute"};function Ce(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Oe(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,r=t.defaultOptions,o=void 0===r?Te:r;return function(e,t,n){void 0===n&&(n=o);var r,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Te,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,u={state:s,setOptions:function(n){var r="function"==typeof n?n(s.options):n;f(),s.options=Object.assign({},o,s.options,r),s.scrollParents={reference:N(e)?de(e):e.contextElement?de(e.contextElement):[],popper:de(t)};var a,c,d=function(e){var t=Ae(e);return C.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(i,s.options.modifiers),c=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return s.orderedModifiers=d.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var o=r({state:s,name:t,instance:u,options:i});l.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!c){var e=s.elements,t=e.reference,n=e.popper;if(Ce(t,n)){s.rects={reference:Ee(t,U(n),"fixed"===s.options.strategy),popper:q(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0;i<s.orderedModifiers.length;i++)if(!0!==s.reset){var r=s.orderedModifiers[i],o=r.fn,a=r.options,l=void 0===a?{}:a,f=r.name;"function"==typeof o&&(s=o({state:s,options:l,name:f,instance:u})||s)}else s.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(e){u.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(r())}))}))),a}),destroy:function(){f(),c=!0}};if(!Ce(e,t))return u;function f(){l.forEach((function(e){return e()})),l=[]}return u.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var Se=Oe(),Ne=Oe({defaultModifiers:[ie,xe,te,j,we,ve,ke,G,_e]}),De=Oe({defaultModifiers:[ie,xe,te,j]});const Le="transitionend",je=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),t=n&&"#"!==n?n.trim():null}return t},Pe=e=>{const t=je(e);return t&&document.querySelector(t)?t:null},Me=e=>{const t=je(e);return t?document.querySelector(t):null},Ie=e=>{e.dispatchEvent(new Event(Le))},He=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),Re=e=>He(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,qe=(e,t,n)=>{Object.keys(n).forEach((i=>{const r=n[i],o=t[i],a=o&&He(o)?"element":null==(s=o)?`${s}`:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();var s;if(!new RegExp(r).test(a))throw new TypeError(`${e.toUpperCase()}: Option "${i}" provided type "${a}" but expected type "${r}".`)}))},ze=e=>!(!He(e)||0===e.getClientRects().length)&&"visible"===getComputedStyle(e).getPropertyValue("visibility"),Be=e=>!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled")),We=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?We(e.parentNode):null},Fe=()=>{},$e=e=>{e.offsetHeight},Ye=()=>{const{jQuery:e}=window;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},Ue=[],Ve=()=>"rtl"===document.documentElement.dir,Xe=e=>{var t;t=()=>{const t=Ye();if(t){const n=e.NAME,i=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=()=>(t.fn[n]=i,e.jQueryInterface)}},"loading"===document.readyState?(Ue.length||document.addEventListener("DOMContentLoaded",(()=>{Ue.forEach((e=>e()))})),Ue.push(t)):t()},Ke=e=>{"function"==typeof e&&e()},Qe=(e,t,n=!0)=>{if(!n)return void Ke(e);const i=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:n}=window.getComputedStyle(e);const i=Number.parseFloat(t),r=Number.parseFloat(n);return i||r?(t=t.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(n))):0})(t)+5;let r=!1;const o=({target:n})=>{n===t&&(r=!0,t.removeEventListener(Le,o),Ke(e))};t.addEventListener(Le,o),setTimeout((()=>{r||Ie(t)}),i)},Ge=(e,t,n,i)=>{let r=e.indexOf(t);if(-1===r)return e[!n&&i?e.length-1:0];const o=e.length;return r+=n?1:-1,i&&(r=(r+o)%o),e[Math.max(0,Math.min(r,o-1))]},Je=/[^.]*(?=\..*)\.|.*/,Ze=/\..*/,et=/::\d+$/,tt={};let nt=1;const it={mouseenter:"mouseover",mouseleave:"mouseout"},rt=/^(mouseenter|mouseleave)/i,ot=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function at(e,t){return t&&`${t}::${nt++}`||e.uidEvent||nt++}function st(e){const t=at(e);return e.uidEvent=t,tt[t]=tt[t]||{},tt[t]}function lt(e,t,n=null){const i=Object.keys(e);for(let r=0,o=i.length;r<o;r++){const o=e[i[r]];if(o.originalHandler===t&&o.delegationSelector===n)return o}return null}function ct(e,t,n){const i="string"==typeof t,r=i?n:t;let o=dt(e);return ot.has(o)||(o=e),[i,r,o]}function ut(e,t,n,i,r){if("string"!=typeof t||!e)return;if(n||(n=i,i=null),rt.test(t)){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};i?i=e(i):n=e(n)}const[o,a,s]=ct(t,n,i),l=st(e),c=l[s]||(l[s]={}),u=lt(c,a,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const f=at(a,t.replace(Je,"")),d=o?function(e,t,n){return function i(r){const o=e.querySelectorAll(t);for(let{target:a}=r;a&&a!==this;a=a.parentNode)for(let s=o.length;s--;)if(o[s]===a)return r.delegateTarget=a,i.oneOff&&pt.off(e,r.type,t,n),n.apply(a,[r]);return null}}(e,n,i):function(e,t){return function n(i){return i.delegateTarget=e,n.oneOff&&pt.off(e,i.type,t),t.apply(e,[i])}}(e,n);d.delegationSelector=o?n:null,d.originalHandler=a,d.oneOff=r,d.uidEvent=f,c[f]=d,e.addEventListener(s,d,o)}function ft(e,t,n,i,r){const o=lt(t[n],i,r);o&&(e.removeEventListener(n,o,Boolean(r)),delete t[n][o.uidEvent])}function dt(e){return e=e.replace(Ze,""),it[e]||e}const pt={on(e,t,n,i){ut(e,t,n,i,!1)},one(e,t,n,i){ut(e,t,n,i,!0)},off(e,t,n,i){if("string"!=typeof t||!e)return;const[r,o,a]=ct(t,n,i),s=a!==t,l=st(e),c=t.startsWith(".");if(void 0!==o){if(!l||!l[a])return;return void ft(e,l,a,o,r?n:null)}c&&Object.keys(l).forEach((n=>{!function(e,t,n,i){const r=t[n]||{};Object.keys(r).forEach((o=>{if(o.includes(i)){const i=r[o];ft(e,t,n,i.originalHandler,i.delegationSelector)}}))}(e,l,n,t.slice(1))}));const u=l[a]||{};Object.keys(u).forEach((n=>{const i=n.replace(et,"");if(!s||t.includes(i)){const t=u[n];ft(e,l,a,t.originalHandler,t.delegationSelector)}}))},trigger(e,t,n){if("string"!=typeof t||!e)return null;const i=Ye(),r=dt(t),o=t!==r,a=ot.has(r);let s,l=!0,c=!0,u=!1,f=null;return o&&i&&(s=i.Event(t,n),i(e).trigger(s),l=!s.isPropagationStopped(),c=!s.isImmediatePropagationStopped(),u=s.isDefaultPrevented()),a?(f=document.createEvent("HTMLEvents"),f.initEvent(r,l,!0)):f=new CustomEvent(t,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((e=>{Object.defineProperty(f,e,{get:()=>n[e]})})),u&&f.preventDefault(),c&&e.dispatchEvent(f),f.defaultPrevented&&void 0!==s&&s.preventDefault(),f}},ht=new Map,mt={set(e,t,n){ht.has(e)||ht.set(e,new Map);const i=ht.get(e);i.has(t)||0===i.size?i.set(t,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(e,t)=>ht.has(e)&&ht.get(e).get(t)||null,remove(e,t){if(!ht.has(e))return;const n=ht.get(e);n.delete(t),0===n.size&&ht.delete(e)}};class gt{constructor(e){(e=Re(e))&&(this._element=e,mt.set(this._element,this.constructor.DATA_KEY,this))}dispose(){mt.remove(this._element,this.constructor.DATA_KEY),pt.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((e=>{this[e]=null}))}_queueCallback(e,t,n=!0){Qe(e,t,n)}static getInstance(e){return mt.get(Re(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const vt=(e,t="hide")=>{const n=`click.dismiss${e.EVENT_KEY}`,i=e.NAME;pt.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Be(this))return;const r=Me(this)||this.closest(`.${i}`);e.getOrCreateInstance(r)[t]()}))};class bt extends gt{static get NAME(){return"alert"}close(){if(pt.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),pt.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}vt(bt,"close"),Xe(bt);const yt='[data-bs-toggle="button"]';class _t extends gt{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=_t.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}function wt(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function xt(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}pt.on(document,"click.bs.button.data-api",yt,(e=>{e.preventDefault();const t=e.target.closest(yt);_t.getOrCreateInstance(t).toggle()})),Xe(_t);const kt={setDataAttribute(e,t,n){e.setAttribute(`data-bs-${xt(t)}`,n)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${xt(t)}`)},getDataAttributes(e){if(!e)return{};const t={};return Object.keys(e.dataset).filter((e=>e.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=wt(e.dataset[n])})),t},getDataAttribute:(e,t)=>wt(e.getAttribute(`data-bs-${xt(t)}`)),offset(e){const t=e.getBoundingClientRect();return{top:t.top+window.pageYOffset,left:t.left+window.pageXOffset}},position:e=>({top:e.offsetTop,left:e.offsetLeft})},Et={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const n=[];let i=e.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(t)&&n.push(i),i=i.parentNode;return n},prev(e,t){let n=e.previousElementSibling;for(;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},next(e,t){let n=e.nextElementSibling;for(;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(", ");return this.find(t,e).filter((e=>!Be(e)&&ze(e)))}},At="carousel",Tt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Ct={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Ot="next",St="prev",Nt="left",Dt="right",Lt={ArrowLeft:Dt,ArrowRight:Nt},jt="slid.bs.carousel",Pt="active",Mt=".active.carousel-item";class It extends gt{constructor(e,t){super(e),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._indicatorsElement=Et.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Tt}static get NAME(){return At}next(){this._slide(Ot)}nextWhenVisible(){!document.hidden&&ze(this._element)&&this.next()}prev(){this._slide(St)}pause(e){e||(this._isPaused=!0),Et.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(Ie(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(e){this._activeElement=Et.findOne(Mt,this._element);const t=this._getItemIndex(this._activeElement);if(e>this._items.length-1||e<0)return;if(this._isSliding)return void pt.one(this._element,jt,(()=>this.to(e)));if(t===e)return this.pause(),void this.cycle();const n=e>t?Ot:St;this._slide(n,this._items[e])}_getConfig(e){return e={...Tt,...kt.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(At,e,Ct),e}_handleSwipe(){const e=Math.abs(this.touchDeltaX);if(e<=40)return;const t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?Dt:Nt)}_addEventListeners(){this._config.keyboard&&pt.on(this._element,"keydown.bs.carousel",(e=>this._keydown(e))),"hover"===this._config.pause&&(pt.on(this._element,"mouseenter.bs.carousel",(e=>this.pause(e))),pt.on(this._element,"mouseleave.bs.carousel",(e=>this.cycle(e)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const e=e=>this._pointerEvent&&("pen"===e.pointerType||"touch"===e.pointerType),t=t=>{e(t)?this.touchStartX=t.clientX:this._pointerEvent||(this.touchStartX=t.touches[0].clientX)},n=e=>{this.touchDeltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this.touchStartX},i=t=>{e(t)&&(this.touchDeltaX=t.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((e=>this.cycle(e)),500+this._config.interval))};Et.find(".carousel-item img",this._element).forEach((e=>{pt.on(e,"dragstart.bs.carousel",(e=>e.preventDefault()))})),this._pointerEvent?(pt.on(this._element,"pointerdown.bs.carousel",(e=>t(e))),pt.on(this._element,"pointerup.bs.carousel",(e=>i(e))),this._element.classList.add("pointer-event")):(pt.on(this._element,"touchstart.bs.carousel",(e=>t(e))),pt.on(this._element,"touchmove.bs.carousel",(e=>n(e))),pt.on(this._element,"touchend.bs.carousel",(e=>i(e))))}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=Lt[e.key];t&&(e.preventDefault(),this._slide(t))}_getItemIndex(e){return this._items=e&&e.parentNode?Et.find(".carousel-item",e.parentNode):[],this._items.indexOf(e)}_getItemByOrder(e,t){const n=e===Ot;return Ge(this._items,t,n,this._config.wrap)}_triggerSlideEvent(e,t){const n=this._getItemIndex(e),i=this._getItemIndex(Et.findOne(Mt,this._element));return pt.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:i,to:n})}_setActiveIndicatorElement(e){if(this._indicatorsElement){const t=Et.findOne(".active",this._indicatorsElement);t.classList.remove(Pt),t.removeAttribute("aria-current");const n=Et.find("[data-bs-target]",this._indicatorsElement);for(let t=0;t<n.length;t++)if(Number.parseInt(n[t].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){n[t].classList.add(Pt),n[t].setAttribute("aria-current","true");break}}}_updateInterval(){const e=this._activeElement||Et.findOne(Mt,this._element);if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(e,t){const n=this._directionToOrder(e),i=Et.findOne(Mt,this._element),r=this._getItemIndex(i),o=t||this._getItemByOrder(n,i),a=this._getItemIndex(o),s=Boolean(this._interval),l=n===Ot,c=l?"carousel-item-start":"carousel-item-end",u=l?"carousel-item-next":"carousel-item-prev",f=this._orderToDirection(n);if(o&&o.classList.contains(Pt))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,f).defaultPrevented)return;if(!i||!o)return;this._isSliding=!0,s&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const d=()=>{pt.trigger(this._element,jt,{relatedTarget:o,direction:f,from:r,to:a})};if(this._element.classList.contains("slide")){o.classList.add(u),$e(o),i.classList.add(c),o.classList.add(c);const e=()=>{o.classList.remove(c,u),o.classList.add(Pt),i.classList.remove(Pt,u,c),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(e,i,!0)}else i.classList.remove(Pt),o.classList.add(Pt),this._isSliding=!1,d();s&&this.cycle()}_directionToOrder(e){return[Dt,Nt].includes(e)?Ve()?e===Nt?St:Ot:e===Nt?Ot:St:e}_orderToDirection(e){return[Ot,St].includes(e)?Ve()?e===St?Nt:Dt:e===St?Dt:Nt:e}static carouselInterface(e,t){const n=It.getOrCreateInstance(e,t);let{_config:i}=n;"object"==typeof t&&(i={...i,...t});const r="string"==typeof t?t:i.slide;if("number"==typeof t)n.to(t);else if("string"==typeof r){if(void 0===n[r])throw new TypeError(`No method named "${r}"`);n[r]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(e){return this.each((function(){It.carouselInterface(this,e)}))}static dataApiClickHandler(e){const t=Me(this);if(!t||!t.classList.contains("carousel"))return;const n={...kt.getDataAttributes(t),...kt.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),It.carouselInterface(t,n),i&&It.getInstance(t).to(i),e.preventDefault()}}pt.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",It.dataApiClickHandler),pt.on(window,"load.bs.carousel.data-api",(()=>{const e=Et.find('[data-bs-ride="carousel"]');for(let t=0,n=e.length;t<n;t++)It.carouselInterface(e[t],It.getInstance(e[t]))})),Xe(It);const Ht="collapse",Rt={toggle:!0,parent:null},qt={toggle:"boolean",parent:"(null|element)"},zt="show",Bt="collapse",Wt="collapsing",Ft="collapsed",$t=":scope .collapse .collapse",Yt='[data-bs-toggle="collapse"]';class Ut extends gt{constructor(e,t){super(e),this._isTransitioning=!1,this._config=this._getConfig(t),this._triggerArray=[];const n=Et.find(Yt);for(let e=0,t=n.length;e<t;e++){const t=n[e],i=Pe(t),r=Et.find(i).filter((e=>e===this._element));null!==i&&r.length&&(this._selector=i,this._triggerArray.push(t))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Rt}static get NAME(){return Ht}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e,t=[];if(this._config.parent){const e=Et.find($t,this._config.parent);t=Et.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((t=>!e.includes(t)))}const n=Et.findOne(this._selector);if(t.length){const i=t.find((e=>n!==e));if(e=i?Ut.getInstance(i):null,e&&e._isTransitioning)return}if(pt.trigger(this._element,"show.bs.collapse").defaultPrevented)return;t.forEach((t=>{n!==t&&Ut.getOrCreateInstance(t,{toggle:!1}).hide(),e||mt.set(t,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Bt),this._element.classList.add(Wt),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const r=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Wt),this._element.classList.add(Bt,zt),this._element.style[i]="",pt.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[r]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(pt.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,$e(this._element),this._element.classList.add(Wt),this._element.classList.remove(Bt,zt);const t=this._triggerArray.length;for(let e=0;e<t;e++){const t=this._triggerArray[e],n=Me(t);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([t],!1)}this._isTransitioning=!0,this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(Wt),this._element.classList.add(Bt),pt.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(zt)}_getConfig(e){return(e={...Rt,...kt.getDataAttributes(this._element),...e}).toggle=Boolean(e.toggle),e.parent=Re(e.parent),qe(Ht,e,qt),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=Et.find($t,this._config.parent);Et.find(Yt,this._config.parent).filter((t=>!e.includes(t))).forEach((e=>{const t=Me(e);t&&this._addAriaAndCollapsedClass([e],this._isShown(t))}))}_addAriaAndCollapsedClass(e,t){e.length&&e.forEach((e=>{t?e.classList.remove(Ft):e.classList.add(Ft),e.setAttribute("aria-expanded",t)}))}static jQueryInterface(e){return this.each((function(){const t={};"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1);const n=Ut.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e]()}}))}}pt.on(document,"click.bs.collapse.data-api",Yt,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=Pe(this);Et.find(t).forEach((e=>{Ut.getOrCreateInstance(e,{toggle:!1}).toggle()}))})),Xe(Ut);const Vt="dropdown",Xt="Escape",Kt="Space",Qt="ArrowUp",Gt="ArrowDown",Jt=new RegExp("ArrowUp|ArrowDown|Escape"),Zt="click.bs.dropdown.data-api",en="keydown.bs.dropdown.data-api",tn="show",nn='[data-bs-toggle="dropdown"]',rn=".dropdown-menu",on=Ve()?"top-end":"top-start",an=Ve()?"top-start":"top-end",sn=Ve()?"bottom-end":"bottom-start",ln=Ve()?"bottom-start":"bottom-end",cn=Ve()?"left-start":"right-start",un=Ve()?"right-start":"left-start",fn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},dn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends gt{constructor(e,t){super(e),this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return fn}static get DefaultType(){return dn}static get NAME(){return Vt}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Be(this._element)||this._isShown(this._menu))return;const e={relatedTarget:this._element};if(pt.trigger(this._element,"show.bs.dropdown",e).defaultPrevented)return;const t=pn.getParentFromElement(this._element);this._inNavbar?kt.setDataAttribute(this._menu,"popper","none"):this._createPopper(t),"ontouchstart"in document.documentElement&&!t.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((e=>pt.on(e,"mouseover",Fe))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(tn),this._element.classList.add(tn),pt.trigger(this._element,"shown.bs.dropdown",e)}hide(){if(Be(this._element)||!this._isShown(this._menu))return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){pt.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>pt.off(e,"mouseover",Fe))),this._popper&&this._popper.destroy(),this._menu.classList.remove(tn),this._element.classList.remove(tn),this._element.setAttribute("aria-expanded","false"),kt.removeDataAttribute(this._menu,"popper"),pt.trigger(this._element,"hidden.bs.dropdown",e))}_getConfig(e){if(e={...this.constructor.Default,...kt.getDataAttributes(this._element),...e},qe(Vt,e,this.constructor.DefaultType),"object"==typeof e.reference&&!He(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Vt.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(e){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let t=this._element;"parent"===this._config.reference?t=e:He(this._config.reference)?t=Re(this._config.reference):"object"==typeof this._config.reference&&(t=this._config.reference);const n=this._getPopperConfig(),r=n.modifiers.find((e=>"applyStyles"===e.name&&!1===e.enabled));this._popper=Ne(t,this._menu,n),r&&kt.setDataAttribute(this._menu,"popper","static")}_isShown(e=this._element){return e.classList.contains(tn)}_getMenuElement(){return Et.next(this._element,rn)[0]}_getPlacement(){const e=this._element.parentNode;if(e.classList.contains("dropend"))return cn;if(e.classList.contains("dropstart"))return un;const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?an:on:t?ln:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const n=Et.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(ze);n.length&&Ge(n,t,e===Gt,!n.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=pn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(e&&(2===e.button||"keyup"===e.type&&"Tab"!==e.key))return;const t=Et.find(nn);for(let n=0,i=t.length;n<i;n++){const i=pn.getInstance(t[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const r={relatedTarget:i._element};if(e){const t=e.composedPath(),n=t.includes(i._menu);if(t.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(r.clickEvent=e)}i._completeHide(r)}}static getParentFromElement(e){return Me(e)||e.parentNode}static dataApiKeydownHandler(e){if(/input|textarea/i.test(e.target.tagName)?e.key===Kt||e.key!==Xt&&(e.key!==Gt&&e.key!==Qt||e.target.closest(rn)):!Jt.test(e.key))return;const t=this.classList.contains(tn);if(!t&&e.key===Xt)return;if(e.preventDefault(),e.stopPropagation(),Be(this))return;const n=this.matches(nn)?this:Et.prev(this,nn)[0],i=pn.getOrCreateInstance(n);if(e.key!==Xt)return e.key===Qt||e.key===Gt?(t||i.show(),void i._selectMenuItem(e)):void(t&&e.key!==Kt||pn.clearMenus());i.hide()}}pt.on(document,en,nn,pn.dataApiKeydownHandler),pt.on(document,en,rn,pn.dataApiKeydownHandler),pt.on(document,Zt,pn.clearMenus),pt.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),pt.on(document,Zt,nn,(function(e){e.preventDefault(),pn.getOrCreateInstance(this).toggle()})),Xe(pn);const hn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",mn=".sticky-top";class gn{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(t=>t+e)),this._setElementAttributes(hn,"paddingRight",(t=>t+e)),this._setElementAttributes(mn,"marginRight",(t=>t-e))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,n){const i=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+i)return;this._saveInitialAttribute(e,t);const r=window.getComputedStyle(e)[t];e.style[t]=`${n(Number.parseFloat(r))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(hn,"paddingRight"),this._resetElementAttributes(mn,"marginRight")}_saveInitialAttribute(e,t){const n=e.style[t];n&&kt.setDataAttribute(e,t,n)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const n=kt.getDataAttribute(e,t);void 0===n?e.style.removeProperty(t):(kt.removeDataAttribute(e,t),e.style[t]=n)}))}_applyManipulationCallback(e,t){He(e)?t(e):Et.find(e,this._element).forEach(t)}isOverflowing(){return this.getWidth()>0}}const vn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},bn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",_n="mousedown.bs.backdrop";class wn{constructor(e){this._config=this._getConfig(e),this._isAppended=!1,this._element=null}show(e){this._config.isVisible?(this._append(),this._config.isAnimated&&$e(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Ke(e)}))):Ke(e)}hide(e){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Ke(e)}))):Ke(e)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_getConfig(e){return(e={...vn,..."object"==typeof e?e:{}}).rootElement=Re(e.rootElement),qe("backdrop",e,bn),e}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),pt.on(this._getElement(),_n,(()=>{Ke(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(pt.off(this._element,_n),this._element.remove(),this._isAppended=!1)}_emulateAnimation(e){Qe(e,this._getElement(),this._config.isAnimated)}}const xn={trapElement:null,autofocus:!0},kn={trapElement:"element",autofocus:"boolean"},En=".bs.focustrap",An="backward";class Tn{constructor(e){this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:e,autofocus:t}=this._config;this._isActive||(t&&e.focus(),pt.off(document,En),pt.on(document,"focusin.bs.focustrap",(e=>this._handleFocusin(e))),pt.on(document,"keydown.tab.bs.focustrap",(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,pt.off(document,En))}_handleFocusin(e){const{target:t}=e,{trapElement:n}=this._config;if(t===document||t===n||n.contains(t))return;const i=Et.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===An?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?An:"forward")}_getConfig(e){return e={...xn,..."object"==typeof e?e:{}},qe("focustrap",e,kn),e}}const Cn="modal",On="Escape",Sn={backdrop:!0,keyboard:!0,focus:!0},Nn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Dn="hidden.bs.modal",Ln="show.bs.modal",jn="resize.bs.modal",Pn="click.dismiss.bs.modal",Mn="keydown.dismiss.bs.modal",In="mousedown.dismiss.bs.modal",Hn="modal-open",Rn="show",qn="modal-static";class zn extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._dialog=Et.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new gn}static get Default(){return Sn}static get NAME(){return Cn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||this._isTransitioning||pt.trigger(this._element,Ln,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Hn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),pt.on(this._dialog,In,(()=>{pt.one(this._element,"mouseup.dismiss.bs.modal",(e=>{e.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;if(pt.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const e=this._isAnimated();e&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Rn),pt.off(this._element,Pn),pt.off(this._dialog,In),this._queueCallback((()=>this._hideModal()),this._element,e)}dispose(){[window,this._dialog].forEach((e=>pt.off(e,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new wn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Tn({trapElement:this._element})}_getConfig(e){return e={...Sn,...kt.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(Cn,e,Nn),e}_showElement(e){const t=this._isAnimated(),n=Et.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),t&&$e(this._element),this._element.classList.add(Rn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,pt.trigger(this._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,t)}_setEscapeEvent(){this._isShown?pt.on(this._element,Mn,(e=>{this._config.keyboard&&e.key===On?(e.preventDefault(),this.hide()):this._config.keyboard||e.key!==On||this._triggerBackdropTransition()})):pt.off(this._element,Mn)}_setResizeEvent(){this._isShown?pt.on(window,jn,(()=>this._adjustDialog())):pt.off(window,jn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Hn),this._resetAdjustments(),this._scrollBar.reset(),pt.trigger(this._element,Dn)}))}_showBackdrop(e){pt.on(this._element,Pn,(e=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(e)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(pt.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:e,scrollHeight:t,style:n}=this._element,i=t>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||e.contains(qn)||(i||(n.overflowY="hidden"),e.add(qn),this._queueCallback((()=>{e.remove(qn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),n=t>0;(!n&&e&&!Ve()||n&&!e&&Ve())&&(this._element.style.paddingLeft=`${t}px`),(n&&!e&&!Ve()||!n&&e&&Ve())&&(this._element.style.paddingRight=`${t}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const n=zn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===n[e])throw new TypeError(`No method named "${e}"`);n[e](t)}}))}}pt.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){const t=Me(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),pt.one(t,Ln,(e=>{e.defaultPrevented||pt.one(t,Dn,(()=>{ze(this)&&this.focus()}))}));const n=Et.findOne(".modal.show");n&&zn.getInstance(n).hide(),zn.getOrCreateInstance(t).toggle(this)})),vt(zn),Xe(zn);const Bn="offcanvas",Wn={backdrop:!0,keyboard:!0,scroll:!1},Fn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},$n="show",Yn=".offcanvas.show",Un="hidden.bs.offcanvas";class Vn extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bn}static get Default(){return Wn}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){this._isShown||pt.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new gn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add($n),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),pt.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}hide(){this._isShown&&(pt.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove($n),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new gn).reset(),pt.trigger(this._element,Un)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(e){return e={...Wn,...kt.getDataAttributes(this._element),..."object"==typeof e?e:{}},qe(Bn,e,Fn),e}_initializeBackDrop(){return new wn({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Tn({trapElement:this._element})}_addEventListeners(){pt.on(this._element,"keydown.dismiss.bs.offcanvas",(e=>{this._config.keyboard&&"Escape"===e.key&&this.hide()}))}static jQueryInterface(e){return this.each((function(){const t=Vn.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}pt.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){const t=Me(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this))return;pt.one(t,Un,(()=>{ze(this)&&this.focus()}));const n=Et.findOne(Yn);n&&n!==t&&Vn.getInstance(n).hide(),Vn.getOrCreateInstance(t).toggle(this)})),pt.on(window,"load.bs.offcanvas.data-api",(()=>Et.find(Yn).forEach((e=>Vn.getOrCreateInstance(e).show())))),vt(Vn),Xe(Vn);const Xn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Qn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Gn=(e,t)=>{const n=e.nodeName.toLowerCase();if(t.includes(n))return!Xn.has(n)||Boolean(Kn.test(e.nodeValue)||Qn.test(e.nodeValue));const i=t.filter((e=>e instanceof RegExp));for(let e=0,t=i.length;e<t;e++)if(i[e].test(n))return!0;return!1};function Jn(e,t,n){if(!e.length)return e;if(n&&"function"==typeof n)return n(e);const i=(new window.DOMParser).parseFromString(e,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(let e=0,n=r.length;e<n;e++){const n=r[e],i=n.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){n.remove();continue}const o=[].concat(...n.attributes),a=[].concat(t["*"]||[],t[i]||[]);o.forEach((e=>{Gn(e,a)||n.removeAttribute(e.nodeName)}))}return i.body.innerHTML}const Zn="tooltip",ei=new Set(["sanitize","allowList","sanitizeFn"]),ti={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ni={AUTO:"auto",TOP:"top",RIGHT:Ve()?"left":"right",BOTTOM:"bottom",LEFT:Ve()?"right":"left"},ii={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ri={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ai="show",si="show",li="out",ci=".tooltip-inner",ui=".modal",fi="hide.bs.modal",di="hover",pi="focus";class hi extends gt{constructor(e,t){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(t),this.tip=null,this._setListeners()}static get Default(){return ii}static get NAME(){return Zn}static get Event(){return ri}static get DefaultType(){return ti}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(e){if(this._isEnabled)if(e){const t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains(ai))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),pt.off(this._element.closest(ui),fi,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const e=pt.trigger(this._element,this.constructor.Event.SHOW),t=We(this._element),n=null===t?this._element.ownerDocument.documentElement.contains(this._element):t.contains(this._element);if(e.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(ci).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),r=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME);i.setAttribute("id",r),this._element.setAttribute("aria-describedby",r),this._config.animation&&i.classList.add(oi);const o="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,a=this._getAttachment(o);this._addAttachmentClass(a);const{container:s}=this._config;mt.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(s.append(i),pt.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Ne(this._element,i,this._getPopperConfig(a)),i.classList.add(ai);const l=this._resolvePossibleFunction(this._config.customClass);l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>{pt.on(e,"mouseover",Fe)}));const c=this.tip.classList.contains(oi);this._queueCallback((()=>{const e=this._hoverState;this._hoverState=null,pt.trigger(this._element,this.constructor.Event.SHOWN),e===li&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const e=this.getTipElement();if(pt.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;e.classList.remove(ai),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((e=>pt.off(e,"mouseover",Fe))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const t=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&e.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),pt.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,t),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const e=document.createElement("div");e.innerHTML=this._config.template;const t=e.children[0];return this.setContent(t),t.classList.remove(oi,ai),this.tip=t,this.tip}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),ci)}_sanitizeAndSetContent(e,t,n){const i=Et.findOne(n,e);t||!i?this.setElementContent(i,t):i.remove()}setElementContent(e,t){if(null!==e)return He(t)?(t=Re(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.append(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Jn(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}getTitle(){const e=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(e)}updateAttachment(e){return"right"===e?"end":"left"===e?"start":e}_initializeOnDelegatedTarget(e,t){return t||this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:e=>this._handlePopperPlacementChange(e)}],onFirstUpdate:e=>{e.options.placement!==e.placement&&this._handlePopperPlacementChange(e)}};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_addAttachmentClass(e){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(e)}`)}_getAttachment(e){return ni[e.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((e=>{if("click"===e)pt.on(this._element,this.constructor.Event.CLICK,this._config.selector,(e=>this.toggle(e)));else if("manual"!==e){const t=e===di?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=e===di?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;pt.on(this._element,t,this._config.selector,(e=>this._enter(e))),pt.on(this._element,n,this._config.selector,(e=>this._leave(e)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},pt.on(this._element.closest(ui),fi,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const e=this._element.getAttribute("title"),t=typeof this._element.getAttribute("data-bs-original-title");(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}_enter(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?pi:di]=!0),t.getTipElement().classList.contains(ai)||t._hoverState===si?t._hoverState=si:(clearTimeout(t._timeout),t._hoverState=si,t._config.delay&&t._config.delay.show?t._timeout=setTimeout((()=>{t._hoverState===si&&t.show()}),t._config.delay.show):t.show())}_leave(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?pi:di]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState=li,t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((()=>{t._hoverState===li&&t.hide()}),t._config.delay.hide):t.hide())}_isWithActiveTrigger(){for(const e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}_getConfig(e){const t=kt.getDataAttributes(this._element);return Object.keys(t).forEach((e=>{ei.has(e)&&delete t[e]})),(e={...this.constructor.Default,...t,..."object"==typeof e&&e?e:{}}).container=!1===e.container?document.body:Re(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),qe(Zn,e,this.constructor.DefaultType),e.sanitize&&(e.template=Jn(e.template,e.allowList,e.sanitizeFn)),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}_cleanTipClass(){const e=this.getTipElement(),t=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=e.getAttribute("class").match(t);null!==n&&n.length>0&&n.map((e=>e.trim())).forEach((t=>e.classList.remove(t)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(e){const{state:t}=e;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(e){return this.each((function(){const t=hi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Xe(hi);const mi={...hi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...hi.DefaultType,content:"(string|element|function)"},vi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class bi extends hi{static get Default(){return mi}static get NAME(){return"popover"}static get Event(){return vi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(e){this._sanitizeAndSetContent(e,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(e,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(e){return this.each((function(){const t=bi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}Xe(bi);const yi="scrollspy",_i={offset:10,method:"auto",target:""},wi={offset:"number",method:"string",target:"(string|element)"},xi="active",ki=".nav-link, .list-group-item, .dropdown-item",Ei="position";class Ai extends gt{constructor(e,t){super(e),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(t),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,pt.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return _i}static get NAME(){return yi}refresh(){const e=this._scrollElement===this._scrollElement.window?"offset":Ei,t="auto"===this._config.method?e:this._config.method,n=t===Ei?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Et.find(ki,this._config.target).map((e=>{const i=Pe(e),r=i?Et.findOne(i):null;if(r){const e=r.getBoundingClientRect();if(e.width||e.height)return[kt[t](r).top+n,i]}return null})).filter((e=>e)).sort(((e,t)=>e[0]-t[0])).forEach((e=>{this._offsets.push(e[0]),this._targets.push(e[1])}))}dispose(){pt.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(e){return(e={..._i,...kt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}}).target=Re(e.target)||document.documentElement,qe(yi,e,wi),e}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){const e=this._targets[this._targets.length-1];this._activeTarget!==e&&this._activate(e)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let t=this._offsets.length;t--;)this._activeTarget!==this._targets[t]&&e>=this._offsets[t]&&(void 0===this._offsets[t+1]||e<this._offsets[t+1])&&this._activate(this._targets[t])}}_activate(e){this._activeTarget=e,this._clear();const t=ki.split(",").map((t=>`${t}[data-bs-target="${e}"],${t}[href="${e}"]`)),n=Et.findOne(t.join(","),this._config.target);n.classList.add(xi),n.classList.contains("dropdown-item")?Et.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(xi):Et.parents(n,".nav, .list-group").forEach((e=>{Et.prev(e,".nav-link, .list-group-item").forEach((e=>e.classList.add(xi))),Et.prev(e,".nav-item").forEach((e=>{Et.children(e,".nav-link").forEach((e=>e.classList.add(xi)))}))})),pt.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:e})}_clear(){Et.find(ki,this._config.target).filter((e=>e.classList.contains(xi))).forEach((e=>e.classList.remove(xi)))}static jQueryInterface(e){return this.each((function(){const t=Ai.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(window,"load.bs.scrollspy.data-api",(()=>{Et.find('[data-bs-spy="scroll"]').forEach((e=>new Ai(e)))})),Xe(Ai);const Ti="active",Ci="fade",Oi="show",Si=".active",Ni=":scope > li > .active";class Di extends gt{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ti))return;let e;const t=Me(this._element),n=this._element.closest(".nav, .list-group");if(n){const t="UL"===n.nodeName||"OL"===n.nodeName?Ni:Si;e=Et.find(t,n),e=e[e.length-1]}const i=e?pt.trigger(e,"hide.bs.tab",{relatedTarget:this._element}):null;if(pt.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const r=()=>{pt.trigger(e,"hidden.bs.tab",{relatedTarget:this._element}),pt.trigger(this._element,"shown.bs.tab",{relatedTarget:e})};t?this._activate(t,t.parentNode,r):r()}_activate(e,t,n){const i=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?Et.children(t,Si):Et.find(Ni,t))[0],r=n&&i&&i.classList.contains(Ci),o=()=>this._transitionComplete(e,i,n);i&&r?(i.classList.remove(Oi),this._queueCallback(o,e,!0)):o()}_transitionComplete(e,t,n){if(t){t.classList.remove(Ti);const e=Et.findOne(":scope > .dropdown-menu .active",t.parentNode);e&&e.classList.remove(Ti),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add(Ti),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),$e(e),e.classList.contains(Ci)&&e.classList.add(Oi);let i=e.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const t=e.closest(".dropdown");t&&Et.find(".dropdown-toggle",t).forEach((e=>e.classList.add(Ti))),e.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(e){return this.each((function(){const t=Di.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}pt.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),Be(this)||Di.getOrCreateInstance(this).show()})),Xe(Di);const Li="toast",ji="hide",Pi="show",Mi="showing",Ii={animation:"boolean",autohide:"boolean",delay:"number"},Hi={animation:!0,autohide:!0,delay:5e3};class Ri extends gt{constructor(e,t){super(e),this._config=this._getConfig(t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Ii}static get Default(){return Hi}static get NAME(){return Li}show(){pt.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ji),$e(this._element),this._element.classList.add(Pi),this._element.classList.add(Mi),this._queueCallback((()=>{this._element.classList.remove(Mi),pt.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Pi)&&(pt.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Mi),this._queueCallback((()=>{this._element.classList.add(ji),this._element.classList.remove(Mi),this._element.classList.remove(Pi),pt.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Pi)&&this._element.classList.remove(Pi),super.dispose()}_getConfig(e){return e={...Hi,...kt.getDataAttributes(this._element),..."object"==typeof e&&e?e:{}},qe(Li,e,this.constructor.DefaultType),e}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){pt.on(this._element,"mouseover.bs.toast",(e=>this._onInteraction(e,!0))),pt.on(this._element,"mouseout.bs.toast",(e=>this._onInteraction(e,!1))),pt.on(this._element,"focusin.bs.toast",(e=>this._onInteraction(e,!0))),pt.on(this._element,"focusout.bs.toast",(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Ri.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}vt(Ri),Xe(Ri)},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},c=o.push,u=o.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h=p.toString,m=h.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},b=function(e){return null!=e&&e===e.window},y=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var i,r,o=(n=n||y).createElement("script");if(o.text=e,t)for(i in _)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var k="3.6.0",E=function(e,t){return new E.fn.init(e,t)};function A(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:k,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var e,t,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)i=e[t],"__proto__"!==t&&a!==i&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[t],o=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,a[t]=E.extend(c,o,i)):void 0!==i&&(a[t]=i));return a},E.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=a(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||h.call(n)!==m))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(A(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(A(Object(e))?E.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,o=e.length,a=!n;r<o;r++)!t(e[r],r)!==a&&i.push(e[r]);return i},map:function(e,t,n){var i,r,o=0,a=[];if(A(e))for(i=e.length;o<i;o++)null!=(r=t(e[o],o,n))&&a.push(r);else for(o in e)null!=(r=t(e[o],o,n))&&a.push(r);return l(a)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var T=function(e){var t,n,i,r,o,a,s,l,c,u,f,d,p,h,m,g,v,b,y,_="sizzle"+1*new Date,w=e.document,x=0,k=0,E=le(),A=le(),T=le(),C=le(),O=function(e,t){return e===t&&(f=!0),0},S={}.hasOwnProperty,N=[],D=N.pop,L=N.push,j=N.push,P=N.slice,M=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",q="\\[[\\x20\\t\\r\\n\\f]*("+R+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+H+"*\\]",z=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",B=new RegExp(H+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),Y=new RegExp(H+"|>"),U=new RegExp(z),V=new RegExp("^"+R+"$"),X={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){d()},ae=_e((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(N=P.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(e){j={apply:N.length?function(e,t){L.apply(e,P.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var o,s,c,u,f,h,v,b=t&&t.ownerDocument,w=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return i;if(!r&&(d(t),t=t||p,m)){if(11!==w&&(f=Z.exec(e)))if(o=f[1]){if(9===w){if(!(c=t.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(b&&(c=b.getElementById(o))&&y(t,c)&&c.id===o)return i.push(c),i}else{if(f[2])return j.apply(i,t.getElementsByTagName(e)),i;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(i,t.getElementsByClassName(o)),i}if(n.qsa&&!C[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,b=t,1===w&&(Y.test(e)||$.test(e))){for((b=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((u=t.getAttribute("id"))?u=u.replace(ie,re):t.setAttribute("id",u=_)),s=(h=a(e)).length;s--;)h[s]=(u?"#"+u:":scope")+" "+ye(h[s]);v=h.join(",")}try{return j.apply(i,b.querySelectorAll(v)),i}catch(t){C(e,!0)}finally{u===_&&t.removeAttribute("id")}}}return l(e.replace(W,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ce(e){return e[_]=!0,e}function ue(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function de(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ce((function(t){return t=+t,ce((function(n,i){for(var r,o=e([],n.length,t),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,r,a=e?e.ownerDocument||e:w;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!o(p),w!=p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",oe,!1):r.attachEvent&&r.attachEvent("onunload",oe)),n.scope=ue((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=_,!p.getElementsByName||!p.getElementsByName(_).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(r=t.getElementsByName(e),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=J.test(p.querySelectorAll))&&(ue((function(e){var t;h.appendChild(e).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+I+")"),e.querySelectorAll("[id~="+_+"-]").length||g.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(b=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=b.call(e,"*"),b.call(e,"[s!='']:x"),v.push("!=",z)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=J.test(h.compareDocumentPosition),y=t||J.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},O=t?function(e,t){if(e===t)return f=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==p||e.ownerDocument==w&&y(w,e)?-1:t==p||t.ownerDocument==w&&y(w,t)?1:u?M(u,e)-M(u,t):0:4&i?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,i=0,r=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!r||!o)return e==p?-1:t==p?1:r?-1:o?1:u?M(u,e)-M(u,t):0;if(r===o)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?de(a[i],s[i]):a[i]==w?-1:s[i]==w?1:0},p):p},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!C[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=b.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){C(t,!0)}return se(t,p,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=p&&d(e),y(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var r=i.attrHandle[t.toLowerCase()],o=r&&S.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(ie,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,o=0;if(f=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(O),f){for(;t=e[o++];)t===e[o]&&(r=i.push(o));for(;r--;)e.splice(i[r],1)}return u=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},i=se.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+H+"|$)"))&&E(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,u,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),b=!l&&!s,y=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&b){for(y=(p=(c=(u=(f=(d=g)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===x&&c[1])&&c[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===t){u[e]=[x,p,y];break}}else if(b&&(y=p=(c=(u=(f=(d=t)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===x&&c[1]),!1===y)for(;(d=++p&&d&&d[m]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((u=(f=d[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[x,y]),d!==t)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[_]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,o=r(e,t),a=o.length;a--;)e[i=M(e,o[a])]=!(n[i]=o[a])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ce((function(e){var t=[],n=[],i=s(e.replace(W,"$1"));return i[_]?ce((function(e,t,n,r){for(var o,a=i(e,null,r,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,r,o){return t[0]=e,i(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return se(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||r(t)).indexOf(e)>-1}})),lang:ce((function(e){return V.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var i=n<0?n+t:n>t?t:n;--i>=0;)e.push(i);return e})),gt:ge((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=he(t);function be(){}function ye(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function _e(e,t,n){var i=t.dir,r=t.next,o=r||i,a=n&&"parentNode"===o,s=k++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||a)return e(t,n,r);return!1}:function(t,n,l){var c,u,f,d=[x,s];if(l){for(;t=t[i];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||a)if(u=(f=t[_]||(t[_]={}))[t.uniqueID]||(f[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=u[o])&&c[0]===x&&c[1]===s)return d[2]=c[2];if(u[o]=d,d[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var o,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,i,r)||(a.push(o),c&&t.push(s)));return a}function ke(e,t,n,i,r,o){return i&&!i[_]&&(i=ke(i)),r&&!r[_]&&(r=ke(r,o)),ce((function(o,a,s,l){var c,u,f,d=[],p=[],h=a.length,m=o||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!o&&t?m:xe(m,d,e,s,l),v=n?r||(o?e:h||i)?[]:a:g;if(n&&n(g,v,s,l),i)for(c=xe(v,p),i(c,[],s,l),u=c.length;u--;)(f=c[u])&&(v[p[u]]=!(g[p[u]]=f));if(o){if(r||e){if(r){for(c=[],u=v.length;u--;)(f=v[u])&&c.push(g[u]=f);r(null,v=[],c,l)}for(u=v.length;u--;)(f=v[u])&&(c=r?M(o,f):d[u])>-1&&(o[c]=!(a[c]=f))}}else v=xe(v===a?v.splice(h,v.length):v),r?r(null,a,v,l):j.apply(a,v)}))}function Ee(e){for(var t,n,r,o=e.length,a=i.relative[e[0].type],s=a||i.relative[" "],l=a?1:0,u=_e((function(e){return e===t}),s,!0),f=_e((function(e){return M(t,e)>-1}),s,!0),d=[function(e,n,i){var r=!a&&(i||n!==c)||((t=n).nodeType?u(e,n,i):f(e,n,i));return t=null,r}];l<o;l++)if(n=i.relative[e[l].type])d=[_e(we(d),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[_]){for(r=++l;r<o&&!i.relative[e[r].type];r++);return ke(l>1&&we(d),l>1&&ye(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(W,"$1"),n,l<r&&Ee(e.slice(l,r)),r<o&&Ee(e=e.slice(r)),r<o&&ye(e))}d.push(n)}return we(d)}return be.prototype=i.filters=i.pseudos,i.setFilters=new be,a=se.tokenize=function(e,t){var n,r,o,a,s,l,c,u=A[e+" "];if(u)return t?0:u.slice(0);for(s=e,l=[],c=i.preFilter;s;){for(a in n&&!(r=F.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=$.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length)),i.filter)!(r=X[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):A(e,l).slice(0)},s=se.compile=function(e,t){var n,r=[],o=[],s=T[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Ee(t[n]))[_]?r.push(s):o.push(s);s=T(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,a,s,l,u){var f,h,g,v=0,b="0",y=o&&[],_=[],w=c,k=o||r&&i.find.TAG("*",u),E=x+=null==w?1:Math.random()||.1,A=k.length;for(u&&(c=a==p||a||u);b!==A&&null!=(f=k[b]);b++){if(r&&f){for(h=0,a||f.ownerDocument==p||(d(f),s=!m);g=e[h++];)if(g(f,a||p,s)){l.push(f);break}u&&(x=E)}n&&((f=!g&&f)&&v--,o&&y.push(f))}if(v+=b,n&&b!==v){for(h=0;g=t[h++];)g(y,_,a,s);if(o){if(v>0)for(;b--;)y[b]||_[b]||(_[b]=D.call(l));_=xe(_)}j.apply(l,_),u&&!o&&_.length>0&&v+t.length>1&&se.uniqueSort(l)}return u&&(x=E,c=w),y};return n?ce(o):o}(o,r)),s.selector=e}return s},l=se.select=function(e,t,n,r){var o,l,c,u,f,d="function"==typeof e&&e,p=!r&&a(e=d.selector||e);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=X.needsContext.test(e)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((f=i.find[u])&&(r=f(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(o,1),!(e=r.length&&ye(l)))return j.apply(n,r),n;break}}return(d||s(e,p))(r,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=_.split("").sort(O).join("")===_,n.detectDuplicates=!!f,d(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||fe(I,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),se}(i);E.find=T,E.expr=T.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=T.uniqueSort,E.text=T.getText,E.isXMLDoc=T.isXML,E.contains=T.contains,E.escapeSelector=T.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&E(e).is(n))break;i.push(e)}return i},O=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},S=E.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(e,t,n){return v(t)?E.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?E.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?E.grep(e,(function(e){return u.call(t,e)>-1!==n})):E.filter(t,e,n)}E.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?E.find.matchesSelector(i,e)?[i]:[]:E.find.matches(e,E.grep(t,(function(e){return 1===e.nodeType})))},E.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(E(e).filter((function(){for(t=0;t<i;t++)if(E.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)E.find(e,r[t],n);return i>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(L(this,e||[],!1))},not:function(e){return this.pushStack(L(this,e||[],!0))},is:function(e){return!!L(this,"string"==typeof e&&S.test(e)?E(e):e||[],!1).length}});var j,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:P.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:y,!0)),D.test(i[1])&&E.isPlainObject(t))for(i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=y.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,j=E(y);var M=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function H(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,o=[],a="string"!=typeof e&&E(e);if(!S.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(E(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return H(e,"nextSibling")},prev:function(e){return H(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return O((e.parentNode||{}).firstChild,e)},children:function(e){return O(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(N(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},(function(e,t){E.fn[e]=function(n,i){var r=E.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(I[e]||E.uniqueSort(r),M.test(e)&&r.reverse()),this.pushStack(r)}}));var R=/[^\x20\t\r\n\f]+/g;function q(e){return e}function z(e){throw e}function B(e,t,n,i){var r;try{e&&v(r=e.promise)?r.call(e).done(t).fail(n):e&&v(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(R)||[],(function(e,n){t[n]=!0})),t}(e):E.extend({},e);var t,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||e.once,i=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){E.each(n,(function(n,i){v(i)?e.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==x(i)&&t(i)}))}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,(function(e,t){for(var n;(n=E.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?E.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||t||(o=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return E.Deferred((function(n){E.each(t,(function(t,i){var r=v(e[i[4]])&&e[i[4]];o[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,r){var o=0;function a(e,t,n,r){return function(){var s=this,l=arguments,c=function(){var i,c;if(!(e<o)){if((i=n.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?r?c.call(i,a(o,t,q,r),a(o,t,z,r)):(o++,c.call(i,a(o,t,q,r),a(o,t,z,r),a(o,t,q,t.notifyWith))):(n!==q&&(s=void 0,l=[i]),(r||t.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(i){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(i,u.stackTrace),e+1>=o&&(n!==z&&(s=void 0,l=[i]),t.rejectWith(s,l))}};e?u():(E.Deferred.getStackHook&&(u.stackTrace=E.Deferred.getStackHook()),i.setTimeout(u))}}return E.Deferred((function(i){t[0][3].add(a(0,i,v(r)?r:q,i.notifyWith)),t[1][3].add(a(0,i,v(e)?e:q)),t[2][3].add(a(0,i,v(n)?n:z))})).promise()},promise:function(e){return null!=e?E.extend(e,r):r}},o={};return E.each(t,(function(e,i){var a=i[2],s=i[5];r[i[1]]=a.add,s&&a.add((function(){n=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=a.fireWith})),r.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,i=Array(n),r=s.call(arguments),o=E.Deferred(),a=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(i,r)}};if(t<=1&&(B(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||v(r[n]&&r[n].then)))return o.then();for(;n--;)B(r[n],a(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){i.console&&i.console.warn&&e&&W.test(e.name)&&i.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){i.setTimeout((function(){throw e}))};var F=E.Deferred();function $(){y.removeEventListener("DOMContentLoaded",$),i.removeEventListener("load",$),E.ready()}E.fn.ready=function(e){return F.then(e).catch((function(e){E.readyException(e)})),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||F.resolveWith(y,[E]))}}),E.ready.then=F.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(E.ready):(y.addEventListener("DOMContentLoaded",$),i.addEventListener("load",$));var Y=function(e,t,n,i,r,o,a){var s=0,l=e.length,c=null==n;if("object"===x(n))for(s in r=!0,n)Y(e,t,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,v(i)||(a=!0),c&&(a?(t.call(e,i),t=null):(c=t,t=function(e,t,n){return c.call(E(e),n)})),t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return r?e:c?t.call(e):l?t(e[0],n):o},U=/^-ms-/,V=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function K(e){return e.replace(U,"ms-").replace(V,X)}var Q=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Q(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[K(t)]=n;else for(i in t)r[K(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][K(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(K):(t=K(t))in i?[t]:t.match(R)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||E.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var J=new G,Z=new G,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return Z.hasData(e)||J.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(r=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=K(i.slice(5)),ne(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each((function(){Z.set(this,e)})):Y(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),E.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=J.get(e,t),n&&(!i||Array.isArray(n)?i=J.access(e,t,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),i=n.length,r=n.shift(),o=E._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete o.stop,r.call(e,(function(){E.dequeue(e,t)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:E.Callbacks("once memory").add((function(){J.remove(e,[t+"queue",n])}))})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each((function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){E.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=E.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=y.documentElement,se=function(e){return E.contains(e.ownerDocument,e)},le={composed:!0};ae.getRootNode&&(se=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&se(e)&&"none"===E.css(e,"display")};function ue(e,t,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return E.css(e,t,"")},l=s(),c=n&&n[3]||(E.cssNumber[t]?"":"px"),u=e.nodeType&&(E.cssNumber[t]||"px"!==c&&+l)&&re.exec(E.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)E.style(e,t,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,E.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var fe={};function de(e){var t,n=e.ownerDocument,i=e.nodeName,r=fe[i];return r||(t=n.body.appendChild(n.createElement(i)),r=E.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),fe[i]=r,r)}function pe(e,t){for(var n,i,r=[],o=0,a=e.length;o<a;o++)(i=e[o]).style&&(n=i.style.display,t?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&ce(i)&&(r[o]=de(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(e[o].style.display=r[o]);return e}E.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?E(this).show():E(this).hide()}))}});var he,me,ge=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,be=/^$|^module$|\/(?:java|ecma)script/i;he=y.createDocumentFragment().appendChild(y.createElement("div")),(me=y.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?E.merge([e],n):n}function we(e,t){for(var n=0,i=e.length;n<i;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,g.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var xe=/<|&#?\w+;/;function ke(e,t,n,i,r){for(var o,a,s,l,c,u,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((o=e[p])||0===o)if("object"===x(o))E.merge(d,o.nodeType?[o]:o);else if(xe.test(o)){for(a=a||f.appendChild(t.createElement("div")),s=(ve.exec(o)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,a.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(i&&E.inArray(o,i)>-1)r&&r.push(o);else if(c=se(o),a=_e(f.appendChild(o),"script"),c&&we(a),n)for(u=0;o=a[u++];)be.test(o.type||"")&&n.push(o);return f}var Ee=/^([^.]*)(?:\.(.+)|)/;function Ae(){return!0}function Te(){return!1}function Ce(e,t){return e===function(){try{return y.activeElement}catch(e){}}()==("focus"===t)}function Oe(e,t,n,i,r,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Oe(e,s,n,i,t[s],o);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Te;else if(!r)return e;return 1===o&&(a=r,r=function(e){return E().off(e),a.apply(this,arguments)},r.guid=a.guid||(a.guid=E.guid++)),e.each((function(){E.event.add(this,t,r,i,n)}))}function Se(e,t,n){n?(J.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var i,r,o=J.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),J.set(this,t,o),i=n(this,t),this[t](),o!==(r=J.get(this,t))||i?J.set(this,t,!1):r={},o!==r)return e.stopImmediatePropagation(),e.preventDefault(),r&&r.value}else o.length&&(J.set(this,t,{value:E.event.trigger(E.extend(o[0],E.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===J.get(e,t)&&E.event.add(e,t,Ae)}E.event={global:{},add:function(e,t,n,i,r){var o,a,s,l,c,u,f,d,p,h,m,g=J.get(e);if(Q(e))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(ae,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(R)||[""]).length;c--;)p=m=(s=Ee.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=E.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},u=E.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:h.join(".")},o),(d=l[p])||((d=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,i,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),E.event.global[p]=!0)},remove:function(e,t,n,i,r){var o,a,s,l,c,u,f,d,p,h,m,g=J.hasData(e)&&J.get(e);if(g&&(l=g.events)){for(c=(t=(t||"").match(R)||[""]).length;c--;)if(p=m=(s=Ee.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=E.event.special[p]||{},d=l[p=(i?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)u=d[o],!r&&m!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,f.remove&&f.remove.call(e,u));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||E.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)E.event.remove(e,p+t[c],n,i,!0);E.isEmptyObject(l)&&J.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,o,a,s=new Array(arguments.length),l=E.event.fix(e),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,c),t=0;(r=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,o,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=t[n]).selector+" "]&&(a[r]=i.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ge.test(t.type)&&t.click&&N(t,"input")&&Se(t,"click",Ae),!1},trigger:function(e){var t=this||e;return ge.test(t.type)&&t.click&&N(t,"input")&&Se(t,"click"),!0},_default:function(e){var t=e.target;return ge.test(t.type)&&t.click&&N(t,"input")&&J.get(t,"click")||N(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ae:Te,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Te,isPropagationStopped:Te,isImmediatePropagationStopped:Te,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ae,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ae,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ae,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(e,t){E.event.special[e]={setup:function(){return Se(this,e,Ce),!1},trigger:function(){return Se(this,e),!0},_default:function(){return!0},delegateType:t}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=this,r=e.relatedTarget,o=e.handleObj;return r&&(r===i||E.contains(i,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),E.fn.extend({on:function(e,t,n,i){return Oe(this,e,t,n,i)},one:function(e,t,n,i){return Oe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,E(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Te),this.each((function(){E.event.remove(this,e,n,t)}))}});var Ne=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Me(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var n,i,r,o,a,s;if(1===t.nodeType){if(J.hasData(e)&&(s=J.get(e).events))for(r in J.remove(t,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)E.event.add(t,r,s[r][n]);Z.hasData(e)&&(o=Z.access(e),a=E.extend({},o),Z.set(t,a))}}function He(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ge.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,i){t=l(t);var r,o,a,s,c,u,f=0,d=e.length,p=d-1,h=t[0],m=v(h);if(m||d>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each((function(r){var o=e.eq(r);m&&(t[0]=h.call(this,r,o.html())),Re(o,t,n,i)}));if(d&&(o=(r=ke(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=E.map(_e(r,"script"),Pe)).length;f<d;f++)c=r,f!==p&&(c=E.clone(c,!0,!0),s&&E.merge(a,_e(c,"script"))),n.call(e[f],c,f);if(s)for(u=a[a.length-1].ownerDocument,E.map(a,Me),f=0;f<s;f++)c=a[f],be.test(c.type||"")&&!J.access(c,"globalEval")&&E.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&!c.noModule&&E._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Le,""),c,u))}return e}function qe(e,t,n){for(var i,r=t?E.filter(t,e):e,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(_e(i)),i.parentNode&&(n&&se(i)&&we(_e(i,"script")),i.parentNode.removeChild(i));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,o,a,s=e.cloneNode(!0),l=se(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=_e(s),i=0,r=(o=_e(e)).length;i<r;i++)He(o[i],a[i]);if(t)if(n)for(o=o||_e(e),a=a||_e(s),i=0,r=o.length;i<r;i++)Ie(o[i],a[i]);else Ie(e,s);return(a=_e(s,"script")).length>0&&we(a,!l&&_e(e,"script")),s},cleanData:function(e){for(var t,n,i,r=E.event.special,o=0;void 0!==(n=e[o]);o++)if(Q(n)){if(t=n[J.expando]){if(t.events)for(i in t.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,t.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(e){return qe(this,e,!0)},remove:function(e){return qe(this,e)},text:function(e){return Y(this,(function(e){return void 0===e?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return E.clone(this,e,t)}))},html:function(e){return Y(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ye[(ve.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(_e(this)),n&&n.replaceChild(t,this))}),e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){E.fn[e]=function(e){for(var n,i=[],r=E(e),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),E(r[a])[t](n),c.apply(i,n.get());return this.pushStack(i)}}));var ze=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),Be=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=i),t.getComputedStyle(e)},We=function(e,t,n){var i,r,o={};for(r in t)o[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=o[r];return i},Fe=new RegExp(oe.join("|"),"i");function $e(e,t,n){var i,r,o,a,s=e.style;return(n=n||Be(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||se(e)||(a=E.style(e,t)),!g.pixelBoxStyles()&&ze.test(a)&&Fe.test(t)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Ye(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(c).appendChild(u);var e=i.getComputedStyle(u);n="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),r=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),ae.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,o,a,s,l,c=y.createElement("div"),u=y.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,n,r;return null==s&&(e=y.createElement("table"),t=y.createElement("tr"),n=y.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),r=i.getComputedStyle(t),s=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),s}}))}();var Ue=["Webkit","Moz","ms"],Ve=y.createElement("div").style,Xe={};function Ke(e){return E.cssProps[e]||Xe[e]||(e in Ve?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ue.length;n--;)if((e=Ue[n]+t)in Ve)return e}(e)||e)}var Qe=/^(none|table(?!-c[ea]).+)/,Ge=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function tt(e,t,n,i,r,o){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=E.css(e,n+oe[a],!0,r)),i?("content"===n&&(l-=E.css(e,"padding"+oe[a],!0,r)),"margin"!==n&&(l-=E.css(e,"border"+oe[a]+"Width",!0,r))):(l+=E.css(e,"padding"+oe[a],!0,r),"padding"!==n?l+=E.css(e,"border"+oe[a]+"Width",!0,r):s+=E.css(e,"border"+oe[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function nt(e,t,n){var i=Be(e),r=(!g.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,i),o=r,a=$e(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(ze.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&N(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===E.css(e,"boxSizing",!1,i),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+tt(e,t,n||(r?"border":"content"),o,i,a)+"px"}function it(e,t,n,i,r){return new it.prototype.init(e,t,n,i,r)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=$e(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,o,a,s=K(t),l=Ge.test(t),c=e.style;if(l||(t=Ke(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(e,!1,i))?r:c[t];"string"==(o=typeof n)&&(r=re.exec(n))&&r[1]&&(n=ue(e,t,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(E.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var r,o,a,s=K(t);return Ge.test(t)||(t=Ke(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&"get"in a&&(r=a.get(e,!0,n)),void 0===r&&(r=$e(e,t,i)),"normal"===r&&t in Ze&&(r=Ze[t]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],(function(e,t){E.cssHooks[t]={get:function(e,n,i){if(n)return!Qe.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,i):We(e,Je,(function(){return nt(e,t,i)}))},set:function(e,n,i){var r,o=Be(e),a=!g.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===E.css(e,"boxSizing",!1,o),l=i?tt(e,t,i,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-tt(e,t,"border",!1,o)-.5)),l&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),et(0,n,l)}}})),E.cssHooks.marginLeft=Ye(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-We(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(e,t){E.cssHooks[e+t]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+oe[i]+t]=o[i]||o[i-2]||o[0];return r}},"margin"!==e&&(E.cssHooks[e+t].set=et)})),E.fn.extend({css:function(e,t){return Y(this,(function(e,t,n){var i,r,o={},a=0;if(Array.isArray(t)){for(i=Be(e),r=t.length;a<r;a++)o[t[a]]=E.css(e,t[a],!1,i);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)}),e,t,arguments.length>1)}}),E.Tween=it,it.prototype={constructor:it,init:function(e,t,n,i,r,o){this.elem=e,this.prop=n,this.easing=r||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[Ke(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=it.prototype.init,E.fx.step={};var rt,ot,at=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function lt(){ot&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(lt):i.setTimeout(lt,E.fx.interval),E.fx.tick())}function ct(){return i.setTimeout((function(){rt=void 0})),rt=Date.now()}function ut(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=oe[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ft(e,t,n){for(var i,r=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,t,e))return i}function dt(e,t,n){var i,r,o=0,a=dt.prefilters.length,s=E.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=rt||ct(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(e,[c,i,n]),i<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:rt||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=E.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),u=c.props;for(function(e,t){var n,i,r,o,a;for(n in e)if(r=t[i=K(n)],o=e[n],Array.isArray(o)&&(r=o[1],o=e[n]=o[0]),n!==i&&(e[i]=o,delete e[n]),(a=E.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete e[i],o)n in e||(e[n]=o[n],t[n]=r);else t[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=dt.prefilters[o].call(c,e,u,c.opts))return v(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,ft,c),v(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(R);for(var n,i=0,r=e.length;i<r;i++)n=e[i],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,o,a,s,l,c,u,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&ce(e),g=J.get(e,"fxshow");for(i in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()}))}))),t)if(r=t[i],at.test(r)){if(delete t[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||E.style(e,i)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(p))for(i in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=J.get(e,"display")),"none"===(u=E.css(e,"display"))&&(c?u=c:(pe([e],!0),c=e.style.display||c,u=E.css(e,"display"),pe([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(e,"float")&&(l||(d.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(e,"fxshow",{display:c}),o&&(g.hidden=!m),m&&pe([e],!0),d.done((function(){for(i in m||pe([e]),J.remove(e,"fxshow"),p)E.style(e,i,p[i])}))),l=ft(m?g[i]:0,i,d),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),E.speed=function(e,t,n){var i=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=E.isEmptyObject(e),o=E.speed(t,n,i),a=function(){var t=dt(this,E.extend({},e),o);(r||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",o=E.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&st.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=e&&o[r].queue!==e||(o[r].anim.stop(n),t=!1,o.splice(r,1));!t&&n||E.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=J.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],o=E.timers,a=i?i.length:0;for(n.finish=!0,E.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(e,t){var n=E.fn[t];E.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,i,r)}})),E.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){E.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(rt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),rt=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){ot||(ot=!0,lt())},E.fx.stop=function(){ot=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var r=i.setTimeout(t,e);n.stop=function(){i.clearTimeout(r)}}))},function(){var e=y.createElement("input"),t=y.createElement("select").appendChild(y.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=y.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var pt,ht=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return Y(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){E.removeAttr(this,e)}))}}),E.extend({attr:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(r=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=E.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(R);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||E.find.attr;ht[t]=function(e,t,i){var r,o,a=t.toLowerCase();return i||(o=ht[a],ht[a]=r,r=null!=n(e,t,i)?a:null,ht[a]=o),r}}));var mt=/^(?:input|select|textarea|button)$/i,gt=/^(?:a|area)$/i;function vt(e){return(e.match(R)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function yt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(R)||[]}E.fn.extend({prop:function(e,t){return Y(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[E.propFix[e]||e]}))}}),E.extend({prop:function(e,t,n){var i,r,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,r=E.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||gt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(e){var t,n,i,r,o,a,s,l=0;if(v(e))return this.each((function(t){E(this).addClass(e.call(this,t,bt(this)))}));if((t=yt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(a=0;o=t[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=vt(i))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,i,r,o,a,s,l=0;if(v(e))return this.each((function(t){E(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=yt(e)).length)for(;n=this[l++];)if(r=bt(n),i=1===n.nodeType&&" "+vt(r)+" "){for(a=0;o=t[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=vt(i))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){E(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,r,o,a;if(i)for(r=0,o=E(this),a=yt(e);t=a[r++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+vt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var _t=/\r/g;E.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=v(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,E(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,(function(e){return null==e?"":e+""}))),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(_t,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:vt(E.text(e))}},select:{get:function(e){var t,n,i,r=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,i,r=e.options,o=E.makeArray(t),a=r.length;a--;)((i=r[a]).selected=E.inArray(E.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},g.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in i;var wt=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,n,r){var o,a,s,l,c,u,f,d,h=[n||y],m=p.call(e,"type")?e.type:e,g=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!wt.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(e=e[E.expando]?e:new E.Event(m,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:E.makeArray(t,[e]),f=E.event.special[m]||{},r||!f.trigger||!1!==f.trigger.apply(n,t))){if(!r&&!f.noBubble&&!b(n)){for(l=f.delegateType||m,wt.test(l+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||y)&&h.push(s.defaultView||s.parentWindow||i)}for(o=0;(a=h[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:f.bindType||m,(u=(J.get(a,"events")||Object.create(null))[e.type]&&J.get(a,"handle"))&&u.apply(a,t),(u=c&&a[c])&&u.apply&&Q(a)&&(e.result=u.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,r||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!Q(n)||c&&v(n[m])&&!b(n)&&((s=n[c])&&(n[c]=null),E.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,xt),n[m](),e.isPropagationStopped()&&d.removeEventListener(m,xt),E.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var i=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(i,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each((function(){E.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),g.focusin||E.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t);r||i.addEventListener(e,n,!0),J.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,t)-1;r?J.access(i,t,r):(i.removeEventListener(e,n,!0),J.remove(i,t))}}}));var kt=i.location,Et={guid:Date.now()},At=/\?/;E.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new i.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||E.error("Invalid XML: "+(n?E.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Tt=/\[\]$/,Ct=/\r?\n/g,Ot=/^(?:submit|button|image|reset|file)$/i,St=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,n,i){var r;if(Array.isArray(t))E.each(t,(function(t,r){n||Tt.test(e)?i(e,r):Nt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)}));else if(n||"object"!==x(t))i(e,t);else for(r in t)Nt(e+"["+r+"]",t[r],n,i)}E.param=function(e,t){var n,i=[],r=function(e,t){var n=v(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,(function(){r(this.name,this.value)}));else for(n in e)Nt(n,e[n],t,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&St.test(this.nodeName)&&!Ot.test(e)&&(this.checked||!ge.test(e))})).map((function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(e){return{name:t.name,value:e.replace(Ct,"\r\n")}})):{name:t.name,value:n.replace(Ct,"\r\n")}})).get()}});var Dt=/%20/g,Lt=/#.*$/,jt=/([?&])_=[^&]*/,Pt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,It=/^\/\//,Ht={},Rt={},qt="*/".concat("*"),zt=y.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,o=t.toLowerCase().match(R)||[];if(v(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Wt(e,t,n,i){var r={},o=e===Rt;function a(s){var l;return r[s]=!0,E.each(e[s]||[],(function(e,s){var c=s(t,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),a(c),!1)})),l}return a(t.dataTypes[0])||!r["*"]&&a("*")}function Ft(e,t){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&E.extend(!0,e,i),e}zt.href=kt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ft(Ft(e,E.ajaxSettings),t):Ft(E.ajaxSettings,e)},ajaxPrefilter:Bt(Ht),ajaxTransport:Bt(Rt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r,o,a,s,l,c,u,f,d,p=E.ajaxSetup({},t),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?E(h):E.event,g=E.Deferred(),v=E.Callbacks("once memory"),b=p.statusCode||{},_={},w={},x="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Pt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,_[e]=t),this},overrideMimeType:function(e){return null==c&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)k.always(e[k.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||x;return n&&n.abort(t),A(0,t),this}};if(g.promise(k),p.url=((e||p.url||kt.href)+"").replace(It,kt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=zt.protocol+"//"+zt.host!=l.protocol+"//"+l.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=E.param(p.data,p.traditional)),Wt(Ht,p,t,k),c)return k;for(f in(u=E.event&&p.global)&&0==E.active++&&E.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Mt.test(p.type),r=p.url.replace(Lt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Dt,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(At.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(jt,"$1"),d=(At.test(r)?"&":"?")+"_="+Et.guid+++d),p.url=r+d),p.ifModified&&(E.lastModified[r]&&k.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&k.setRequestHeader("If-None-Match",E.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qt+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,k,p)||c))return k.abort();if(x="abort",v.add(p.complete),k.done(p.success),k.fail(p.error),n=Wt(Rt,p,t,k)){if(k.readyState=1,u&&m.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(s=i.setTimeout((function(){k.abort("timeout")}),p.timeout));try{c=!1,n.send(_,A)}catch(e){if(c)throw e;A(-1,e)}}else A(-1,"No Transport");function A(e,t,a,l){var f,d,y,_,w,x=t;c||(c=!0,s&&i.clearTimeout(s),n=void 0,o=l||"",k.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(_=function(e,t,n){for(var i,r,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,k,a)),!f&&E.inArray("script",p.dataTypes)>-1&&E.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=function(e,t,n,i){var r,o,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(p,_,k,f),f?(p.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=w),(w=k.getResponseHeader("etag"))&&(E.etag[r]=w)),204===e||"HEAD"===p.type?x="nocontent":304===e?x="notmodified":(x=_.state,d=_.data,f=!(y=_.error))):(y=x,!e&&x||(x="error",e<0&&(e=0))),k.status=e,k.statusText=(t||x)+"",f?g.resolveWith(h,[d,x,k]):g.rejectWith(h,[k,x,y]),k.statusCode(b),b=void 0,u&&m.trigger(f?"ajaxSuccess":"ajaxError",[k,p,f?d:y]),v.fireWith(h,[k,x]),u&&(m.trigger("ajaxComplete",[k,p]),--E.active||E.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],(function(e,t){E[t]=function(e,n,i,r){return v(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:r,data:n,success:i},E.isPlainObject(e)&&e))}})),E.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){E(this).wrapInner(e.call(this,t))})):this.each((function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){E(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(e){}};var $t={0:200,1223:204},Yt=E.ajaxSettings.xhr();g.cors=!!Yt&&"withCredentials"in Yt,g.ajax=Yt=!!Yt,E.ajaxTransport((function(e){var t,n;if(g.cors||Yt&&!e.crossDomain)return{send:function(r,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o($t[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&i.setTimeout((function(){t&&n()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),E.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),E.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),y.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Ut,Vt=[],Xt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Vt.pop()||E.expando+"_"+Et.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",(function(e,t,n){var r,o,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+r):!1!==e.jsonp&&(e.url+=(At.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return a||E.error(r+" was not called"),a[0]},e.dataTypes[0]="json",o=i[r],i[r]=function(){a=arguments},n.always((function(){void 0===o?E(i).removeProp(r):i[r]=o,e[r]&&(e.jsonpCallback=t.jsonpCallback,Vt.push(r)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),g.createHTMLDocument=((Ut=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ut.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((i=(t=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,t.head.appendChild(i)):t=y),o=!n&&[],(r=D.exec(e))?[t.createElement(r[1])]:(r=ke([e],t,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(e,t,n){var i,r,o,a=this,s=e.indexOf(" ");return s>-1&&(i=vt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),a.length>0&&E.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(i?E("<div>").append(E.parseHTML(e)).find(i):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},E.expr.pseudos.animated=function(e){return E.grep(E.timers,(function(t){return e===t.elem})).length},E.offset={setOffset:function(e,t,n){var i,r,o,a,s,l,c=E.css(e,"position"),u=E(e),f={};"static"===c&&(e.style.position="relative"),s=u.offset(),o=E.css(e,"top"),l=E.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),v(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+r),"using"in t?t.using.call(e,f):u.css(f)}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){E.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),r.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-E.css(i,"marginTop",!0),left:t.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||ae}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;E.fn[e]=function(i){return Y(this,(function(e,i,r){var o;if(b(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===r)return o?o[t]:e[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):e[i]=r}),e,i,arguments.length)}})),E.each(["top","left"],(function(e,t){E.cssHooks[t]=Ye(g.pixelPosition,(function(e,n){if(n)return n=$e(e,t),ze.test(n)?E(e).position()[t]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){E.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return Y(this,(function(t,n,r){var o;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===r?E.css(t,n,s):E.style(t,n,r,s)}),t,a?r:void 0,a)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){E.fn[t]=function(e){return this.on(t,e)}})),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return i=s.call(arguments,2),r=function(){return e.apply(t||this,i.concat(s.call(arguments)))},r.guid=e.guid=e.guid||E.guid++,r},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=N,E.isFunction=v,E.isWindow=b,E.camelCase=K,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},void 0===(n=function(){return E}.apply(t,[]))||(e.exports=n);var Qt=i.jQuery,Gt=i.$;return E.noConflict=function(e){return i.$===E&&(i.$=Gt),e&&i.jQuery===E&&(i.jQuery=Qt),E},void 0===r&&(i.jQuery=i.$=E),E}))}},t={};function n(i){var r=t[i];if(void 0!==r)return r.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i);const e='<div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"> <div class="modal-dialog gdpr_modal" role="document"> <div class="modal-content"> <div class="modal-header"> <h5> <i class="fa-solid fa-user-lock icon" aria-hidden="true"></i> <span id="textTitleModal"></span>  </h5> <button type="button" class="btn btn-sm close" data-dismiss="modal" aria-label="Chiudi"> <i class="fas fa-times" aria-hidden="true"></i> </button> </div> <div class="modal-body"> <div class="notice text-justify"> <span id="textAbstractModal"></span> </div> <div class="small mt-2 text-muted"> <i class="fas fa-check-double" aria-hidden="true"></i> Data ultimo consenso: <span class="last-consent-date"><em>non disponibile</em></span> <a id="delete_cookie" href="#EliminaUltimoConsenso"><i class="fas fa-trash-alt"></i> <span id="textButtonResetCookie"></span></a> </div> </div> <div class="modal-footer justify-content-between"> <a class="btn btn-secondary btn-sm float-left" id="linkPrivacyPolicy" alt="Privacy Policy" href="./privacy_policy.html" target="_blank"> <i class="fas fa-file-contract" aria-hidden="true"></i> <span id="textButtonOpenPolicy"></span> </a> <a id="accept_policy" class="btn btn-primary btn-sm float-end" data-dismiss="modal"><i class="fas fa-user-check" aria-hidden="true"></i> <span id="textButtonAccept"></span></a> <div class="col-12"> <small class="small text-muted">Generata con <a title="GDPR Commons" href="https://www.gdprcommons.it" target="_blank">GDPR Commons</a></small> </div> </div> </div> </div> </div>',t='<a href="#GDPRCommons-dialog" id="open_cookiemodal" class="fixedicon" aria-label="Open Cookie Notice"> <i class="fa-solid fa-user-lock icon" aria-hidden="true"></i> </a>';$=window.$=window.jQuery=n(755),n(755),n(169),n(649);var r={text:{linkPrivacyPolicy:"http://www.gdprcommons.it",textTitleModal:"Informativa Cookie",textAbstractModal:"Questo sito utilizza esclusivamente cookie e/o altri strumenti di tracciamento di tipo tecnico o analitici al solo scopo di analisi statistica del traffico senza risalire all'identità del singolo utente. In oltre, non raccoglie informazioni personali in modo automatico senza esplicito consenso. In alcuni casi sono utilizzate risorse esterne. Ai fini legislativi, a scopo informativo si chiede la consultazione della Privacy Policy e proseguire cliccando su 'Ho capito'",textButtonAccept:"Ho capito",textButtonOpenPolicy:"Leggi l'informativa",textButtonResetCookie:"elimina"},modal:{showOnPageLoad:"cookie"},fixedicon:{show:!0}};window.onload=function(){!function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i=document.createElement("a");i.setAttribute("href","gdprcommons-link"),i.classList.add("gdprcommons-link");var r=document.createElement("div");r.classList.add("gdprcommons-fixedicon");var o=document.createElement("div");o.classList.add("gdprcommons-notice"),document.body.append(i),document.body.append(r),document.body.append(o);var a="ever",s="cookie",l=20,c="GDPRCommons",u=".gdprcommons-notice",f=".gdprcommons-fixedicon",d={load:(new Date).getTime(),accepted:!1};function p(){var e=g(c);null!=e&&$(u+" .last-consent-date").html(new Date(e.load).toDateString()),$(u+" .modal").modal("show")}function h(e){document.cookie=e+"=; Max-Age=-99999999;"}function m(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l;t=JSON.stringify(t);var i="";if(n){var r=new Date;r.setTime(r.getTime()+24*n*60*60*1e3),i="; expires="+r.toUTCString()}document.cookie=e+"="+(t||"")+i+"; path=/"}function g(e){for(var t=e+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var r=n[i];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t)){var o=r.substring(t.length,r.length);return JSON.parse(o)}}return null}o=$(u).html(e),$(u+" #accept_policy").on("click",(function(){console.log("accepted"),d.accepted=!0,m(c,d),$(u+" .modal").modal("hide")})),$(u+" #delete_cookie").on("click",(function(){h(c),console.log("erased"),$(u+" .last-consent-date").html("non disponibile")})),!0===n.fixedicon.show&&($(f).html(t),$(f+" #open_cookiemodal").on("click",(function(){p(),console.log("..")}))),n.modal.showOnPageLoad==a?p():n.modal.showOnPageLoad==s&&(console.log(g(c)),null==g(c)&&p()),n&&n.text&&(n.text.linkPrivacyPolicy?$("#linkPrivacyPolicy").attr("href",n.text.linkPrivacyPolicy):$("#linkPrivacyPolicy").attr("href","/"),n.text.textTitleModal?$("#textTitleModal").html(n.text.textTitleModal):$("#textTitleModal").html("example title"),n.text.textAbstractModal?$("#textAbstractModal").html(n.text.textAbstractModal):$("#textAbstractModal").html("example abstract"),n.text.textButtonAccept?$("#textButtonAccept").html(n.text.textButtonAccept):$("#textButtonAccept").html("accept example"),n.text.textButtonOpenPolicy?$("#textButtonOpenPolicy").html(n.text.textButtonOpenPolicy):$("#textButtonOpenPolicy").html("example open policy"),n.text.textButtonResetCookie?$("#textButtonResetCookie").html(n.text.textButtonResetCookie):$("#textButtonResetCookie").html("example delete"))}(r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,