/*! For license information please see gdpr-js-plugin.latest.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("GDPRCommons",[],e):"object"==typeof exports?exports.GDPRCommons=e():t.GDPRCommons=e()}(self,(()=>(()=>{var t={649:()=>{!function(){"use strict";function t(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function e(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?t(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):t(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(t,e)||s(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||s(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){if(t){if("string"==typeof t)return l(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}var c=function(){},u={},f={},d=null,p={mark:c,measure:c};try{"undefined"!=typeof window&&(u=window),"undefined"!=typeof document&&(f=document),"undefined"!=typeof MutationObserver&&(d=MutationObserver),"undefined"!=typeof performance&&(p=performance)}catch(t){}var h=(u.navigator||{}).userAgent,m=void 0===h?"":h,g=u,v=f,b=d,y=p,_=!!g.document,w=!!v.documentElement&&!!v.head&&"function"==typeof v.addEventListener&&"function"==typeof v.createElement,x=~m.indexOf("MSIE")||~m.indexOf("Trident/"),k="svg-inline--fa",E="data-fa-i2svg",A="data-fa-pseudo-element",T="data-prefix",C="data-icon",O="fontawesome-i2svg",S=["HTML","HEAD","STYLE","SCRIPT"],N=function(){try{return!0}catch(t){return!1}}(),D={fas:"solid","fa-solid":"solid",far:"regular","fa-regular":"regular",fal:"light","fa-light":"light",fat:"thin","fa-thin":"thin",fad:"duotone","fa-duotone":"duotone",fab:"brands","fa-brands":"brands",fak:"kit","fa-kit":"kit",fa:"solid"},L={solid:"fas",regular:"far",light:"fal",thin:"fat",duotone:"fad",brands:"fab",kit:"fak"},j={fab:"fa-brands",fad:"fa-duotone",fak:"fa-kit",fal:"fa-light",far:"fa-regular",fas:"fa-solid",fat:"fa-thin"},P={"fa-brands":"fab","fa-duotone":"fad","fa-kit":"fak","fa-light":"fal","fa-regular":"far","fa-solid":"fas","fa-thin":"fat"},M=/fa[srltdbk\-\ ]/,I="fa-layers-text",H=/Font ?Awesome ?([56 ]*)(Solid|Regular|Light|Thin|Duotone|Brands|Free|Pro|Kit)?.*/i,R={900:"fas",400:"far",normal:"far",300:"fal",100:"fat"},q=[1,2,3,4,5,6,7,8,9,10],z=q.concat([11,12,13,14,15,16,17,18,19,20]),B=["class","data-prefix","data-icon","data-fa-transform","data-fa-mask"],W="duotone-group",F="primary",$="secondary",Y=[].concat(a(Object.keys(L)),["2xs","xs","sm","lg","xl","2xl","beat","border","fade","beat-fade","bounce","flip-both","flip-horizontal","flip-vertical","flip","fw","inverse","layers-counter","layers-text","layers","li","pull-left","pull-right","pulse","rotate-180","rotate-270","rotate-90","rotate-by","shake","spin-pulse","spin-reverse","spin","stack-1x","stack-2x","stack","ul",W,"swap-opacity",F,$]).concat(q.map((function(t){return"".concat(t,"x")}))).concat(z.map((function(t){return"w-".concat(t)}))),U=g.FontAwesomeConfig||{};v&&"function"==typeof v.querySelector&&[["data-family-prefix","familyPrefix"],["data-style-default","styleDefault"],["data-replacement-class","replacementClass"],["data-auto-replace-svg","autoReplaceSvg"],["data-auto-add-css","autoAddCss"],["data-auto-a11y","autoA11y"],["data-search-pseudo-elements","searchPseudoElements"],["data-observe-mutations","observeMutations"],["data-mutate-approach","mutateApproach"],["data-keep-original-source","keepOriginalSource"],["data-measure-performance","measurePerformance"],["data-show-missing-icons","showMissingIcons"]].forEach((function(t){var e=o(t,2),n=e[0],i=e[1],r=function(t){return""===t||"false"!==t&&("true"===t||t)}(function(t){var e=v.querySelector("script["+t+"]");if(e)return e.getAttribute(t)}(n));null!=r&&(U[i]=r)}));var V=e(e({},{familyPrefix:"fa",styleDefault:"solid",replacementClass:k,autoReplaceSvg:!0,autoAddCss:!0,autoA11y:!0,searchPseudoElements:!1,observeMutations:!0,mutateApproach:"async",keepOriginalSource:!0,measurePerformance:!1,showMissingIcons:!0}),U);V.autoReplaceSvg||(V.observeMutations=!1);var X={};Object.keys(V).forEach((function(t){Object.defineProperty(X,t,{enumerable:!0,set:function(e){V[t]=e,K.forEach((function(t){return t(X)}))},get:function(){return V[t]}})})),g.FontAwesomeConfig=X;var K=[],Q=16,G={size:16,x:0,y:0,rotate:0,flipX:!1,flipY:!1};function J(){for(var t=12,e="";t-- >0;)e+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[62*Math.random()|0];return e}function Z(t){for(var e=[],n=(t||[]).length>>>0;n--;)e[n]=t[n];return e}function tt(t){return t.classList?Z(t.classList):(t.getAttribute("class")||"").split(" ").filter((function(t){return t}))}function et(t){return"".concat(t).replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function nt(t){return Object.keys(t||{}).reduce((function(e,n){return e+"".concat(n,": ").concat(t[n].trim(),";")}),"")}function it(t){return t.size!==G.size||t.x!==G.x||t.y!==G.y||t.rotate!==G.rotate||t.flipX||t.flipY}function rt(){var t="fa",e=k,n=X.familyPrefix,i=X.replacementClass,r=':host,:root{--fa-font-solid:normal 900 1em/1 "Font Awesome 6 Solid";--fa-font-regular:normal 400 1em/1 "Font Awesome 6 Regular";--fa-font-light:normal 300 1em/1 "Font Awesome 6 Light";--fa-font-thin:normal 100 1em/1 "Font Awesome 6 Thin";--fa-font-duotone:normal 900 1em/1 "Font Awesome 6 Duotone";--fa-font-brands:normal 400 1em/1 "Font Awesome 6 Brands"}svg:not(:host).svg-inline--fa,svg:not(:root).svg-inline--fa{overflow:visible;box-sizing:content-box}.svg-inline--fa{display:var(--fa-display,inline-block);height:1em;overflow:visible;vertical-align:-.125em}.svg-inline--fa.fa-2xs{vertical-align:.1em}.svg-inline--fa.fa-xs{vertical-align:0}.svg-inline--fa.fa-sm{vertical-align:-.0714285705em}.svg-inline--fa.fa-lg{vertical-align:-.2em}.svg-inline--fa.fa-xl{vertical-align:-.25em}.svg-inline--fa.fa-2xl{vertical-align:-.3125em}.svg-inline--fa.fa-pull-left{margin-right:var(--fa-pull-margin,.3em);width:auto}.svg-inline--fa.fa-pull-right{margin-left:var(--fa-pull-margin,.3em);width:auto}.svg-inline--fa.fa-li{width:var(--fa-li-width,2em);top:.25em}.svg-inline--fa.fa-fw{width:var(--fa-fw-width,1.25em)}.fa-layers svg.svg-inline--fa{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0}.fa-layers-counter,.fa-layers-text{display:inline-block;position:absolute;text-align:center}.fa-layers{display:inline-block;height:1em;position:relative;text-align:center;vertical-align:-.125em;width:1em}.fa-layers svg.svg-inline--fa{-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-text{left:50%;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);-webkit-transform-origin:center center;transform-origin:center center}.fa-layers-counter{background-color:var(--fa-counter-background-color,#ff253a);border-radius:var(--fa-counter-border-radius,1em);box-sizing:border-box;color:var(--fa-inverse,#fff);line-height:var(--fa-counter-line-height,1);max-width:var(--fa-counter-max-width,5em);min-width:var(--fa-counter-min-width,1.5em);overflow:hidden;padding:var(--fa-counter-padding,.25em .5em);right:var(--fa-right,0);text-overflow:ellipsis;top:var(--fa-top,0);-webkit-transform:scale(var(--fa-counter-scale,.25));transform:scale(var(--fa-counter-scale,.25));-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-bottom-right{bottom:var(--fa-bottom,0);right:var(--fa-right,0);top:auto;-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:bottom right;transform-origin:bottom right}.fa-layers-bottom-left{bottom:var(--fa-bottom,0);left:var(--fa-left,0);right:auto;top:auto;-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:bottom left;transform-origin:bottom left}.fa-layers-top-right{top:var(--fa-top,0);right:var(--fa-right,0);-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:top right;transform-origin:top right}.fa-layers-top-left{left:var(--fa-left,0);right:auto;top:var(--fa-top,0);-webkit-transform:scale(var(--fa-layers-scale,.25));transform:scale(var(--fa-layers-scale,.25));-webkit-transform-origin:top left;transform-origin:top left}.fa-1x{font-size:1em}.fa-2x{font-size:2em}.fa-3x{font-size:3em}.fa-4x{font-size:4em}.fa-5x{font-size:5em}.fa-6x{font-size:6em}.fa-7x{font-size:7em}.fa-8x{font-size:8em}.fa-9x{font-size:9em}.fa-10x{font-size:10em}.fa-2xs{font-size:.625em;line-height:.1em;vertical-align:.225em}.fa-xs{font-size:.75em;line-height:.0833333337em;vertical-align:.125em}.fa-sm{font-size:.875em;line-height:.0714285718em;vertical-align:.0535714295em}.fa-lg{font-size:1.25em;line-height:.05em;vertical-align:-.075em}.fa-xl{font-size:1.5em;line-height:.0416666682em;vertical-align:-.125em}.fa-2xl{font-size:2em;line-height:.03125em;vertical-align:-.1875em}.fa-fw{text-align:center;width:1.25em}.fa-ul{list-style-type:none;margin-left:var(--fa-li-margin,2.5em);padding-left:0}.fa-ul>li{position:relative}.fa-li{left:calc(var(--fa-li-width,2em) * -1);position:absolute;text-align:center;width:var(--fa-li-width,2em);line-height:inherit}.fa-border{border-color:var(--fa-border-color,#eee);border-radius:var(--fa-border-radius,.1em);border-style:var(--fa-border-style,solid);border-width:var(--fa-border-width,.08em);padding:var(--fa-border-padding,.2em .25em .15em)}.fa-pull-left{float:left;margin-right:var(--fa-pull-margin,.3em)}.fa-pull-right{float:right;margin-left:var(--fa-pull-margin,.3em)}.fa-beat{-webkit-animation-name:fa-beat;animation-name:fa-beat;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-bounce{-webkit-animation-name:fa-bounce;animation-name:fa-bounce;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.28,.84,.42,1))}.fa-fade{-webkit-animation-name:fa-fade;animation-name:fa-fade;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-beat-fade{-webkit-animation-name:fa-beat-fade;animation-name:fa-beat-fade;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1));animation-timing-function:var(--fa-animation-timing,cubic-bezier(.4,0,.6,1))}.fa-flip{-webkit-animation-name:fa-flip;animation-name:fa-flip;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,ease-in-out);animation-timing-function:var(--fa-animation-timing,ease-in-out)}.fa-shake{-webkit-animation-name:fa-shake;animation-name:fa-shake;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-delay:var(--fa-animation-delay,0);animation-delay:var(--fa-animation-delay,0);-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,2s);animation-duration:var(--fa-animation-duration,2s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,linear);animation-timing-function:var(--fa-animation-timing,linear)}.fa-spin-reverse{--fa-animation-direction:reverse}.fa-pulse,.fa-spin-pulse{-webkit-animation-name:fa-spin;animation-name:fa-spin;-webkit-animation-direction:var(--fa-animation-direction,normal);animation-direction:var(--fa-animation-direction,normal);-webkit-animation-duration:var(--fa-animation-duration,1s);animation-duration:var(--fa-animation-duration,1s);-webkit-animation-iteration-count:var(--fa-animation-iteration-count,infinite);animation-iteration-count:var(--fa-animation-iteration-count,infinite);-webkit-animation-timing-function:var(--fa-animation-timing,steps(8));animation-timing-function:var(--fa-animation-timing,steps(8))}@media (prefers-reduced-motion:reduce){.fa-beat,.fa-beat-fade,.fa-bounce,.fa-fade,.fa-flip,.fa-pulse,.fa-shake,.fa-spin,.fa-spin-pulse{-webkit-animation-delay:-1ms;animation-delay:-1ms;-webkit-animation-duration:1ms;animation-duration:1ms;-webkit-animation-iteration-count:1;animation-iteration-count:1;transition-delay:0s;transition-duration:0s}}@-webkit-keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@keyframes fa-beat{0%,90%{-webkit-transform:scale(1);transform:scale(1)}45%{-webkit-transform:scale(var(--fa-beat-scale,1.25));transform:scale(var(--fa-beat-scale,1.25))}}@-webkit-keyframes fa-bounce{0%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}100%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}}@keyframes fa-bounce{0%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}10%{-webkit-transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0);transform:scale(var(--fa-bounce-start-scale-x,1.1),var(--fa-bounce-start-scale-y,.9)) translateY(0)}30%{-webkit-transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em));transform:scale(var(--fa-bounce-jump-scale-x,.9),var(--fa-bounce-jump-scale-y,1.1)) translateY(var(--fa-bounce-height,-.5em))}50%{-webkit-transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0);transform:scale(var(--fa-bounce-land-scale-x,1.05),var(--fa-bounce-land-scale-y,.95)) translateY(0)}57%{-webkit-transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em));transform:scale(1,1) translateY(var(--fa-bounce-rebound,-.125em))}64%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}100%{-webkit-transform:scale(1,1) translateY(0);transform:scale(1,1) translateY(0)}}@-webkit-keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@keyframes fa-fade{50%{opacity:var(--fa-fade-opacity,.4)}}@-webkit-keyframes fa-beat-fade{0%,100%{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@keyframes fa-beat-fade{0%,100%{opacity:var(--fa-beat-fade-opacity,.4);-webkit-transform:scale(1);transform:scale(1)}50%{opacity:1;-webkit-transform:scale(var(--fa-beat-fade-scale,1.125));transform:scale(var(--fa-beat-fade-scale,1.125))}}@-webkit-keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@keyframes fa-flip{50%{-webkit-transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg));transform:rotate3d(var(--fa-flip-x,0),var(--fa-flip-y,1),var(--fa-flip-z,0),var(--fa-flip-angle,-180deg))}}@-webkit-keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}100%,40%{-webkit-transform:rotate(0);transform:rotate(0)}}@keyframes fa-shake{0%{-webkit-transform:rotate(-15deg);transform:rotate(-15deg)}4%{-webkit-transform:rotate(15deg);transform:rotate(15deg)}24%,8%{-webkit-transform:rotate(-18deg);transform:rotate(-18deg)}12%,28%{-webkit-transform:rotate(18deg);transform:rotate(18deg)}16%{-webkit-transform:rotate(-22deg);transform:rotate(-22deg)}20%{-webkit-transform:rotate(22deg);transform:rotate(22deg)}32%{-webkit-transform:rotate(-12deg);transform:rotate(-12deg)}36%{-webkit-transform:rotate(12deg);transform:rotate(12deg)}100%,40%{-webkit-transform:rotate(0);transform:rotate(0)}}@-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes fa-spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.fa-rotate-90{-webkit-transform:rotate(90deg);transform:rotate(90deg)}.fa-rotate-180{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.fa-rotate-270{-webkit-transform:rotate(270deg);transform:rotate(270deg)}.fa-flip-horizontal{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.fa-flip-vertical{-webkit-transform:scale(1,-1);transform:scale(1,-1)}.fa-flip-both,.fa-flip-horizontal.fa-flip-vertical{-webkit-transform:scale(-1,-1);transform:scale(-1,-1)}.fa-rotate-by{-webkit-transform:rotate(var(--fa-rotate-angle,none));transform:rotate(var(--fa-rotate-angle,none))}.fa-stack{display:inline-block;vertical-align:middle;height:2em;position:relative;width:2.5em}.fa-stack-1x,.fa-stack-2x{bottom:0;left:0;margin:auto;position:absolute;right:0;top:0;z-index:var(--fa-stack-z-index,auto)}.svg-inline--fa.fa-stack-1x{height:1em;width:1.25em}.svg-inline--fa.fa-stack-2x{height:2em;width:2.5em}.fa-inverse{color:var(--fa-inverse,#fff)}.fa-sr-only,.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.fa-sr-only-focusable:not(:focus),.sr-only-focusable:not(:focus){position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}.svg-inline--fa .fa-primary{fill:var(--fa-primary-color,currentColor);opacity:var(--fa-primary-opacity,1)}.svg-inline--fa .fa-secondary{fill:var(--fa-secondary-color,currentColor);opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-primary{opacity:var(--fa-secondary-opacity,.4)}.svg-inline--fa.fa-swap-opacity .fa-secondary{opacity:var(--fa-primary-opacity,1)}.svg-inline--fa mask .fa-primary,.svg-inline--fa mask .fa-secondary{fill:#000}.fa-duotone.fa-inverse,.fad.fa-inverse{color:var(--fa-inverse,#fff)}';if(n!==t||i!==e){var o=new RegExp("\\.".concat(t,"\\-"),"g"),a=new RegExp("\\--".concat(t,"\\-"),"g"),s=new RegExp("\\.".concat(e),"g");r=r.replace(o,".".concat(n,"-")).replace(a,"--".concat(n,"-")).replace(s,".".concat(i))}return r}var ot=!1;function at(){X.autoAddCss&&!ot&&(function(t){if(t&&w){var e=v.createElement("style");e.setAttribute("type","text/css"),e.innerHTML=t;for(var n=v.head.childNodes,i=null,r=n.length-1;r>-1;r--){var o=n[r],a=(o.tagName||"").toUpperCase();["STYLE","LINK"].indexOf(a)>-1&&(i=o)}v.head.insertBefore(e,i)}}(rt()),ot=!0)}var st={mixout:function(){return{dom:{css:rt,insertCss:at}}},hooks:function(){return{beforeDOMElementCreation:function(){at()},beforeI2svg:function(){at()}}}},lt=g||{};lt.___FONT_AWESOME___||(lt.___FONT_AWESOME___={}),lt.___FONT_AWESOME___.styles||(lt.___FONT_AWESOME___.styles={}),lt.___FONT_AWESOME___.hooks||(lt.___FONT_AWESOME___.hooks={}),lt.___FONT_AWESOME___.shims||(lt.___FONT_AWESOME___.shims=[]);var ct=lt.___FONT_AWESOME___,ut=[],ft=!1;function dt(t){w&&(ft?setTimeout(t,0):ut.push(t))}function pt(t){var e=t.tag,n=t.attributes,i=void 0===n?{}:n,r=t.children,o=void 0===r?[]:r;return"string"==typeof t?et(t):"<".concat(e," ").concat(function(t){return Object.keys(t||{}).reduce((function(e,n){return e+"".concat(n,'="').concat(et(t[n]),'" ')}),"").trim()}(i),">").concat(o.map(pt).join(""),"</").concat(e,">")}function ht(t,e,n){if(t&&t[e]&&t[e][n])return{prefix:e,iconName:n,icon:t[e][n]}}w&&((ft=(v.documentElement.doScroll?/^loaded|^c/:/^loaded|^i|^c/).test(v.readyState))||v.addEventListener("DOMContentLoaded",(function t(){v.removeEventListener("DOMContentLoaded",t),ft=1,ut.map((function(t){return t()}))})));var mt=function(t,e,n,i){var r,o,a,s=Object.keys(t),l=s.length,c=void 0!==i?function(t,e){return function(n,i,r,o){return t.call(e,n,i,r,o)}}(e,i):e;for(void 0===n?(r=1,a=t[s[0]]):(r=0,a=n);r<l;r++)a=c(a,t[o=s[r]],o,t);return a};function gt(t){var e=function(t){for(var e=[],n=0,i=t.length;n<i;){var r=t.charCodeAt(n++);if(r>=55296&&r<=56319&&n<i){var o=t.charCodeAt(n++);56320==(64512&o)?e.push(((1023&r)<<10)+(1023&o)+65536):(e.push(r),n--)}else e.push(r)}return e}(t);return 1===e.length?e[0].toString(16):null}function vt(t){return Object.keys(t).reduce((function(e,n){var i=t[n];return i.icon?e[i.iconName]=i.icon:e[n]=i,e}),{})}function bt(t,n){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=i.skipHooks,o=void 0!==r&&r,a=vt(n);"function"!=typeof ct.hooks.addPack||o?ct.styles[t]=e(e({},ct.styles[t]||{}),a):ct.hooks.addPack(t,vt(n)),"fas"===t&&bt("fa",n)}var yt=ct.styles,_t=ct.shims,wt=Object.values(j),xt=null,kt={},Et={},At={},Tt={},Ct={},Ot=Object.keys(D);function St(t,e){var n,i=e.split("-"),r=i[0],o=i.slice(1).join("-");return r!==t||""===o||(n=o,~Y.indexOf(n))?null:o}var Nt,Dt=function(){var t=function(t){return mt(yt,(function(e,n,i){return e[i]=mt(n,t,{}),e}),{})};kt=t((function(t,e,n){return e[3]&&(t[e[3]]=n),e[2]&&e[2].filter((function(t){return"number"==typeof t})).forEach((function(e){t[e.toString(16)]=n})),t})),Et=t((function(t,e,n){return t[n]=n,e[2]&&e[2].filter((function(t){return"string"==typeof t})).forEach((function(e){t[e]=n})),t})),Ct=t((function(t,e,n){var i=e[2];return t[n]=n,i.forEach((function(e){t[e]=n})),t}));var e="far"in yt||X.autoFetchSvg,n=mt(_t,(function(t,n){var i=n[0],r=n[1],o=n[2];return"far"!==r||e||(r="fas"),"string"==typeof i&&(t.names[i]={prefix:r,iconName:o}),"number"==typeof i&&(t.unicodes[i.toString(16)]={prefix:r,iconName:o}),t}),{names:{},unicodes:{}});At=n.names,Tt=n.unicodes,xt=It(X.styleDefault)};function Lt(t,e){return(kt[t]||{})[e]}function jt(t,e){return(Ct[t]||{})[e]}function Pt(t){return At[t]||{prefix:null,iconName:null}}function Mt(){return xt}function It(t){var e=L[t]||L[D[t]],n=t in ct.styles?t:null;return e||n||null}function Ht(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.skipLookups,i=void 0!==n&&n,r=null,o=t.reduce((function(t,e){var n=St(X.familyPrefix,e);if(yt[e]?(e=wt.includes(e)?P[e]:e,r=e,t.prefix=e):Ot.indexOf(e)>-1?(r=e,t.prefix=It(e)):n?t.iconName=n:e!==X.replacementClass&&t.rest.push(e),!i&&t.prefix&&t.iconName){var o="fa"===r?Pt(t.iconName):{},a=jt(t.prefix,t.iconName);o.prefix&&(r=null),t.iconName=o.iconName||a||t.iconName,t.prefix=o.prefix||t.prefix,"far"!==t.prefix||yt.far||!yt.fas||X.autoFetchSvg||(t.prefix="fas")}return t}),{prefix:null,iconName:null,rest:[]});return"fa"!==o.prefix&&"fa"!==r||(o.prefix=Mt()||"fas"),o}Nt=function(t){xt=It(t.styleDefault)},K.push(Nt),Dt();var Rt=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.definitions={}}var n,r;return n=t,r=[{key:"add",value:function(){for(var t=this,n=arguments.length,i=new Array(n),r=0;r<n;r++)i[r]=arguments[r];var o=i.reduce(this._pullDefinitions,{});Object.keys(o).forEach((function(n){t.definitions[n]=e(e({},t.definitions[n]||{}),o[n]),bt(n,o[n]);var i=j[n];i&&bt(i,o[n]),Dt()}))}},{key:"reset",value:function(){this.definitions={}}},{key:"_pullDefinitions",value:function(t,e){var n=e.prefix&&e.iconName&&e.icon?{0:e}:e;return Object.keys(n).map((function(e){var i=n[e],r=i.prefix,o=i.iconName,a=i.icon,s=a[2];t[r]||(t[r]={}),s.length>0&&s.forEach((function(e){"string"==typeof e&&(t[r][e]=a)})),t[r][o]=a})),t}}],r&&i(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}(),qt=[],zt={},Bt={},Wt=Object.keys(Bt);function Ft(t,e){for(var n=arguments.length,i=new Array(n>2?n-2:0),r=2;r<n;r++)i[r-2]=arguments[r];var o=zt[t]||[];return o.forEach((function(t){e=t.apply(null,[e].concat(i))})),e}function $t(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];var r=zt[t]||[];r.forEach((function(t){t.apply(null,n)}))}function Yt(){var t=arguments[0],e=Array.prototype.slice.call(arguments,1);return Bt[t]?Bt[t].apply(null,e):void 0}function Ut(t){"fa"===t.prefix&&(t.prefix="fas");var e=t.iconName,n=t.prefix||Mt();if(e)return e=jt(n,e)||e,ht(Vt.definitions,n,e)||ht(ct.styles,n,e)}var Vt=new Rt,Xt={i2svg:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return w?($t("beforeI2svg",t),Yt("pseudoElements2svg",t),Yt("i2svg",t)):Promise.reject("Operation requires a DOM of some kind.")},watch:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.autoReplaceSvgRoot;!1===X.autoReplaceSvg&&(X.autoReplaceSvg=!0),X.observeMutations=!0,dt((function(){Qt({autoReplaceSvgRoot:e}),$t("watch",t)}))}},Kt={noAuto:function(){X.autoReplaceSvg=!1,X.observeMutations=!1,$t("noAuto")},config:X,dom:Xt,parse:{icon:function(t){if(null===t)return null;if("object"===n(t)&&t.prefix&&t.iconName)return{prefix:t.prefix,iconName:jt(t.prefix,t.iconName)||t.iconName};if(Array.isArray(t)&&2===t.length){var e=0===t[1].indexOf("fa-")?t[1].slice(3):t[1],i=It(t[0]);return{prefix:i,iconName:jt(i,e)||e}}if("string"==typeof t&&(t.indexOf("".concat(X.familyPrefix,"-"))>-1||t.match(M))){var r=Ht(t.split(" "),{skipLookups:!0});return{prefix:r.prefix||Mt(),iconName:jt(r.prefix,r.iconName)||r.iconName}}if("string"==typeof t){var o=Mt();return{prefix:o,iconName:jt(o,t)||t}}}},library:Vt,findIconDefinition:Ut,toHtml:pt},Qt=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.autoReplaceSvgRoot,n=void 0===e?v:e;(Object.keys(ct.styles).length>0||X.autoFetchSvg)&&w&&X.autoReplaceSvg&&Kt.dom.i2svg({node:n})};function Gt(t,e){return Object.defineProperty(t,"abstract",{get:e}),Object.defineProperty(t,"html",{get:function(){return t.abstract.map((function(t){return pt(t)}))}}),Object.defineProperty(t,"node",{get:function(){if(w){var e=v.createElement("div");return e.innerHTML=t.html,e.children}}}),t}function Jt(t){var n=t.icons,i=n.main,r=n.mask,o=t.prefix,a=t.iconName,s=t.transform,l=t.symbol,c=t.title,u=t.maskId,f=t.titleId,d=t.extra,p=t.watchable,h=void 0!==p&&p,m=r.found?r:i,g=m.width,v=m.height,b="fak"===o,y=[X.replacementClass,a?"".concat(X.familyPrefix,"-").concat(a):""].filter((function(t){return-1===d.classes.indexOf(t)})).filter((function(t){return""!==t||!!t})).concat(d.classes).join(" "),_={children:[],attributes:e(e({},d.attributes),{},{"data-prefix":o,"data-icon":a,class:y,role:d.attributes.role||"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 ".concat(g," ").concat(v)})},w=b&&!~d.classes.indexOf("fa-fw")?{width:"".concat(g/v*16*.0625,"em")}:{};h&&(_.attributes[E]=""),c&&(_.children.push({tag:"title",attributes:{id:_.attributes["aria-labelledby"]||"title-".concat(f||J())},children:[c]}),delete _.attributes.title);var x=e(e({},_),{},{prefix:o,iconName:a,main:i,mask:r,maskId:u,transform:s,symbol:l,styles:e(e({},w),d.styles)}),k=r.found&&i.found?Yt("generateAbstractMask",x)||{children:[],attributes:{}}:Yt("generateAbstractIcon",x)||{children:[],attributes:{}},A=k.children,T=k.attributes;return x.children=A,x.attributes=T,l?function(t){var n=t.prefix,i=t.iconName,r=t.children,o=t.attributes,a=t.symbol,s=!0===a?"".concat(n,"-").concat(X.familyPrefix,"-").concat(i):a;return[{tag:"svg",attributes:{style:"display: none;"},children:[{tag:"symbol",attributes:e(e({},o),{},{id:s}),children:r}]}]}(x):function(t){var n=t.children,i=t.main,r=t.mask,o=t.attributes,a=t.styles,s=t.transform;if(it(s)&&i.found&&!r.found){var l={x:i.width/i.height/2,y:.5};o.style=nt(e(e({},a),{},{"transform-origin":"".concat(l.x+s.x/16,"em ").concat(l.y+s.y/16,"em")}))}return[{tag:"svg",attributes:o,children:n}]}(x)}function Zt(t){var n=t.content,i=t.width,r=t.height,o=t.transform,a=t.title,s=t.extra,l=t.watchable,c=void 0!==l&&l,u=e(e(e({},s.attributes),a?{title:a}:{}),{},{class:s.classes.join(" ")});c&&(u[E]="");var f=e({},s.styles);it(o)&&(f.transform=function(t){var e=t.transform,n=t.width,i=void 0===n?16:n,r=t.height,o=void 0===r?16:r,a=t.startCentered,s=void 0!==a&&a,l="";return l+=s&&x?"translate(".concat(e.x/Q-i/2,"em, ").concat(e.y/Q-o/2,"em) "):s?"translate(calc(-50% + ".concat(e.x/Q,"em), calc(-50% + ").concat(e.y/Q,"em)) "):"translate(".concat(e.x/Q,"em, ").concat(e.y/Q,"em) "),(l+="scale(".concat(e.size/Q*(e.flipX?-1:1),", ").concat(e.size/Q*(e.flipY?-1:1),") "))+"rotate(".concat(e.rotate,"deg) ")}({transform:o,startCentered:!0,width:i,height:r}),f["-webkit-transform"]=f.transform);var d=nt(f);d.length>0&&(u.style=d);var p=[];return p.push({tag:"span",attributes:u,children:[n]}),a&&p.push({tag:"span",attributes:{class:"sr-only"},children:[a]}),p}function te(t){var n=t.content,i=t.title,r=t.extra,o=e(e(e({},r.attributes),i?{title:i}:{}),{},{class:r.classes.join(" ")}),a=nt(r.styles);a.length>0&&(o.style=a);var s=[];return s.push({tag:"span",attributes:o,children:[n]}),i&&s.push({tag:"span",attributes:{class:"sr-only"},children:[i]}),s}var ee=ct.styles;function ne(t){var e=t[0],n=t[1],i=o(t.slice(4),1)[0];return{found:!0,width:e,height:n,icon:Array.isArray(i)?{tag:"g",attributes:{class:"".concat(X.familyPrefix,"-").concat(W)},children:[{tag:"path",attributes:{class:"".concat(X.familyPrefix,"-").concat($),fill:"currentColor",d:i[0]}},{tag:"path",attributes:{class:"".concat(X.familyPrefix,"-").concat(F),fill:"currentColor",d:i[1]}}]}:{tag:"path",attributes:{fill:"currentColor",d:i}}}}var ie={found:!1,width:512,height:512};function re(t,n){var i=n;return"fa"===n&&null!==X.styleDefault&&(n=Mt()),new Promise((function(r,o){if(Yt("missingIconAbstract"),"fa"===i){var a=Pt(t)||{};t=a.iconName||t,n=a.prefix||n}if(t&&n&&ee[n]&&ee[n][t])return r(ne(ee[n][t]));!function(t,e){N||X.showMissingIcons||!t||console.error('Icon with name "'.concat(t,'" and prefix "').concat(e,'" is missing.'))}(t,n),r(e(e({},ie),{},{icon:X.showMissingIcons&&t&&Yt("missingIconAbstract")||{}}))}))}var oe=function(){},ae=X.measurePerformance&&y&&y.mark&&y.measure?y:{mark:oe,measure:oe},se='FA "6.1.1"',le=function(t){return ae.mark("".concat(se," ").concat(t," begins")),function(){return function(t){ae.mark("".concat(se," ").concat(t," ends")),ae.measure("".concat(se," ").concat(t),"".concat(se," ").concat(t," begins"),"".concat(se," ").concat(t," ends"))}(t)}},ce=function(){};function ue(t){return"string"==typeof(t.getAttribute?t.getAttribute(E):null)}function fe(t){return v.createElementNS("http://www.w3.org/2000/svg",t)}function de(t){return v.createElement(t)}function pe(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.ceFn,i=void 0===n?"svg"===t.tag?fe:de:n;if("string"==typeof t)return v.createTextNode(t);var r=i(t.tag);Object.keys(t.attributes||[]).forEach((function(e){r.setAttribute(e,t.attributes[e])}));var o=t.children||[];return o.forEach((function(t){r.appendChild(pe(t,{ceFn:i}))})),r}var he={replace:function(t){var e=t[0];if(e.parentNode)if(t[1].forEach((function(t){e.parentNode.insertBefore(pe(t),e)})),null===e.getAttribute(E)&&X.keepOriginalSource){var n=v.createComment(function(t){var e=" ".concat(t.outerHTML," ");return"".concat(e,"Font Awesome fontawesome.com ")}(e));e.parentNode.replaceChild(n,e)}else e.remove()},nest:function(t){var e=t[0],n=t[1];if(~tt(e).indexOf(X.replacementClass))return he.replace(t);var i=new RegExp("".concat(X.familyPrefix,"-.*"));if(delete n[0].attributes.id,n[0].attributes.class){var r=n[0].attributes.class.split(" ").reduce((function(t,e){return e===X.replacementClass||e.match(i)?t.toSvg.push(e):t.toNode.push(e),t}),{toNode:[],toSvg:[]});n[0].attributes.class=r.toSvg.join(" "),0===r.toNode.length?e.removeAttribute("class"):e.setAttribute("class",r.toNode.join(" "))}var o=n.map((function(t){return pt(t)})).join("\n");e.setAttribute(E,""),e.innerHTML=o}};function me(t){t()}function ge(t,e){var n="function"==typeof e?e:ce;if(0===t.length)n();else{var i=me;"async"===X.mutateApproach&&(i=g.requestAnimationFrame||me),i((function(){var e=!0===X.autoReplaceSvg?he.replace:he[X.autoReplaceSvg]||he.replace,i=le("mutate");t.map(e),i(),n()}))}}var ve=!1;function be(){ve=!0}function ye(){ve=!1}var _e=null;function we(t){if(b&&X.observeMutations){var e=t.treeCallback,n=void 0===e?ce:e,i=t.nodeCallback,r=void 0===i?ce:i,o=t.pseudoElementsCallback,a=void 0===o?ce:o,s=t.observeMutationsRoot,l=void 0===s?v:s;_e=new b((function(t){if(!ve){var e=Mt();Z(t).forEach((function(t){if("childList"===t.type&&t.addedNodes.length>0&&!ue(t.addedNodes[0])&&(X.searchPseudoElements&&a(t.target),n(t.target)),"attributes"===t.type&&t.target.parentNode&&X.searchPseudoElements&&a(t.target.parentNode),"attributes"===t.type&&ue(t.target)&&~B.indexOf(t.attributeName))if("class"===t.attributeName&&function(t){var e=t.getAttribute?t.getAttribute(T):null,n=t.getAttribute?t.getAttribute(C):null;return e&&n}(t.target)){var i=Ht(tt(t.target)),o=i.prefix,s=i.iconName;t.target.setAttribute(T,o||e),s&&t.target.setAttribute(C,s)}else(l=t.target)&&l.classList&&l.classList.contains&&l.classList.contains(X.replacementClass)&&r(t.target);var l}))}})),w&&_e.observe(l,{childList:!0,attributes:!0,characterData:!0,subtree:!0})}}function xe(t){var e=t.getAttribute("style"),n=[];return e&&(n=e.split(";").reduce((function(t,e){var n=e.split(":"),i=n[0],r=n.slice(1);return i&&r.length>0&&(t[i]=r.join(":").trim()),t}),{})),n}function ke(t){var e,n,i=t.getAttribute("data-prefix"),r=t.getAttribute("data-icon"),o=void 0!==t.innerText?t.innerText.trim():"",a=Ht(tt(t));return a.prefix||(a.prefix=Mt()),i&&r&&(a.prefix=i,a.iconName=r),a.iconName&&a.prefix||a.prefix&&o.length>0&&(a.iconName=(e=a.prefix,n=t.innerText,(Et[e]||{})[n]||Lt(a.prefix,gt(t.innerText)))),a}function Ee(t){var e=Z(t.attributes).reduce((function(t,e){return"class"!==t.name&&"style"!==t.name&&(t[e.name]=e.value),t}),{}),n=t.getAttribute("title"),i=t.getAttribute("data-fa-title-id");return X.autoA11y&&(n?e["aria-labelledby"]="".concat(X.replacementClass,"-title-").concat(i||J()):(e["aria-hidden"]="true",e.focusable="false")),e}function Ae(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{styleParser:!0},i=ke(t),r=i.iconName,o=i.prefix,a=i.rest,s=Ee(t),l=Ft("parseNodeAttributes",{},t),c=n.styleParser?xe(t):[];return e({iconName:r,title:t.getAttribute("title"),titleId:t.getAttribute("data-fa-title-id"),prefix:o,transform:G,mask:{iconName:null,prefix:null,rest:[]},maskId:null,symbol:!1,extra:{classes:a,styles:c,attributes:s}},l)}var Te=ct.styles;function Ce(t){var e="nest"===X.autoReplaceSvg?Ae(t,{styleParser:!1}):Ae(t);return~e.extra.classes.indexOf(I)?Yt("generateLayersText",t,e):Yt("generateSvgReplacementMutation",t,e)}function Oe(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(!w)return Promise.resolve();var n=v.documentElement.classList,i=function(t){return n.add("".concat(O,"-").concat(t))},r=function(t){return n.remove("".concat(O,"-").concat(t))},o=X.autoFetchSvg?Object.keys(D):Object.keys(Te),a=[".".concat(I,":not([").concat(E,"])")].concat(o.map((function(t){return".".concat(t,":not([").concat(E,"])")}))).join(", ");if(0===a.length)return Promise.resolve();var s=[];try{s=Z(t.querySelectorAll(a))}catch(t){}if(!(s.length>0))return Promise.resolve();i("pending"),r("complete");var l=le("onTree"),c=s.reduce((function(t,e){try{var n=Ce(e);n&&t.push(n)}catch(t){N||"MissingIcon"===t.name&&console.error(t)}return t}),[]);return new Promise((function(t,n){Promise.all(c).then((function(n){ge(n,(function(){i("active"),i("complete"),r("pending"),"function"==typeof e&&e(),l(),t()}))})).catch((function(t){l(),n(t)}))}))}function Se(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;Ce(t).then((function(t){t&&ge([t],e)}))}var Ne=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.transform,r=void 0===i?G:i,o=n.symbol,a=void 0!==o&&o,s=n.mask,l=void 0===s?null:s,c=n.maskId,u=void 0===c?null:c,f=n.title,d=void 0===f?null:f,p=n.titleId,h=void 0===p?null:p,m=n.classes,g=void 0===m?[]:m,v=n.attributes,b=void 0===v?{}:v,y=n.styles,_=void 0===y?{}:y;if(t){var w=t.prefix,x=t.iconName,k=t.icon;return Gt(e({type:"icon"},t),(function(){return $t("beforeDOMElementCreation",{iconDefinition:t,params:n}),X.autoA11y&&(d?b["aria-labelledby"]="".concat(X.replacementClass,"-title-").concat(h||J()):(b["aria-hidden"]="true",b.focusable="false")),Jt({icons:{main:ne(k),mask:l?ne(l.icon):{found:!1,width:null,height:null,icon:{}}},prefix:w,iconName:x,transform:e(e({},G),r),symbol:a,title:d,maskId:u,titleId:h,extra:{attributes:b,styles:_,classes:g}})}))}},De={mixout:function(){return{icon:(t=Ne,function(n){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=(n||{}).icon?n:Ut(n||{}),o=i.mask;return o&&(o=(o||{}).icon?o:Ut(o||{})),t(r,e(e({},i),{},{mask:o}))})};var t},hooks:function(){return{mutationObserverCallbacks:function(t){return t.treeCallback=Oe,t.nodeCallback=Se,t}}},provides:function(t){t.i2svg=function(t){var e=t.node,n=void 0===e?v:e,i=t.callback;return Oe(n,void 0===i?function(){}:i)},t.generateSvgReplacementMutation=function(t,e){var n=e.iconName,i=e.title,r=e.titleId,a=e.prefix,s=e.transform,l=e.symbol,c=e.mask,u=e.maskId,f=e.extra;return new Promise((function(e,d){Promise.all([re(n,a),c.iconName?re(c.iconName,c.prefix):Promise.resolve({found:!1,width:512,height:512,icon:{}})]).then((function(c){var d=o(c,2),p=d[0],h=d[1];e([t,Jt({icons:{main:p,mask:h},prefix:a,iconName:n,transform:s,symbol:l,maskId:u,title:i,titleId:r,extra:f,watchable:!0})])})).catch(d)}))},t.generateAbstractIcon=function(t){var e,n=t.children,i=t.attributes,r=t.main,o=t.transform,a=nt(t.styles);return a.length>0&&(i.style=a),it(o)&&(e=Yt("generateAbstractTransformGrouping",{main:r,transform:o,containerWidth:r.width,iconWidth:r.width})),n.push(e||r.icon),{children:n,attributes:i}}}},Le={mixout:function(){return{layer:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.classes,i=void 0===n?[]:n;return Gt({type:"layer"},(function(){$t("beforeDOMElementCreation",{assembler:t,params:e});var n=[];return t((function(t){Array.isArray(t)?t.map((function(t){n=n.concat(t.abstract)})):n=n.concat(t.abstract)})),[{tag:"span",attributes:{class:["".concat(X.familyPrefix,"-layers")].concat(a(i)).join(" ")},children:n}]}))}}}},je={mixout:function(){return{counter:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.title,i=void 0===n?null:n,r=e.classes,o=void 0===r?[]:r,s=e.attributes,l=void 0===s?{}:s,c=e.styles,u=void 0===c?{}:c;return Gt({type:"counter",content:t},(function(){return $t("beforeDOMElementCreation",{content:t,params:e}),te({content:t.toString(),title:i,extra:{attributes:l,styles:u,classes:["".concat(X.familyPrefix,"-layers-counter")].concat(a(o))}})}))}}}},Pe={mixout:function(){return{text:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=n.transform,r=void 0===i?G:i,o=n.title,s=void 0===o?null:o,l=n.classes,c=void 0===l?[]:l,u=n.attributes,f=void 0===u?{}:u,d=n.styles,p=void 0===d?{}:d;return Gt({type:"text",content:t},(function(){return $t("beforeDOMElementCreation",{content:t,params:n}),Zt({content:t,transform:e(e({},G),r),title:s,extra:{attributes:f,styles:p,classes:["".concat(X.familyPrefix,"-layers-text")].concat(a(c))}})}))}}},provides:function(t){t.generateLayersText=function(t,e){var n=e.title,i=e.transform,r=e.extra,o=null,a=null;if(x){var s=parseInt(getComputedStyle(t).fontSize,10),l=t.getBoundingClientRect();o=l.width/s,a=l.height/s}return X.autoA11y&&!n&&(r.attributes["aria-hidden"]="true"),Promise.resolve([t,Zt({content:t.innerHTML,width:o,height:a,transform:i,title:n,extra:r,watchable:!0})])}}},Me=new RegExp('"',"ug"),Ie=[1105920,1112319];function He(t,n){var i="".concat("data-fa-pseudo-element-pending").concat(n.replace(":","-"));return new Promise((function(r,o){if(null!==t.getAttribute(i))return r();var a,s,l,c=Z(t.children).filter((function(t){return t.getAttribute(A)===n}))[0],u=g.getComputedStyle(t,n),f=u.getPropertyValue("font-family").match(H),d=u.getPropertyValue("font-weight"),p=u.getPropertyValue("content");if(c&&!f)return t.removeChild(c),r();if(f&&"none"!==p&&""!==p){var h=u.getPropertyValue("content"),m=~["Solid","Regular","Light","Thin","Duotone","Brands","Kit"].indexOf(f[2])?L[f[2].toLowerCase()]:R[d],b=function(t){var e,n,i,r,o=t.replace(Me,""),a=(0,i=(e=o).length,(r=e.charCodeAt(0))>=55296&&r<=56319&&i>1&&(n=e.charCodeAt(1))>=56320&&n<=57343?1024*(r-55296)+n-56320+65536:r),s=a>=Ie[0]&&a<=Ie[1],l=2===o.length&&o[0]===o[1];return{value:gt(l?o[0]:o),isSecondary:s||l}}(h),y=b.value,_=b.isSecondary,w=f[0].startsWith("FontAwesome"),x=Lt(m,y),k=x;if(w){var E=(s=Tt[a=y],l=Lt("fas",a),s||(l?{prefix:"fas",iconName:l}:null)||{prefix:null,iconName:null});E.iconName&&E.prefix&&(x=E.iconName,m=E.prefix)}if(!x||_||c&&c.getAttribute(T)===m&&c.getAttribute(C)===k)r();else{t.setAttribute(i,k),c&&t.removeChild(c);var O={iconName:null,title:null,titleId:null,prefix:null,transform:G,symbol:!1,mask:{iconName:null,prefix:null,rest:[]},maskId:null,extra:{classes:[],styles:{},attributes:{}}},S=O.extra;S.attributes[A]=n,re(x,m).then((function(o){var a=Jt(e(e({},O),{},{icons:{main:o,mask:{prefix:null,iconName:null,rest:[]}},prefix:m,iconName:k,extra:S,watchable:!0})),s=v.createElement("svg");"::before"===n?t.insertBefore(s,t.firstChild):t.appendChild(s),s.outerHTML=a.map((function(t){return pt(t)})).join("\n"),t.removeAttribute(i),r()})).catch(o)}}else r()}))}function Re(t){return Promise.all([He(t,"::before"),He(t,"::after")])}function qe(t){return!(t.parentNode===document.head||~S.indexOf(t.tagName.toUpperCase())||t.getAttribute(A)||t.parentNode&&"svg"===t.parentNode.tagName)}function ze(t){if(w)return new Promise((function(e,n){var i=Z(t.querySelectorAll("*")).filter(qe).map(Re),r=le("searchPseudoElements");be(),Promise.all(i).then((function(){r(),ye(),e()})).catch((function(){r(),ye(),n()}))}))}var Be=!1,We=function(t){return t.toLowerCase().split(" ").reduce((function(t,e){var n=e.toLowerCase().split("-"),i=n[0],r=n.slice(1).join("-");if(i&&"h"===r)return t.flipX=!0,t;if(i&&"v"===r)return t.flipY=!0,t;if(r=parseFloat(r),isNaN(r))return t;switch(i){case"grow":t.size=t.size+r;break;case"shrink":t.size=t.size-r;break;case"left":t.x=t.x-r;break;case"right":t.x=t.x+r;break;case"up":t.y=t.y-r;break;case"down":t.y=t.y+r;break;case"rotate":t.rotate=t.rotate+r}return t}),{size:16,x:0,y:0,flipX:!1,flipY:!1,rotate:0})},Fe={mixout:function(){return{parse:{transform:function(t){return We(t)}}}},hooks:function(){return{parseNodeAttributes:function(t,e){var n=e.getAttribute("data-fa-transform");return n&&(t.transform=We(n)),t}}},provides:function(t){t.generateAbstractTransformGrouping=function(t){var n=t.main,i=t.transform,r=t.containerWidth,o=t.iconWidth,a={transform:"translate(".concat(r/2," 256)")},s="translate(".concat(32*i.x,", ").concat(32*i.y,") "),l="scale(".concat(i.size/16*(i.flipX?-1:1),", ").concat(i.size/16*(i.flipY?-1:1),") "),c="rotate(".concat(i.rotate," 0 0)"),u={outer:a,inner:{transform:"".concat(s," ").concat(l," ").concat(c)},path:{transform:"translate(".concat(o/2*-1," -256)")}};return{tag:"g",attributes:e({},u.outer),children:[{tag:"g",attributes:e({},u.inner),children:[{tag:n.icon.tag,children:n.icon.children,attributes:e(e({},n.icon.attributes),u.path)}]}]}}}},$e={x:0,y:0,width:"100%",height:"100%"};function Ye(t){var e=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];return t.attributes&&(t.attributes.fill||e)&&(t.attributes.fill="black"),t}var Ue,Ve={hooks:function(){return{parseNodeAttributes:function(t,e){var n=e.getAttribute("data-fa-mask"),i=n?Ht(n.split(" ").map((function(t){return t.trim()}))):{prefix:null,iconName:null,rest:[]};return i.prefix||(i.prefix=Mt()),t.mask=i,t.maskId=e.getAttribute("data-fa-mask-id"),t}}},provides:function(t){t.generateAbstractMask=function(t){var n,i=t.children,r=t.attributes,o=t.main,a=t.mask,s=t.maskId,l=t.transform,c=o.width,u=o.icon,f=a.width,d=a.icon,p=function(t){var e=t.transform,n=t.iconWidth,i={transform:"translate(".concat(t.containerWidth/2," 256)")},r="translate(".concat(32*e.x,", ").concat(32*e.y,") "),o="scale(".concat(e.size/16*(e.flipX?-1:1),", ").concat(e.size/16*(e.flipY?-1:1),") "),a="rotate(".concat(e.rotate," 0 0)");return{outer:i,inner:{transform:"".concat(r," ").concat(o," ").concat(a)},path:{transform:"translate(".concat(n/2*-1," -256)")}}}({transform:l,containerWidth:f,iconWidth:c}),h={tag:"rect",attributes:e(e({},$e),{},{fill:"white"})},m=u.children?{children:u.children.map(Ye)}:{},g={tag:"g",attributes:e({},p.inner),children:[Ye(e({tag:u.tag,attributes:e(e({},u.attributes),p.path)},m))]},v={tag:"g",attributes:e({},p.outer),children:[g]},b="mask-".concat(s||J()),y="clip-".concat(s||J()),_={tag:"mask",attributes:e(e({},$e),{},{id:b,maskUnits:"userSpaceOnUse",maskContentUnits:"userSpaceOnUse"}),children:[h,v]},w={tag:"defs",children:[{tag:"clipPath",attributes:{id:y},children:(n=d,"g"===n.tag?n.children:[n])},_]};return i.push(w,{tag:"rect",attributes:e({fill:"currentColor","clip-path":"url(#".concat(y,")"),mask:"url(#".concat(b,")")},$e)}),{children:i,attributes:r}}}},Xe={provides:function(t){var n=!1;g.matchMedia&&(n=g.matchMedia("(prefers-reduced-motion: reduce)").matches),t.missingIconAbstract=function(){var t=[],i={fill:"currentColor"},r={attributeType:"XML",repeatCount:"indefinite",dur:"2s"};t.push({tag:"path",attributes:e(e({},i),{},{d:"M156.5,447.7l-12.6,29.5c-18.7-9.5-35.9-21.2-51.5-34.9l22.7-22.7C127.6,430.5,141.5,440,156.5,447.7z M40.6,272H8.5 c1.4,21.2,5.4,41.7,11.7,61.1L50,321.2C45.1,305.5,41.8,289,40.6,272z M40.6,240c1.4-18.8,5.2-37,11.1-54.1l-29.5-12.6 C14.7,194.3,10,216.7,8.5,240H40.6z M64.3,156.5c7.8-14.9,17.2-28.8,28.1-41.5L69.7,92.3c-13.7,15.6-25.5,32.8-34.9,51.5 L64.3,156.5z M397,419.6c-13.9,12-29.4,22.3-46.1,30.4l11.9,29.8c20.7-9.9,39.8-22.6,56.9-37.6L397,419.6z M115,92.4 c13.9-12,29.4-22.3,46.1-30.4l-11.9-29.8c-20.7,9.9-39.8,22.6-56.8,37.6L115,92.4z M447.7,355.5c-7.8,14.9-17.2,28.8-28.1,41.5 l22.7,22.7c13.7-15.6,25.5-32.9,34.9-51.5L447.7,355.5z M471.4,272c-1.4,18.8-5.2,37-11.1,54.1l29.5,12.6 c7.5-21.1,12.2-43.5,13.6-66.8H471.4z M321.2,462c-15.7,5-32.2,8.2-49.2,9.4v32.1c21.2-1.4,41.7-5.4,61.1-11.7L321.2,462z M240,471.4c-18.8-1.4-37-5.2-54.1-11.1l-12.6,29.5c21.1,7.5,43.5,12.2,66.8,13.6V471.4z M462,190.8c5,15.7,8.2,32.2,9.4,49.2h32.1 c-1.4-21.2-5.4-41.7-11.7-61.1L462,190.8z M92.4,397c-12-13.9-22.3-29.4-30.4-46.1l-29.8,11.9c9.9,20.7,22.6,39.8,37.6,56.9 L92.4,397z M272,40.6c18.8,1.4,36.9,5.2,54.1,11.1l12.6-29.5C317.7,14.7,295.3,10,272,8.5V40.6z M190.8,50 c15.7-5,32.2-8.2,49.2-9.4V8.5c-21.2,1.4-41.7,5.4-61.1,11.7L190.8,50z M442.3,92.3L419.6,115c12,13.9,22.3,29.4,30.5,46.1 l29.8-11.9C470,128.5,457.3,109.4,442.3,92.3z M397,92.4l22.7-22.7c-15.6-13.7-32.8-25.5-51.5-34.9l-12.6,29.5 C370.4,72.1,384.4,81.5,397,92.4z"})});var o=e(e({},r),{},{attributeName:"opacity"}),a={tag:"circle",attributes:e(e({},i),{},{cx:"256",cy:"364",r:"28"}),children:[]};return n||a.children.push({tag:"animate",attributes:e(e({},r),{},{attributeName:"r",values:"28;14;28;28;14;28;"})},{tag:"animate",attributes:e(e({},o),{},{values:"1;0;1;1;0;1;"})}),t.push(a),t.push({tag:"path",attributes:e(e({},i),{},{opacity:"1",d:"M263.7,312h-16c-6.6,0-12-5.4-12-12c0-71,77.4-63.9,77.4-107.8c0-20-17.8-40.2-57.4-40.2c-29.1,0-44.3,9.6-59.2,28.7 c-3.9,5-11.1,6-16.2,2.4l-13.1-9.2c-5.6-3.9-6.9-11.8-2.6-17.2c21.2-27.2,46.4-44.7,91.2-44.7c52.3,0,97.4,29.8,97.4,80.2 c0,67.6-77.4,63.5-77.4,107.8C275.7,306.6,270.3,312,263.7,312z"}),children:n?[]:[{tag:"animate",attributes:e(e({},o),{},{values:"1;0;0;0;0;1;"})}]}),n||t.push({tag:"path",attributes:e(e({},i),{},{opacity:"0",d:"M232.5,134.5l7,168c0.3,6.4,5.6,11.5,12,11.5h9c6.4,0,11.7-5.1,12-11.5l7-168c0.3-6.8-5.2-12.5-12-12.5h-23 C237.7,122,232.2,127.7,232.5,134.5z"}),children:[{tag:"animate",attributes:e(e({},o),{},{values:"0;0;1;1;0;0;"})}]}),{tag:"g",attributes:{class:"missing"},children:t}}}};Ue={mixoutsTo:Kt}.mixoutsTo,qt=[st,De,Le,je,Pe,{hooks:function(){return{mutationObserverCallbacks:function(t){return t.pseudoElementsCallback=ze,t}}},provides:function(t){t.pseudoElements2svg=function(t){var e=t.node,n=void 0===e?v:e;X.searchPseudoElements&&ze(n)}}},{mixout:function(){return{dom:{unwatch:function(){be(),Be=!0}}}},hooks:function(){return{bootstrap:function(){we(Ft("mutationObserverCallbacks",{}))},noAuto:function(){_e&&_e.disconnect()},watch:function(t){var e=t.observeMutationsRoot;Be?ye():we(Ft("mutationObserverCallbacks",{observeMutationsRoot:e}))}}}},Fe,Ve,Xe,{hooks:function(){return{parseNodeAttributes:function(t,e){var n=e.getAttribute("data-fa-symbol"),i=null!==n&&(""===n||n);return t.symbol=i,t}}}}],zt={},Object.keys(Bt).forEach((function(t){-1===Wt.indexOf(t)&&delete Bt[t]})),qt.forEach((function(t){var e=t.mixout?t.mixout():{};if(Object.keys(e).forEach((function(t){"function"==typeof e[t]&&(Ue[t]=e[t]),"object"===n(e[t])&&Object.keys(e[t]).forEach((function(n){Ue[t]||(Ue[t]={}),Ue[t][n]=e[t][n]}))})),t.hooks){var i=t.hooks();Object.keys(i).forEach((function(t){zt[t]||(zt[t]=[]),zt[t].push(i[t])}))}t.provides&&t.provides(Bt)})),function(t){try{for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];t.apply(void 0,n)}catch(t){if(!N)throw t}}((function(t){_&&(g.FontAwesome||(g.FontAwesome=Kt),dt((function(){Qt(),$t("bootstrap")}))),ct.hooks=e(e({},ct.hooks),{},{addPack:function(t,n){ct.styles[t]=e(e({},ct.styles[t]||{}),n),Dt(),Qt()},addPacks:function(t){t.forEach((function(t){var n=o(t,2),i=n[0],r=n[1];ct.styles[i]=e(e({},ct.styles[i]||{}),r)})),Dt(),Qt()},addShims:function(t){var e;(e=ct.shims).push.apply(e,a(t)),Dt(),Qt()}})}))}()},169:(t,e,n)=>{"use strict";n.r(e),n.d(e,{Alert:()=>be,Button:()=>_e,Carousel:()=>Ie,Collapse:()=>Ue,Dropdown:()=>pn,Modal:()=>zn,Offcanvas:()=>Vn,Popover:()=>bi,ScrollSpy:()=>Ai,Tab:()=>Di,Toast:()=>Ri,Tooltip:()=>hi});var i={};n.r(i),n.d(i,{afterMain:()=>k,afterRead:()=>_,afterWrite:()=>T,applyStyles:()=>j,arrow:()=>G,auto:()=>l,basePlacements:()=>c,beforeMain:()=>w,beforeRead:()=>b,beforeWrite:()=>E,bottom:()=>o,clippingParents:()=>d,computeStyles:()=>et,createPopper:()=>Nt,createPopperBase:()=>St,createPopperLite:()=>Dt,detectOverflow:()=>gt,end:()=>f,eventListeners:()=>it,flip:()=>vt,hide:()=>_t,left:()=>s,main:()=>x,modifierPhases:()=>C,offset:()=>wt,placements:()=>v,popper:()=>h,popperGenerator:()=>Ot,popperOffsets:()=>xt,preventOverflow:()=>kt,read:()=>y,reference:()=>m,right:()=>a,start:()=>u,top:()=>r,variationPlacements:()=>g,viewport:()=>p,write:()=>A});var r="top",o="bottom",a="right",s="left",l="auto",c=[r,o,a,s],u="start",f="end",d="clippingParents",p="viewport",h="popper",m="reference",g=c.reduce((function(t,e){return t.concat([e+"-"+u,e+"-"+f])}),[]),v=[].concat(c,[l]).reduce((function(t,e){return t.concat([e,e+"-"+u,e+"-"+f])}),[]),b="beforeRead",y="read",_="afterRead",w="beforeMain",x="main",k="afterMain",E="beforeWrite",A="write",T="afterWrite",C=[b,y,_,w,x,k,E,A,T];function O(t){return t?(t.nodeName||"").toLowerCase():null}function S(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function N(t){return t instanceof S(t).Element||t instanceof Element}function D(t){return t instanceof S(t).HTMLElement||t instanceof HTMLElement}function L(t){return"undefined"!=typeof ShadowRoot&&(t instanceof S(t).ShadowRoot||t instanceof ShadowRoot)}const j={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},i=e.attributes[t]||{},r=e.elements[t];D(r)&&O(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(t){var e=i[t];!1===e?r.removeAttribute(t):r.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var i=e.elements[t],r=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});D(i)&&O(i)&&(Object.assign(i.style,o),Object.keys(r).forEach((function(t){i.removeAttribute(t)})))}))}},requires:["computeStyles"]};function P(t){return t.split("-")[0]}var M=Math.max,I=Math.min,H=Math.round;function R(t,e){void 0===e&&(e=!1);var n=t.getBoundingClientRect(),i=1,r=1;if(D(t)&&e){var o=t.offsetHeight,a=t.offsetWidth;a>0&&(i=H(n.width)/a||1),o>0&&(r=H(n.height)/o||1)}return{width:n.width/i,height:n.height/r,top:n.top/r,right:n.right/i,bottom:n.bottom/r,left:n.left/i,x:n.left/i,y:n.top/r}}function q(t){var e=R(t),n=t.offsetWidth,i=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-i)<=1&&(i=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:i}}function z(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&L(n)){var i=e;do{if(i&&t.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function B(t){return S(t).getComputedStyle(t)}function W(t){return["table","td","th"].indexOf(O(t))>=0}function F(t){return((N(t)?t.ownerDocument:t.document)||window.document).documentElement}function $(t){return"html"===O(t)?t:t.assignedSlot||t.parentNode||(L(t)?t.host:null)||F(t)}function Y(t){return D(t)&&"fixed"!==B(t).position?t.offsetParent:null}function U(t){for(var e=S(t),n=Y(t);n&&W(n)&&"static"===B(n).position;)n=Y(n);return n&&("html"===O(n)||"body"===O(n)&&"static"===B(n).position)?e:n||function(t){var e=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&D(t)&&"fixed"===B(t).position)return null;var n=$(t);for(L(n)&&(n=n.host);D(n)&&["html","body"].indexOf(O(n))<0;){var i=B(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||-1!==["transform","perspective"].indexOf(i.willChange)||e&&"filter"===i.willChange||e&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(t)||e}function V(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function X(t,e,n){return M(t,I(e,n))}function K(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function Q(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}const G={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,i=t.name,l=t.options,u=n.elements.arrow,f=n.modifiersData.popperOffsets,d=P(n.placement),p=V(d),h=[s,a].indexOf(d)>=0?"height":"width";if(u&&f){var m=function(t,e){return K("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:Q(t,c))}(l.padding,n),g=q(u),v="y"===p?r:s,b="y"===p?o:a,y=n.rects.reference[h]+n.rects.reference[p]-f[p]-n.rects.popper[h],_=f[p]-n.rects.reference[p],w=U(u),x=w?"y"===p?w.clientHeight||0:w.clientWidth||0:0,k=y/2-_/2,E=m[v],A=x-g[h]-m[b],T=x/2-g[h]/2+k,C=X(E,T,A),O=p;n.modifiersData[i]=((e={})[O]=C,e.centerOffset=C-T,e)}},effect:function(t){var e=t.state,n=t.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=e.elements.popper.querySelector(i)))&&z(e.elements.popper,i)&&(e.elements.arrow=i)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function J(t){return t.split("-")[1]}var Z={top:"auto",right:"auto",bottom:"auto",left:"auto"};function tt(t){var e,n=t.popper,i=t.popperRect,l=t.placement,c=t.variation,u=t.offsets,d=t.position,p=t.gpuAcceleration,h=t.adaptive,m=t.roundOffsets,g=t.isFixed,v=u.x,b=void 0===v?0:v,y=u.y,_=void 0===y?0:y,w="function"==typeof m?m({x:b,y:_}):{x:b,y:_};b=w.x,_=w.y;var x=u.hasOwnProperty("x"),k=u.hasOwnProperty("y"),E=s,A=r,T=window;if(h){var C=U(n),O="clientHeight",N="clientWidth";C===S(n)&&"static"!==B(C=F(n)).position&&"absolute"===d&&(O="scrollHeight",N="scrollWidth"),C=C,(l===r||(l===s||l===a)&&c===f)&&(A=o,_-=(g&&C===T&&T.visualViewport?T.visualViewport.height:C[O])-i.height,_*=p?1:-1),l!==s&&(l!==r&&l!==o||c!==f)||(E=a,b-=(g&&C===T&&T.visualViewport?T.visualViewport.width:C[N])-i.width,b*=p?1:-1)}var D,L=Object.assign({position:d},h&&Z),j=!0===m?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:H(e*i)/i||0,y:H(n*i)/i||0}}({x:b,y:_}):{x:b,y:_};return b=j.x,_=j.y,p?Object.assign({},L,((D={})[A]=k?"0":"",D[E]=x?"0":"",D.transform=(T.devicePixelRatio||1)<=1?"translate("+b+"px, "+_+"px)":"translate3d("+b+"px, "+_+"px, 0)",D)):Object.assign({},L,((e={})[A]=k?_+"px":"",e[E]=x?b+"px":"",e.transform="",e))}const et={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,r=void 0===i||i,o=n.adaptive,a=void 0===o||o,s=n.roundOffsets,l=void 0===s||s,c={placement:P(e.placement),variation:J(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:r,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,tt(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a,roundOffsets:l})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,tt(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}};var nt={passive:!0};const it={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,i=t.options,r=i.scroll,o=void 0===r||r,a=i.resize,s=void 0===a||a,l=S(e.elements.popper),c=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&c.forEach((function(t){t.addEventListener("scroll",n.update,nt)})),s&&l.addEventListener("resize",n.update,nt),function(){o&&c.forEach((function(t){t.removeEventListener("scroll",n.update,nt)})),s&&l.removeEventListener("resize",n.update,nt)}},data:{}};var rt={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return rt[t]}))}var at={start:"end",end:"start"};function st(t){return t.replace(/start|end/g,(function(t){return at[t]}))}function lt(t){var e=S(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function ct(t){return R(F(t)).left+lt(t).scrollLeft}function ut(t){var e=B(t),n=e.overflow,i=e.overflowX,r=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function ft(t){return["html","body","#document"].indexOf(O(t))>=0?t.ownerDocument.body:D(t)&&ut(t)?t:ft($(t))}function dt(t,e){var n;void 0===e&&(e=[]);var i=ft(t),r=i===(null==(n=t.ownerDocument)?void 0:n.body),o=S(i),a=r?[o].concat(o.visualViewport||[],ut(i)?i:[]):i,s=e.concat(a);return r?s:s.concat(dt($(a)))}function pt(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function ht(t,e){return e===p?pt(function(t){var e=S(t),n=F(t),i=e.visualViewport,r=n.clientWidth,o=n.clientHeight,a=0,s=0;return i&&(r=i.width,o=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=i.offsetLeft,s=i.offsetTop)),{width:r,height:o,x:a+ct(t),y:s}}(t)):N(e)?function(t){var e=R(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):pt(function(t){var e,n=F(t),i=lt(t),r=null==(e=t.ownerDocument)?void 0:e.body,o=M(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),a=M(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),s=-i.scrollLeft+ct(t),l=-i.scrollTop;return"rtl"===B(r||n).direction&&(s+=M(n.clientWidth,r?r.clientWidth:0)-o),{width:o,height:a,x:s,y:l}}(F(t)))}function mt(t){var e,n=t.reference,i=t.element,l=t.placement,c=l?P(l):null,d=l?J(l):null,p=n.x+n.width/2-i.width/2,h=n.y+n.height/2-i.height/2;switch(c){case r:e={x:p,y:n.y-i.height};break;case o:e={x:p,y:n.y+n.height};break;case a:e={x:n.x+n.width,y:h};break;case s:e={x:n.x-i.width,y:h};break;default:e={x:n.x,y:n.y}}var m=c?V(c):null;if(null!=m){var g="y"===m?"height":"width";switch(d){case u:e[m]=e[m]-(n[g]/2-i[g]/2);break;case f:e[m]=e[m]+(n[g]/2-i[g]/2)}}return e}function gt(t,e){void 0===e&&(e={});var n=e,i=n.placement,s=void 0===i?t.placement:i,l=n.boundary,u=void 0===l?d:l,f=n.rootBoundary,g=void 0===f?p:f,v=n.elementContext,b=void 0===v?h:v,y=n.altBoundary,_=void 0!==y&&y,w=n.padding,x=void 0===w?0:w,k=K("number"!=typeof x?x:Q(x,c)),E=b===h?m:h,A=t.rects.popper,T=t.elements[_?E:b],C=function(t,e,n){var i="clippingParents"===e?function(t){var e=dt($(t)),n=["absolute","fixed"].indexOf(B(t).position)>=0&&D(t)?U(t):t;return N(n)?e.filter((function(t){return N(t)&&z(t,n)&&"body"!==O(t)})):[]}(t):[].concat(e),r=[].concat(i,[n]),o=r[0],a=r.reduce((function(e,n){var i=ht(t,n);return e.top=M(i.top,e.top),e.right=I(i.right,e.right),e.bottom=I(i.bottom,e.bottom),e.left=M(i.left,e.left),e}),ht(t,o));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}(N(T)?T:T.contextElement||F(t.elements.popper),u,g),S=R(t.elements.reference),L=mt({reference:S,element:A,strategy:"absolute",placement:s}),j=pt(Object.assign({},A,L)),P=b===h?j:S,H={top:C.top-P.top+k.top,bottom:P.bottom-C.bottom+k.bottom,left:C.left-P.left+k.left,right:P.right-C.right+k.right},q=t.modifiersData.offset;if(b===h&&q){var W=q[s];Object.keys(H).forEach((function(t){var e=[a,o].indexOf(t)>=0?1:-1,n=[r,o].indexOf(t)>=0?"y":"x";H[t]+=W[n]*e}))}return H}const vt={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name;if(!e.modifiersData[i]._skip){for(var f=n.mainAxis,d=void 0===f||f,p=n.altAxis,h=void 0===p||p,m=n.fallbackPlacements,b=n.padding,y=n.boundary,_=n.rootBoundary,w=n.altBoundary,x=n.flipVariations,k=void 0===x||x,E=n.allowedAutoPlacements,A=e.options.placement,T=P(A),C=m||(T!==A&&k?function(t){if(P(t)===l)return[];var e=ot(t);return[st(t),e,st(e)]}(A):[ot(A)]),O=[A].concat(C).reduce((function(t,n){return t.concat(P(n)===l?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,r=n.boundary,o=n.rootBoundary,a=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?v:l,f=J(i),d=f?s?g:g.filter((function(t){return J(t)===f})):c,p=d.filter((function(t){return u.indexOf(t)>=0}));0===p.length&&(p=d);var h=p.reduce((function(e,n){return e[n]=gt(t,{placement:n,boundary:r,rootBoundary:o,padding:a})[P(n)],e}),{});return Object.keys(h).sort((function(t,e){return h[t]-h[e]}))}(e,{placement:n,boundary:y,rootBoundary:_,padding:b,flipVariations:k,allowedAutoPlacements:E}):n)}),[]),S=e.rects.reference,N=e.rects.popper,D=new Map,L=!0,j=O[0],M=0;M<O.length;M++){var I=O[M],H=P(I),R=J(I)===u,q=[r,o].indexOf(H)>=0,z=q?"width":"height",B=gt(e,{placement:I,boundary:y,rootBoundary:_,altBoundary:w,padding:b}),W=q?R?a:s:R?o:r;S[z]>N[z]&&(W=ot(W));var F=ot(W),$=[];if(d&&$.push(B[H]<=0),h&&$.push(B[W]<=0,B[F]<=0),$.every((function(t){return t}))){j=I,L=!1;break}D.set(I,$)}if(L)for(var Y=function(t){var e=O.find((function(e){var n=D.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return j=e,"break"},U=k?3:1;U>0&&"break"!==Y(U);U--);e.placement!==j&&(e.modifiersData[i]._skip=!0,e.placement=j,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function bt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function yt(t){return[r,a,o,s].some((function(e){return t[e]>=0}))}const _t={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,r=e.rects.popper,o=e.modifiersData.preventOverflow,a=gt(e,{elementContext:"reference"}),s=gt(e,{altBoundary:!0}),l=bt(a,i),c=bt(s,r,o),u=yt(l),f=yt(c);e.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":f})}},wt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,i=t.name,o=n.offset,l=void 0===o?[0,0]:o,c=v.reduce((function(t,n){return t[n]=function(t,e,n){var i=P(t),o=[s,r].indexOf(i)>=0?-1:1,l="function"==typeof n?n(Object.assign({},e,{placement:t})):n,c=l[0],u=l[1];return c=c||0,u=(u||0)*o,[s,a].indexOf(i)>=0?{x:u,y:c}:{x:c,y:u}}(n,e.rects,l),t}),{}),u=c[e.placement],f=u.x,d=u.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=f,e.modifiersData.popperOffsets.y+=d),e.modifiersData[i]=c}},xt={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=mt({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},kt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name,l=n.mainAxis,c=void 0===l||l,f=n.altAxis,d=void 0!==f&&f,p=n.boundary,h=n.rootBoundary,m=n.altBoundary,g=n.padding,v=n.tether,b=void 0===v||v,y=n.tetherOffset,_=void 0===y?0:y,w=gt(e,{boundary:p,rootBoundary:h,padding:g,altBoundary:m}),x=P(e.placement),k=J(e.placement),E=!k,A=V(x),T="x"===A?"y":"x",C=e.modifiersData.popperOffsets,O=e.rects.reference,S=e.rects.popper,N="function"==typeof _?_(Object.assign({},e.rects,{placement:e.placement})):_,D="number"==typeof N?{mainAxis:N,altAxis:N}:Object.assign({mainAxis:0,altAxis:0},N),L=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,j={x:0,y:0};if(C){if(c){var H,R="y"===A?r:s,z="y"===A?o:a,B="y"===A?"height":"width",W=C[A],F=W+w[R],$=W-w[z],Y=b?-S[B]/2:0,K=k===u?O[B]:S[B],Q=k===u?-S[B]:-O[B],G=e.elements.arrow,Z=b&&G?q(G):{width:0,height:0},tt=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},et=tt[R],nt=tt[z],it=X(0,O[B],Z[B]),rt=E?O[B]/2-Y-it-et-D.mainAxis:K-it-et-D.mainAxis,ot=E?-O[B]/2+Y+it+nt+D.mainAxis:Q+it+nt+D.mainAxis,at=e.elements.arrow&&U(e.elements.arrow),st=at?"y"===A?at.clientTop||0:at.clientLeft||0:0,lt=null!=(H=null==L?void 0:L[A])?H:0,ct=W+ot-lt,ut=X(b?I(F,W+rt-lt-st):F,W,b?M($,ct):$);C[A]=ut,j[A]=ut-W}if(d){var ft,dt="x"===A?r:s,pt="x"===A?o:a,ht=C[T],mt="y"===T?"height":"width",vt=ht+w[dt],bt=ht-w[pt],yt=-1!==[r,s].indexOf(x),_t=null!=(ft=null==L?void 0:L[T])?ft:0,wt=yt?vt:ht-O[mt]-S[mt]-_t+D.altAxis,xt=yt?ht+O[mt]+S[mt]-_t-D.altAxis:bt,kt=b&&yt?function(t,e,n){var i=X(t,e,n);return i>n?n:i}(wt,ht,xt):X(b?wt:vt,ht,b?xt:bt);C[T]=kt,j[T]=kt-ht}e.modifiersData[i]=j}},requiresIfExists:["offset"]};function Et(t,e,n){void 0===n&&(n=!1);var i,r,o=D(e),a=D(e)&&function(t){var e=t.getBoundingClientRect(),n=H(e.width)/t.offsetWidth||1,i=H(e.height)/t.offsetHeight||1;return 1!==n||1!==i}(e),s=F(e),l=R(t,a),c={scrollLeft:0,scrollTop:0},u={x:0,y:0};return(o||!o&&!n)&&(("body"!==O(e)||ut(s))&&(c=(i=e)!==S(i)&&D(i)?{scrollLeft:(r=i).scrollLeft,scrollTop:r.scrollTop}:lt(i)),D(e)?((u=R(e,!0)).x+=e.clientLeft,u.y+=e.clientTop):s&&(u.x=ct(s))),{x:l.left+c.scrollLeft-u.x,y:l.top+c.scrollTop-u.y,width:l.width,height:l.height}}function At(t){var e=new Map,n=new Set,i=[];function r(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&r(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||r(t)})),i}var Tt={placement:"bottom",modifiers:[],strategy:"absolute"};function Ct(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function Ot(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,r=e.defaultOptions,o=void 0===r?Tt:r;return function(t,e,n){void 0===n&&(n=o);var r,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Tt,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},l=[],c=!1,u={state:s,setOptions:function(n){var r="function"==typeof n?n(s.options):n;f(),s.options=Object.assign({},o,s.options,r),s.scrollParents={reference:N(t)?dt(t):t.contextElement?dt(t.contextElement):[],popper:dt(e)};var a,c,d=function(t){var e=At(t);return C.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((a=[].concat(i,s.options.modifiers),c=a.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(c).map((function(t){return c[t]}))));return s.orderedModifiers=d.filter((function(t){return t.enabled})),s.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,r=t.effect;if("function"==typeof r){var o=r({state:s,name:e,instance:u,options:i});l.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!c){var t=s.elements,e=t.reference,n=t.popper;if(Ct(e,n)){s.rects={reference:Et(e,U(n),"fixed"===s.options.strategy),popper:q(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(t){return s.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<s.orderedModifiers.length;i++)if(!0!==s.reset){var r=s.orderedModifiers[i],o=r.fn,a=r.options,l=void 0===a?{}:a,f=r.name;"function"==typeof o&&(s=o({state:s,options:l,name:f,instance:u})||s)}else s.reset=!1,i=-1}}},update:(r=function(){return new Promise((function(t){u.forceUpdate(),t(s)}))},function(){return a||(a=new Promise((function(t){Promise.resolve().then((function(){a=void 0,t(r())}))}))),a}),destroy:function(){f(),c=!0}};if(!Ct(t,e))return u;function f(){l.forEach((function(t){return t()})),l=[]}return u.setOptions(n).then((function(t){!c&&n.onFirstUpdate&&n.onFirstUpdate(t)})),u}}var St=Ot(),Nt=Ot({defaultModifiers:[it,xt,et,j,wt,vt,kt,G,_t]}),Dt=Ot({defaultModifiers:[it,xt,et,j]});const Lt="transitionend",jt=t=>{let e=t.getAttribute("data-bs-target");if(!e||"#"===e){let n=t.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n=`#${n.split("#")[1]}`),e=n&&"#"!==n?n.trim():null}return e},Pt=t=>{const e=jt(t);return e&&document.querySelector(e)?e:null},Mt=t=>{const e=jt(t);return e?document.querySelector(e):null},It=t=>{t.dispatchEvent(new Event(Lt))},Ht=t=>!(!t||"object"!=typeof t)&&(void 0!==t.jquery&&(t=t[0]),void 0!==t.nodeType),Rt=t=>Ht(t)?t.jquery?t[0]:t:"string"==typeof t&&t.length>0?document.querySelector(t):null,qt=(t,e,n)=>{Object.keys(n).forEach((i=>{const r=n[i],o=e[i],a=o&&Ht(o)?"element":null==(s=o)?`${s}`:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();var s;if(!new RegExp(r).test(a))throw new TypeError(`${t.toUpperCase()}: Option "${i}" provided type "${a}" but expected type "${r}".`)}))},zt=t=>!(!Ht(t)||0===t.getClientRects().length)&&"visible"===getComputedStyle(t).getPropertyValue("visibility"),Bt=t=>!t||t.nodeType!==Node.ELEMENT_NODE||!!t.classList.contains("disabled")||(void 0!==t.disabled?t.disabled:t.hasAttribute("disabled")&&"false"!==t.getAttribute("disabled")),Wt=t=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?Wt(t.parentNode):null},Ft=()=>{},$t=t=>{t.offsetHeight},Yt=()=>{const{jQuery:t}=window;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},Ut=[],Vt=()=>"rtl"===document.documentElement.dir,Xt=t=>{var e;e=()=>{const e=Yt();if(e){const n=t.NAME,i=e.fn[n];e.fn[n]=t.jQueryInterface,e.fn[n].Constructor=t,e.fn[n].noConflict=()=>(e.fn[n]=i,t.jQueryInterface)}},"loading"===document.readyState?(Ut.length||document.addEventListener("DOMContentLoaded",(()=>{Ut.forEach((t=>t()))})),Ut.push(e)):e()},Kt=t=>{"function"==typeof t&&t()},Qt=(t,e,n=!0)=>{if(!n)return void Kt(t);const i=(t=>{if(!t)return 0;let{transitionDuration:e,transitionDelay:n}=window.getComputedStyle(t);const i=Number.parseFloat(e),r=Number.parseFloat(n);return i||r?(e=e.split(",")[0],n=n.split(",")[0],1e3*(Number.parseFloat(e)+Number.parseFloat(n))):0})(e)+5;let r=!1;const o=({target:n})=>{n===e&&(r=!0,e.removeEventListener(Lt,o),Kt(t))};e.addEventListener(Lt,o),setTimeout((()=>{r||It(e)}),i)},Gt=(t,e,n,i)=>{let r=t.indexOf(e);if(-1===r)return t[!n&&i?t.length-1:0];const o=t.length;return r+=n?1:-1,i&&(r=(r+o)%o),t[Math.max(0,Math.min(r,o-1))]},Jt=/[^.]*(?=\..*)\.|.*/,Zt=/\..*/,te=/::\d+$/,ee={};let ne=1;const ie={mouseenter:"mouseover",mouseleave:"mouseout"},re=/^(mouseenter|mouseleave)/i,oe=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function ae(t,e){return e&&`${e}::${ne++}`||t.uidEvent||ne++}function se(t){const e=ae(t);return t.uidEvent=e,ee[e]=ee[e]||{},ee[e]}function le(t,e,n=null){const i=Object.keys(t);for(let r=0,o=i.length;r<o;r++){const o=t[i[r]];if(o.originalHandler===e&&o.delegationSelector===n)return o}return null}function ce(t,e,n){const i="string"==typeof e,r=i?n:e;let o=de(t);return oe.has(o)||(o=t),[i,r,o]}function ue(t,e,n,i,r){if("string"!=typeof e||!t)return;if(n||(n=i,i=null),re.test(e)){const t=t=>function(e){if(!e.relatedTarget||e.relatedTarget!==e.delegateTarget&&!e.delegateTarget.contains(e.relatedTarget))return t.call(this,e)};i?i=t(i):n=t(n)}const[o,a,s]=ce(e,n,i),l=se(t),c=l[s]||(l[s]={}),u=le(c,a,o?n:null);if(u)return void(u.oneOff=u.oneOff&&r);const f=ae(a,e.replace(Jt,"")),d=o?function(t,e,n){return function i(r){const o=t.querySelectorAll(e);for(let{target:a}=r;a&&a!==this;a=a.parentNode)for(let s=o.length;s--;)if(o[s]===a)return r.delegateTarget=a,i.oneOff&&pe.off(t,r.type,e,n),n.apply(a,[r]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&pe.off(t,i.type,e),e.apply(t,[i])}}(t,n);d.delegationSelector=o?n:null,d.originalHandler=a,d.oneOff=r,d.uidEvent=f,c[f]=d,t.addEventListener(s,d,o)}function fe(t,e,n,i,r){const o=le(e[n],i,r);o&&(t.removeEventListener(n,o,Boolean(r)),delete e[n][o.uidEvent])}function de(t){return t=t.replace(Zt,""),ie[t]||t}const pe={on(t,e,n,i){ue(t,e,n,i,!1)},one(t,e,n,i){ue(t,e,n,i,!0)},off(t,e,n,i){if("string"!=typeof e||!t)return;const[r,o,a]=ce(e,n,i),s=a!==e,l=se(t),c=e.startsWith(".");if(void 0!==o){if(!l||!l[a])return;return void fe(t,l,a,o,r?n:null)}c&&Object.keys(l).forEach((n=>{!function(t,e,n,i){const r=e[n]||{};Object.keys(r).forEach((o=>{if(o.includes(i)){const i=r[o];fe(t,e,n,i.originalHandler,i.delegationSelector)}}))}(t,l,n,e.slice(1))}));const u=l[a]||{};Object.keys(u).forEach((n=>{const i=n.replace(te,"");if(!s||e.includes(i)){const e=u[n];fe(t,l,a,e.originalHandler,e.delegationSelector)}}))},trigger(t,e,n){if("string"!=typeof e||!t)return null;const i=Yt(),r=de(e),o=e!==r,a=oe.has(r);let s,l=!0,c=!0,u=!1,f=null;return o&&i&&(s=i.Event(e,n),i(t).trigger(s),l=!s.isPropagationStopped(),c=!s.isImmediatePropagationStopped(),u=s.isDefaultPrevented()),a?(f=document.createEvent("HTMLEvents"),f.initEvent(r,l,!0)):f=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((t=>{Object.defineProperty(f,t,{get:()=>n[t]})})),u&&f.preventDefault(),c&&t.dispatchEvent(f),f.defaultPrevented&&void 0!==s&&s.preventDefault(),f}},he=new Map,me={set(t,e,n){he.has(t)||he.set(t,new Map);const i=he.get(t);i.has(e)||0===i.size?i.set(e,n):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(i.keys())[0]}.`)},get:(t,e)=>he.has(t)&&he.get(t).get(e)||null,remove(t,e){if(!he.has(t))return;const n=he.get(t);n.delete(e),0===n.size&&he.delete(t)}};class ge{constructor(t){(t=Rt(t))&&(this._element=t,me.set(this._element,this.constructor.DATA_KEY,this))}dispose(){me.remove(this._element,this.constructor.DATA_KEY),pe.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((t=>{this[t]=null}))}_queueCallback(t,e,n=!0){Qt(t,e,n)}static getInstance(t){return me.get(Rt(t),this.DATA_KEY)}static getOrCreateInstance(t,e={}){return this.getInstance(t)||new this(t,"object"==typeof e?e:null)}static get VERSION(){return"5.1.3"}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}}const ve=(t,e="hide")=>{const n=`click.dismiss${t.EVENT_KEY}`,i=t.NAME;pe.on(document,n,`[data-bs-dismiss="${i}"]`,(function(n){if(["A","AREA"].includes(this.tagName)&&n.preventDefault(),Bt(this))return;const r=Mt(this)||this.closest(`.${i}`);t.getOrCreateInstance(r)[e]()}))};class be extends ge{static get NAME(){return"alert"}close(){if(pe.trigger(this._element,"close.bs.alert").defaultPrevented)return;this._element.classList.remove("show");const t=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,t)}_destroyElement(){this._element.remove(),pe.trigger(this._element,"closed.bs.alert"),this.dispose()}static jQueryInterface(t){return this.each((function(){const e=be.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}ve(be,"close"),Xt(be);const ye='[data-bs-toggle="button"]';class _e extends ge{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(t){return this.each((function(){const e=_e.getOrCreateInstance(this);"toggle"===t&&e[t]()}))}}function we(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function xe(t){return t.replace(/[A-Z]/g,(t=>`-${t.toLowerCase()}`))}pe.on(document,"click.bs.button.data-api",ye,(t=>{t.preventDefault();const e=t.target.closest(ye);_e.getOrCreateInstance(e).toggle()})),Xt(_e);const ke={setDataAttribute(t,e,n){t.setAttribute(`data-bs-${xe(e)}`,n)},removeDataAttribute(t,e){t.removeAttribute(`data-bs-${xe(e)}`)},getDataAttributes(t){if(!t)return{};const e={};return Object.keys(t.dataset).filter((t=>t.startsWith("bs"))).forEach((n=>{let i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=we(t.dataset[n])})),e},getDataAttribute:(t,e)=>we(t.getAttribute(`data-bs-${xe(e)}`)),offset(t){const e=t.getBoundingClientRect();return{top:e.top+window.pageYOffset,left:e.left+window.pageXOffset}},position:t=>({top:t.offsetTop,left:t.offsetLeft})},Ee={find:(t,e=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(e,t)),findOne:(t,e=document.documentElement)=>Element.prototype.querySelector.call(e,t),children:(t,e)=>[].concat(...t.children).filter((t=>t.matches(e))),parents(t,e){const n=[];let i=t.parentNode;for(;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)i.matches(e)&&n.push(i),i=i.parentNode;return n},prev(t,e){let n=t.previousElementSibling;for(;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next(t,e){let n=t.nextElementSibling;for(;n;){if(n.matches(e))return[n];n=n.nextElementSibling}return[]},focusableChildren(t){const e=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((t=>`${t}:not([tabindex^="-"])`)).join(", ");return this.find(e,t).filter((t=>!Bt(t)&&zt(t)))}},Ae="carousel",Te={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},Ce={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Oe="next",Se="prev",Ne="left",De="right",Le={ArrowLeft:De,ArrowRight:Ne},je="slid.bs.carousel",Pe="active",Me=".active.carousel-item";class Ie extends ge{constructor(t,e){super(t),this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._indicatorsElement=Ee.findOne(".carousel-indicators",this._element),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent),this._addEventListeners()}static get Default(){return Te}static get NAME(){return Ae}next(){this._slide(Oe)}nextWhenVisible(){!document.hidden&&zt(this._element)&&this.next()}prev(){this._slide(Se)}pause(t){t||(this._isPaused=!0),Ee.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(It(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=Ee.findOne(Me,this._element);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void pe.one(this._element,je,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const n=t>e?Oe:Se;this._slide(n,this._items[t])}_getConfig(t){return t={...Te,...ke.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Ae,t,Ce),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e&&this._slide(e>0?De:Ne)}_addEventListeners(){this._config.keyboard&&pe.on(this._element,"keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&(pe.on(this._element,"mouseenter.bs.carousel",(t=>this.pause(t))),pe.on(this._element,"mouseleave.bs.carousel",(t=>this.cycle(t)))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}_addTouchEventListeners(){const t=t=>this._pointerEvent&&("pen"===t.pointerType||"touch"===t.pointerType),e=e=>{t(e)?this.touchStartX=e.clientX:this._pointerEvent||(this.touchStartX=e.touches[0].clientX)},n=t=>{this.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-this.touchStartX},i=e=>{t(e)&&(this.touchDeltaX=e.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};Ee.find(".carousel-item img",this._element).forEach((t=>{pe.on(t,"dragstart.bs.carousel",(t=>t.preventDefault()))})),this._pointerEvent?(pe.on(this._element,"pointerdown.bs.carousel",(t=>e(t))),pe.on(this._element,"pointerup.bs.carousel",(t=>i(t))),this._element.classList.add("pointer-event")):(pe.on(this._element,"touchstart.bs.carousel",(t=>e(t))),pe.on(this._element,"touchmove.bs.carousel",(t=>n(t))),pe.on(this._element,"touchend.bs.carousel",(t=>i(t))))}_keydown(t){if(/input|textarea/i.test(t.target.tagName))return;const e=Le[t.key];e&&(t.preventDefault(),this._slide(e))}_getItemIndex(t){return this._items=t&&t.parentNode?Ee.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)}_getItemByOrder(t,e){const n=t===Oe;return Gt(this._items,e,n,this._config.wrap)}_triggerSlideEvent(t,e){const n=this._getItemIndex(t),i=this._getItemIndex(Ee.findOne(Me,this._element));return pe.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=Ee.findOne(".active",this._indicatorsElement);e.classList.remove(Pe),e.removeAttribute("aria-current");const n=Ee.find("[data-bs-target]",this._indicatorsElement);for(let e=0;e<n.length;e++)if(Number.parseInt(n[e].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(t)){n[e].classList.add(Pe),n[e].setAttribute("aria-current","true");break}}}_updateInterval(){const t=this._activeElement||Ee.findOne(Me,this._element);if(!t)return;const e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}_slide(t,e){const n=this._directionToOrder(t),i=Ee.findOne(Me,this._element),r=this._getItemIndex(i),o=e||this._getItemByOrder(n,i),a=this._getItemIndex(o),s=Boolean(this._interval),l=n===Oe,c=l?"carousel-item-start":"carousel-item-end",u=l?"carousel-item-next":"carousel-item-prev",f=this._orderToDirection(n);if(o&&o.classList.contains(Pe))return void(this._isSliding=!1);if(this._isSliding)return;if(this._triggerSlideEvent(o,f).defaultPrevented)return;if(!i||!o)return;this._isSliding=!0,s&&this.pause(),this._setActiveIndicatorElement(o),this._activeElement=o;const d=()=>{pe.trigger(this._element,je,{relatedTarget:o,direction:f,from:r,to:a})};if(this._element.classList.contains("slide")){o.classList.add(u),$t(o),i.classList.add(c),o.classList.add(c);const t=()=>{o.classList.remove(c,u),o.classList.add(Pe),i.classList.remove(Pe,u,c),this._isSliding=!1,setTimeout(d,0)};this._queueCallback(t,i,!0)}else i.classList.remove(Pe),o.classList.add(Pe),this._isSliding=!1,d();s&&this.cycle()}_directionToOrder(t){return[De,Ne].includes(t)?Vt()?t===Ne?Se:Oe:t===Ne?Oe:Se:t}_orderToDirection(t){return[Oe,Se].includes(t)?Vt()?t===Se?Ne:De:t===Se?De:Ne:t}static carouselInterface(t,e){const n=Ie.getOrCreateInstance(t,e);let{_config:i}=n;"object"==typeof e&&(i={...i,...e});const r="string"==typeof e?e:i.slide;if("number"==typeof e)n.to(e);else if("string"==typeof r){if(void 0===n[r])throw new TypeError(`No method named "${r}"`);n[r]()}else i.interval&&i.ride&&(n.pause(),n.cycle())}static jQueryInterface(t){return this.each((function(){Ie.carouselInterface(this,t)}))}static dataApiClickHandler(t){const e=Mt(this);if(!e||!e.classList.contains("carousel"))return;const n={...ke.getDataAttributes(e),...ke.getDataAttributes(this)},i=this.getAttribute("data-bs-slide-to");i&&(n.interval=!1),Ie.carouselInterface(e,n),i&&Ie.getInstance(e).to(i),t.preventDefault()}}pe.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",Ie.dataApiClickHandler),pe.on(window,"load.bs.carousel.data-api",(()=>{const t=Ee.find('[data-bs-ride="carousel"]');for(let e=0,n=t.length;e<n;e++)Ie.carouselInterface(t[e],Ie.getInstance(t[e]))})),Xt(Ie);const He="collapse",Re={toggle:!0,parent:null},qe={toggle:"boolean",parent:"(null|element)"},ze="show",Be="collapse",We="collapsing",Fe="collapsed",$e=":scope .collapse .collapse",Ye='[data-bs-toggle="collapse"]';class Ue extends ge{constructor(t,e){super(t),this._isTransitioning=!1,this._config=this._getConfig(e),this._triggerArray=[];const n=Ee.find(Ye);for(let t=0,e=n.length;t<e;t++){const e=n[t],i=Pt(e),r=Ee.find(i).filter((t=>t===this._element));null!==i&&r.length&&(this._selector=i,this._triggerArray.push(e))}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return Re}static get NAME(){return He}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let t,e=[];if(this._config.parent){const t=Ee.find($e,this._config.parent);e=Ee.find(".collapse.show, .collapse.collapsing",this._config.parent).filter((e=>!t.includes(e)))}const n=Ee.findOne(this._selector);if(e.length){const i=e.find((t=>n!==t));if(t=i?Ue.getInstance(i):null,t&&t._isTransitioning)return}if(pe.trigger(this._element,"show.bs.collapse").defaultPrevented)return;e.forEach((e=>{n!==e&&Ue.getOrCreateInstance(e,{toggle:!1}).hide(),t||me.set(e,"bs.collapse",null)}));const i=this._getDimension();this._element.classList.remove(Be),this._element.classList.add(We),this._element.style[i]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const r=`scroll${i[0].toUpperCase()+i.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(We),this._element.classList.add(Be,ze),this._element.style[i]="",pe.trigger(this._element,"shown.bs.collapse")}),this._element,!0),this._element.style[i]=`${this._element[r]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if(pe.trigger(this._element,"hide.bs.collapse").defaultPrevented)return;const t=this._getDimension();this._element.style[t]=`${this._element.getBoundingClientRect()[t]}px`,$t(this._element),this._element.classList.add(We),this._element.classList.remove(Be,ze);const e=this._triggerArray.length;for(let t=0;t<e;t++){const e=this._triggerArray[t],n=Mt(e);n&&!this._isShown(n)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0,this._element.style[t]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(We),this._element.classList.add(Be),pe.trigger(this._element,"hidden.bs.collapse")}),this._element,!0)}_isShown(t=this._element){return t.classList.contains(ze)}_getConfig(t){return(t={...Re,...ke.getDataAttributes(this._element),...t}).toggle=Boolean(t.toggle),t.parent=Rt(t.parent),qt(He,t,qe),t}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const t=Ee.find($e,this._config.parent);Ee.find(Ye,this._config.parent).filter((e=>!t.includes(e))).forEach((t=>{const e=Mt(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}))}_addAriaAndCollapsedClass(t,e){t.length&&t.forEach((t=>{e?t.classList.remove(Fe):t.classList.add(Fe),t.setAttribute("aria-expanded",e)}))}static jQueryInterface(t){return this.each((function(){const e={};"string"==typeof t&&/show|hide/.test(t)&&(e.toggle=!1);const n=Ue.getOrCreateInstance(this,e);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t]()}}))}}pe.on(document,"click.bs.collapse.data-api",Ye,(function(t){("A"===t.target.tagName||t.delegateTarget&&"A"===t.delegateTarget.tagName)&&t.preventDefault();const e=Pt(this);Ee.find(e).forEach((t=>{Ue.getOrCreateInstance(t,{toggle:!1}).toggle()}))})),Xt(Ue);const Ve="dropdown",Xe="Escape",Ke="Space",Qe="ArrowUp",Ge="ArrowDown",Je=new RegExp("ArrowUp|ArrowDown|Escape"),Ze="click.bs.dropdown.data-api",tn="keydown.bs.dropdown.data-api",en="show",nn='[data-bs-toggle="dropdown"]',rn=".dropdown-menu",on=Vt()?"top-end":"top-start",an=Vt()?"top-start":"top-end",sn=Vt()?"bottom-end":"bottom-start",ln=Vt()?"bottom-start":"bottom-end",cn=Vt()?"left-start":"right-start",un=Vt()?"right-start":"left-start",fn={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},dn={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"};class pn extends ge{constructor(t,e){super(t),this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar()}static get Default(){return fn}static get DefaultType(){return dn}static get NAME(){return Ve}toggle(){return this._isShown()?this.hide():this.show()}show(){if(Bt(this._element)||this._isShown(this._menu))return;const t={relatedTarget:this._element};if(pe.trigger(this._element,"show.bs.dropdown",t).defaultPrevented)return;const e=pn.getParentFromElement(this._element);this._inNavbar?ke.setDataAttribute(this._menu,"popper","none"):this._createPopper(e),"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&[].concat(...document.body.children).forEach((t=>pe.on(t,"mouseover",Ft))),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(en),this._element.classList.add(en),pe.trigger(this._element,"shown.bs.dropdown",t)}hide(){if(Bt(this._element)||!this._isShown(this._menu))return;const t={relatedTarget:this._element};this._completeHide(t)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(t){pe.trigger(this._element,"hide.bs.dropdown",t).defaultPrevented||("ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>pe.off(t,"mouseover",Ft))),this._popper&&this._popper.destroy(),this._menu.classList.remove(en),this._element.classList.remove(en),this._element.setAttribute("aria-expanded","false"),ke.removeDataAttribute(this._menu,"popper"),pe.trigger(this._element,"hidden.bs.dropdown",t))}_getConfig(t){if(t={...this.constructor.Default,...ke.getDataAttributes(this._element),...t},qt(Ve,t,this.constructor.DefaultType),"object"==typeof t.reference&&!Ht(t.reference)&&"function"!=typeof t.reference.getBoundingClientRect)throw new TypeError(`${Ve.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return t}_createPopper(t){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=t:Ht(this._config.reference)?e=Rt(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const n=this._getPopperConfig(),r=n.modifiers.find((t=>"applyStyles"===t.name&&!1===t.enabled));this._popper=Nt(e,this._menu,n),r&&ke.setDataAttribute(this._menu,"popper","static")}_isShown(t=this._element){return t.classList.contains(en)}_getMenuElement(){return Ee.next(this._element,rn)[0]}_getPlacement(){const t=this._element.parentNode;if(t.classList.contains("dropend"))return cn;if(t.classList.contains("dropstart"))return un;const e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?an:on:e?ln:sn}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_selectMenuItem({key:t,target:e}){const n=Ee.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(zt);n.length&&Gt(n,e,t===Ge,!n.includes(e)).focus()}static jQueryInterface(t){return this.each((function(){const e=pn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static clearMenus(t){if(t&&(2===t.button||"keyup"===t.type&&"Tab"!==t.key))return;const e=Ee.find(nn);for(let n=0,i=e.length;n<i;n++){const i=pn.getInstance(e[n]);if(!i||!1===i._config.autoClose)continue;if(!i._isShown())continue;const r={relatedTarget:i._element};if(t){const e=t.composedPath(),n=e.includes(i._menu);if(e.includes(i._element)||"inside"===i._config.autoClose&&!n||"outside"===i._config.autoClose&&n)continue;if(i._menu.contains(t.target)&&("keyup"===t.type&&"Tab"===t.key||/input|select|option|textarea|form/i.test(t.target.tagName)))continue;"click"===t.type&&(r.clickEvent=t)}i._completeHide(r)}}static getParentFromElement(t){return Mt(t)||t.parentNode}static dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?t.key===Ke||t.key!==Xe&&(t.key!==Ge&&t.key!==Qe||t.target.closest(rn)):!Je.test(t.key))return;const e=this.classList.contains(en);if(!e&&t.key===Xe)return;if(t.preventDefault(),t.stopPropagation(),Bt(this))return;const n=this.matches(nn)?this:Ee.prev(this,nn)[0],i=pn.getOrCreateInstance(n);if(t.key!==Xe)return t.key===Qe||t.key===Ge?(e||i.show(),void i._selectMenuItem(t)):void(e&&t.key!==Ke||pn.clearMenus());i.hide()}}pe.on(document,tn,nn,pn.dataApiKeydownHandler),pe.on(document,tn,rn,pn.dataApiKeydownHandler),pe.on(document,Ze,pn.clearMenus),pe.on(document,"keyup.bs.dropdown.data-api",pn.clearMenus),pe.on(document,Ze,nn,(function(t){t.preventDefault(),pn.getOrCreateInstance(this).toggle()})),Xt(pn);const hn=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",mn=".sticky-top";class gn{constructor(){this._element=document.body}getWidth(){const t=document.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}hide(){const t=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,"paddingRight",(e=>e+t)),this._setElementAttributes(hn,"paddingRight",(e=>e+t)),this._setElementAttributes(mn,"marginRight",(e=>e-t))}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(t,e,n){const i=this.getWidth();this._applyManipulationCallback(t,(t=>{if(t!==this._element&&window.innerWidth>t.clientWidth+i)return;this._saveInitialAttribute(t,e);const r=window.getComputedStyle(t)[e];t.style[e]=`${n(Number.parseFloat(r))}px`}))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,"paddingRight"),this._resetElementAttributes(hn,"paddingRight"),this._resetElementAttributes(mn,"marginRight")}_saveInitialAttribute(t,e){const n=t.style[e];n&&ke.setDataAttribute(t,e,n)}_resetElementAttributes(t,e){this._applyManipulationCallback(t,(t=>{const n=ke.getDataAttribute(t,e);void 0===n?t.style.removeProperty(e):(ke.removeDataAttribute(t,e),t.style[e]=n)}))}_applyManipulationCallback(t,e){Ht(t)?e(t):Ee.find(t,this._element).forEach(e)}isOverflowing(){return this.getWidth()>0}}const vn={className:"modal-backdrop",isVisible:!0,isAnimated:!1,rootElement:"body",clickCallback:null},bn={className:"string",isVisible:"boolean",isAnimated:"boolean",rootElement:"(element|string)",clickCallback:"(function|null)"},yn="show",_n="mousedown.bs.backdrop";class wn{constructor(t){this._config=this._getConfig(t),this._isAppended=!1,this._element=null}show(t){this._config.isVisible?(this._append(),this._config.isAnimated&&$t(this._getElement()),this._getElement().classList.add(yn),this._emulateAnimation((()=>{Kt(t)}))):Kt(t)}hide(t){this._config.isVisible?(this._getElement().classList.remove(yn),this._emulateAnimation((()=>{this.dispose(),Kt(t)}))):Kt(t)}_getElement(){if(!this._element){const t=document.createElement("div");t.className=this._config.className,this._config.isAnimated&&t.classList.add("fade"),this._element=t}return this._element}_getConfig(t){return(t={...vn,..."object"==typeof t?t:{}}).rootElement=Rt(t.rootElement),qt("backdrop",t,bn),t}_append(){this._isAppended||(this._config.rootElement.append(this._getElement()),pe.on(this._getElement(),_n,(()=>{Kt(this._config.clickCallback)})),this._isAppended=!0)}dispose(){this._isAppended&&(pe.off(this._element,_n),this._element.remove(),this._isAppended=!1)}_emulateAnimation(t){Qt(t,this._getElement(),this._config.isAnimated)}}const xn={trapElement:null,autofocus:!0},kn={trapElement:"element",autofocus:"boolean"},En=".bs.focustrap",An="backward";class Tn{constructor(t){this._config=this._getConfig(t),this._isActive=!1,this._lastTabNavDirection=null}activate(){const{trapElement:t,autofocus:e}=this._config;this._isActive||(e&&t.focus(),pe.off(document,En),pe.on(document,"focusin.bs.focustrap",(t=>this._handleFocusin(t))),pe.on(document,"keydown.tab.bs.focustrap",(t=>this._handleKeydown(t))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,pe.off(document,En))}_handleFocusin(t){const{target:e}=t,{trapElement:n}=this._config;if(e===document||e===n||n.contains(e))return;const i=Ee.focusableChildren(n);0===i.length?n.focus():this._lastTabNavDirection===An?i[i.length-1].focus():i[0].focus()}_handleKeydown(t){"Tab"===t.key&&(this._lastTabNavDirection=t.shiftKey?An:"forward")}_getConfig(t){return t={...xn,..."object"==typeof t?t:{}},qt("focustrap",t,kn),t}}const Cn="modal",On="Escape",Sn={backdrop:!0,keyboard:!0,focus:!0},Nn={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Dn="hidden.bs.modal",Ln="show.bs.modal",jn="resize.bs.modal",Pn="click.dismiss.bs.modal",Mn="keydown.dismiss.bs.modal",In="mousedown.dismiss.bs.modal",Hn="modal-open",Rn="show",qn="modal-static";class zn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._dialog=Ee.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollBar=new gn}static get Default(){return Sn}static get NAME(){return Cn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||this._isTransitioning||pe.trigger(this._element,Ln,{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._isAnimated()&&(this._isTransitioning=!0),this._scrollBar.hide(),document.body.classList.add(Hn),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),pe.on(this._dialog,In,(()=>{pe.one(this._element,"mouseup.dismiss.bs.modal",(t=>{t.target===this._element&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(){if(!this._isShown||this._isTransitioning)return;if(pe.trigger(this._element,"hide.bs.modal").defaultPrevented)return;this._isShown=!1;const t=this._isAnimated();t&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),this._focustrap.deactivate(),this._element.classList.remove(Rn),pe.off(this._element,Pn),pe.off(this._dialog,In),this._queueCallback((()=>this._hideModal()),this._element,t)}dispose(){[window,this._dialog].forEach((t=>pe.off(t,".bs.modal"))),this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new wn({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Tn({trapElement:this._element})}_getConfig(t){return t={...Sn,...ke.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Cn,t,Nn),t}_showElement(t){const e=this._isAnimated(),n=Ee.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,n&&(n.scrollTop=0),e&&$t(this._element),this._element.classList.add(Rn),this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,pe.trigger(this._element,"shown.bs.modal",{relatedTarget:t})}),this._dialog,e)}_setEscapeEvent(){this._isShown?pe.on(this._element,Mn,(t=>{this._config.keyboard&&t.key===On?(t.preventDefault(),this.hide()):this._config.keyboard||t.key!==On||this._triggerBackdropTransition()})):pe.off(this._element,Mn)}_setResizeEvent(){this._isShown?pe.on(window,jn,(()=>this._adjustDialog())):pe.off(window,jn)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Hn),this._resetAdjustments(),this._scrollBar.reset(),pe.trigger(this._element,Dn)}))}_showBackdrop(t){pe.on(this._element,Pn,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&(!0===this._config.backdrop?this.hide():"static"===this._config.backdrop&&this._triggerBackdropTransition())})),this._backdrop.show(t)}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if(pe.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented)return;const{classList:t,scrollHeight:e,style:n}=this._element,i=e>document.documentElement.clientHeight;!i&&"hidden"===n.overflowY||t.contains(qn)||(i||(n.overflowY="hidden"),t.add(qn),this._queueCallback((()=>{t.remove(qn),i||this._queueCallback((()=>{n.overflowY=""}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight,e=this._scrollBar.getWidth(),n=e>0;(!n&&t&&!Vt()||n&&!t&&Vt())&&(this._element.style.paddingLeft=`${e}px`),(n&&!t&&!Vt()||!n&&t&&Vt())&&(this._element.style.paddingRight=`${e}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(t,e){return this.each((function(){const n=zn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===n[t])throw new TypeError(`No method named "${t}"`);n[t](e)}}))}}pe.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){const e=Mt(this);["A","AREA"].includes(this.tagName)&&t.preventDefault(),pe.one(e,Ln,(t=>{t.defaultPrevented||pe.one(e,Dn,(()=>{zt(this)&&this.focus()}))}));const n=Ee.findOne(".modal.show");n&&zn.getInstance(n).hide(),zn.getOrCreateInstance(e).toggle(this)})),ve(zn),Xt(zn);const Bn="offcanvas",Wn={backdrop:!0,keyboard:!0,scroll:!1},Fn={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},$n="show",Yn=".offcanvas.show",Un="hidden.bs.offcanvas";class Vn extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get NAME(){return Bn}static get Default(){return Wn}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){this._isShown||pe.trigger(this._element,"show.bs.offcanvas",{relatedTarget:t}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(new gn).hide(),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add($n),this._queueCallback((()=>{this._config.scroll||this._focustrap.activate(),pe.trigger(this._element,"shown.bs.offcanvas",{relatedTarget:t})}),this._element,!0))}hide(){this._isShown&&(pe.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.remove($n),this._backdrop.hide(),this._queueCallback((()=>{this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._element.style.visibility="hidden",this._config.scroll||(new gn).reset(),pe.trigger(this._element,Un)}),this._element,!0)))}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_getConfig(t){return t={...Wn,...ke.getDataAttributes(this._element),..."object"==typeof t?t:{}},qt(Bn,t,Fn),t}_initializeBackDrop(){return new wn({className:"offcanvas-backdrop",isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:()=>this.hide()})}_initializeFocusTrap(){return new Tn({trapElement:this._element})}_addEventListeners(){pe.on(this._element,"keydown.dismiss.bs.offcanvas",(t=>{this._config.keyboard&&"Escape"===t.key&&this.hide()}))}static jQueryInterface(t){return this.each((function(){const e=Vn.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t]||t.startsWith("_")||"constructor"===t)throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}pe.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(t){const e=Mt(this);if(["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this))return;pe.one(e,Un,(()=>{zt(this)&&this.focus()}));const n=Ee.findOne(Yn);n&&n!==e&&Vn.getInstance(n).hide(),Vn.getOrCreateInstance(e).toggle(this)})),pe.on(window,"load.bs.offcanvas.data-api",(()=>Ee.find(Yn).forEach((t=>Vn.getOrCreateInstance(t).show())))),ve(Vn),Xt(Vn);const Xn=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),Kn=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,Qn=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,Gn=(t,e)=>{const n=t.nodeName.toLowerCase();if(e.includes(n))return!Xn.has(n)||Boolean(Kn.test(t.nodeValue)||Qn.test(t.nodeValue));const i=e.filter((t=>t instanceof RegExp));for(let t=0,e=i.length;t<e;t++)if(i[t].test(n))return!0;return!1};function Jn(t,e,n){if(!t.length)return t;if(n&&"function"==typeof n)return n(t);const i=(new window.DOMParser).parseFromString(t,"text/html"),r=[].concat(...i.body.querySelectorAll("*"));for(let t=0,n=r.length;t<n;t++){const n=r[t],i=n.nodeName.toLowerCase();if(!Object.keys(e).includes(i)){n.remove();continue}const o=[].concat(...n.attributes),a=[].concat(e["*"]||[],e[i]||[]);o.forEach((t=>{Gn(t,a)||n.removeAttribute(t.nodeName)}))}return i.body.innerHTML}const Zn="tooltip",ti=new Set(["sanitize","allowList","sanitizeFn"]),ei={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},ni={AUTO:"auto",TOP:"top",RIGHT:Vt()?"left":"right",BOTTOM:"bottom",LEFT:Vt()?"right":"left"},ii={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},ri={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},oi="fade",ai="show",si="show",li="out",ci=".tooltip-inner",ui=".modal",fi="hide.bs.modal",di="hover",pi="focus";class hi extends ge{constructor(t,e){if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(t),this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this._config=this._getConfig(e),this.tip=null,this._setListeners()}static get Default(){return ii}static get NAME(){return Zn}static get Event(){return ri}static get DefaultType(){return ei}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this._initializeOnDelegatedTarget(t);e._activeTrigger.click=!e._activeTrigger.click,e._isWithActiveTrigger()?e._enter(null,e):e._leave(null,e)}else{if(this.getTipElement().classList.contains(ai))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),pe.off(this._element.closest(ui),fi,this._hideModalHandler),this.tip&&this.tip.remove(),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this.isWithContent()||!this._isEnabled)return;const t=pe.trigger(this._element,this.constructor.Event.SHOW),e=Wt(this._element),n=null===e?this._element.ownerDocument.documentElement.contains(this._element):e.contains(this._element);if(t.defaultPrevented||!n)return;"tooltip"===this.constructor.NAME&&this.tip&&this.getTitle()!==this.tip.querySelector(ci).innerHTML&&(this._disposePopper(),this.tip.remove(),this.tip=null);const i=this.getTipElement(),r=(t=>{do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t})(this.constructor.NAME);i.setAttribute("id",r),this._element.setAttribute("aria-describedby",r),this._config.animation&&i.classList.add(oi);const o="function"==typeof this._config.placement?this._config.placement.call(this,i,this._element):this._config.placement,a=this._getAttachment(o);this._addAttachmentClass(a);const{container:s}=this._config;me.set(i,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(s.append(i),pe.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=Nt(this._element,i,this._getPopperConfig(a)),i.classList.add(ai);const l=this._resolvePossibleFunction(this._config.customClass);l&&i.classList.add(...l.split(" ")),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>{pe.on(t,"mouseover",Ft)}));const c=this.tip.classList.contains(oi);this._queueCallback((()=>{const t=this._hoverState;this._hoverState=null,pe.trigger(this._element,this.constructor.Event.SHOWN),t===li&&this._leave(null,this)}),this.tip,c)}hide(){if(!this._popper)return;const t=this.getTipElement();if(pe.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented)return;t.classList.remove(ai),"ontouchstart"in document.documentElement&&[].concat(...document.body.children).forEach((t=>pe.off(t,"mouseover",Ft))),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;const e=this.tip.classList.contains(oi);this._queueCallback((()=>{this._isWithActiveTrigger()||(this._hoverState!==si&&t.remove(),this._cleanTipClass(),this._element.removeAttribute("aria-describedby"),pe.trigger(this._element,this.constructor.Event.HIDDEN),this._disposePopper())}),this.tip,e),this._hoverState=""}update(){null!==this._popper&&this._popper.update()}isWithContent(){return Boolean(this.getTitle())}getTipElement(){if(this.tip)return this.tip;const t=document.createElement("div");t.innerHTML=this._config.template;const e=t.children[0];return this.setContent(e),e.classList.remove(oi,ai),this.tip=e,this.tip}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),ci)}_sanitizeAndSetContent(t,e,n){const i=Ee.findOne(n,t);e||!i?this.setElementContent(i,e):i.remove()}setElementContent(t,e){if(null!==t)return Ht(e)?(e=Rt(e),void(this._config.html?e.parentNode!==t&&(t.innerHTML="",t.append(e)):t.textContent=e.textContent)):void(this._config.html?(this._config.sanitize&&(e=Jn(e,this._config.allowList,this._config.sanitizeFn)),t.innerHTML=e):t.textContent=e)}getTitle(){const t=this._element.getAttribute("data-bs-original-title")||this._config.title;return this._resolvePossibleFunction(t)}updateAttachment(t){return"right"===t?"end":"left"===t?"start":t}_initializeOnDelegatedTarget(t,e){return e||this.constructor.getOrCreateInstance(t.delegateTarget,this._getDelegateConfig())}_getOffset(){const{offset:t}=this._config;return"string"==typeof t?t.split(",").map((t=>Number.parseInt(t,10))):"function"==typeof t?e=>t(e,this._element):t}_resolvePossibleFunction(t){return"function"==typeof t?t.call(this._element):t}_getPopperConfig(t){const e={placement:t,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:t=>this._handlePopperPlacementChange(t)}],onFirstUpdate:t=>{t.options.placement!==t.placement&&this._handlePopperPlacementChange(t)}};return{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_addAttachmentClass(t){this.getTipElement().classList.add(`${this._getBasicClassPrefix()}-${this.updateAttachment(t)}`)}_getAttachment(t){return ni[t.toUpperCase()]}_setListeners(){this._config.trigger.split(" ").forEach((t=>{if("click"===t)pe.on(this._element,this.constructor.Event.CLICK,this._config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===di?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,n=t===di?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;pe.on(this._element,e,this._config.selector,(t=>this._enter(t))),pe.on(this._element,n,this._config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this._element&&this.hide()},pe.on(this._element.closest(ui),fi,this._hideModalHandler),this._config.selector?this._config={...this._config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))}_enter(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusin"===t.type?pi:di]=!0),e.getTipElement().classList.contains(ai)||e._hoverState===si?e._hoverState=si:(clearTimeout(e._timeout),e._hoverState=si,e._config.delay&&e._config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===si&&e.show()}),e._config.delay.show):e.show())}_leave(t,e){e=this._initializeOnDelegatedTarget(t,e),t&&(e._activeTrigger["focusout"===t.type?pi:di]=e._element.contains(t.relatedTarget)),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=li,e._config.delay&&e._config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===li&&e.hide()}),e._config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=ke.getDataAttributes(this._element);return Object.keys(e).forEach((t=>{ti.has(t)&&delete e[t]})),(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).container=!1===t.container?document.body:Rt(t.container),"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),qt(Zn,t,this.constructor.DefaultType),t.sanitize&&(t.template=Jn(t.template,t.allowList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};for(const e in this._config)this.constructor.Default[e]!==this._config[e]&&(t[e]=this._config[e]);return t}_cleanTipClass(){const t=this.getTipElement(),e=new RegExp(`(^|\\s)${this._getBasicClassPrefix()}\\S+`,"g"),n=t.getAttribute("class").match(e);null!==n&&n.length>0&&n.map((t=>t.trim())).forEach((e=>t.classList.remove(e)))}_getBasicClassPrefix(){return"bs-tooltip"}_handlePopperPlacementChange(t){const{state:e}=t;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null)}static jQueryInterface(t){return this.each((function(){const e=hi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Xt(hi);const mi={...hi.Default,placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},gi={...hi.DefaultType,content:"(string|element|function)"},vi={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class bi extends hi{static get Default(){return mi}static get NAME(){return"popover"}static get Event(){return vi}static get DefaultType(){return gi}isWithContent(){return this.getTitle()||this._getContent()}setContent(t){this._sanitizeAndSetContent(t,this.getTitle(),".popover-header"),this._sanitizeAndSetContent(t,this._getContent(),".popover-body")}_getContent(){return this._resolvePossibleFunction(this._config.content)}_getBasicClassPrefix(){return"bs-popover"}static jQueryInterface(t){return this.each((function(){const e=bi.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}Xt(bi);const yi="scrollspy",_i={offset:10,method:"auto",target:""},wi={offset:"number",method:"string",target:"(string|element)"},xi="active",ki=".nav-link, .list-group-item, .dropdown-item",Ei="position";class Ai extends ge{constructor(t,e){super(t),this._scrollElement="BODY"===this._element.tagName?window:this._element,this._config=this._getConfig(e),this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,pe.on(this._scrollElement,"scroll.bs.scrollspy",(()=>this._process())),this.refresh(),this._process()}static get Default(){return _i}static get NAME(){return yi}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":Ei,e="auto"===this._config.method?t:this._config.method,n=e===Ei?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),Ee.find(ki,this._config.target).map((t=>{const i=Pt(t),r=i?Ee.findOne(i):null;if(r){const t=r.getBoundingClientRect();if(t.width||t.height)return[ke[e](r).top+n,i]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){pe.off(this._scrollElement,".bs.scrollspy"),super.dispose()}_getConfig(t){return(t={..._i,...ke.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}}).target=Rt(t.target)||document.documentElement,qt(yi,t,wi),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=ki.split(",").map((e=>`${e}[data-bs-target="${t}"],${e}[href="${t}"]`)),n=Ee.findOne(e.join(","),this._config.target);n.classList.add(xi),n.classList.contains("dropdown-item")?Ee.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add(xi):Ee.parents(n,".nav, .list-group").forEach((t=>{Ee.prev(t,".nav-link, .list-group-item").forEach((t=>t.classList.add(xi))),Ee.prev(t,".nav-item").forEach((t=>{Ee.children(t,".nav-link").forEach((t=>t.classList.add(xi)))}))})),pe.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})}_clear(){Ee.find(ki,this._config.target).filter((t=>t.classList.contains(xi))).forEach((t=>t.classList.remove(xi)))}static jQueryInterface(t){return this.each((function(){const e=Ai.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}pe.on(window,"load.bs.scrollspy.data-api",(()=>{Ee.find('[data-bs-spy="scroll"]').forEach((t=>new Ai(t)))})),Xt(Ai);const Ti="active",Ci="fade",Oi="show",Si=".active",Ni=":scope > li > .active";class Di extends ge{static get NAME(){return"tab"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(Ti))return;let t;const e=Mt(this._element),n=this._element.closest(".nav, .list-group");if(n){const e="UL"===n.nodeName||"OL"===n.nodeName?Ni:Si;t=Ee.find(e,n),t=t[t.length-1]}const i=t?pe.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(pe.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)return;this._activate(this._element,n);const r=()=>{pe.trigger(t,"hidden.bs.tab",{relatedTarget:this._element}),pe.trigger(this._element,"shown.bs.tab",{relatedTarget:t})};e?this._activate(e,e.parentNode,r):r()}_activate(t,e,n){const i=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?Ee.children(e,Si):Ee.find(Ni,e))[0],r=n&&i&&i.classList.contains(Ci),o=()=>this._transitionComplete(t,i,n);i&&r?(i.classList.remove(Oi),this._queueCallback(o,t,!0)):o()}_transitionComplete(t,e,n){if(e){e.classList.remove(Ti);const t=Ee.findOne(":scope > .dropdown-menu .active",e.parentNode);t&&t.classList.remove(Ti),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}t.classList.add(Ti),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),$t(t),t.classList.contains(Ci)&&t.classList.add(Oi);let i=t.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){const e=t.closest(".dropdown");e&&Ee.find(".dropdown-toggle",e).forEach((t=>t.classList.add(Ti))),t.setAttribute("aria-expanded",!0)}n&&n()}static jQueryInterface(t){return this.each((function(){const e=Di.getOrCreateInstance(this);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}pe.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){["A","AREA"].includes(this.tagName)&&t.preventDefault(),Bt(this)||Di.getOrCreateInstance(this).show()})),Xt(Di);const Li="toast",ji="hide",Pi="show",Mi="showing",Ii={animation:"boolean",autohide:"boolean",delay:"number"},Hi={animation:!0,autohide:!0,delay:5e3};class Ri extends ge{constructor(t,e){super(t),this._config=this._getConfig(e),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get DefaultType(){return Ii}static get Default(){return Hi}static get NAME(){return Li}show(){pe.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove(ji),$t(this._element),this._element.classList.add(Pi),this._element.classList.add(Mi),this._queueCallback((()=>{this._element.classList.remove(Mi),pe.trigger(this._element,"shown.bs.toast"),this._maybeScheduleHide()}),this._element,this._config.animation))}hide(){this._element.classList.contains(Pi)&&(pe.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.add(Mi),this._queueCallback((()=>{this._element.classList.add(ji),this._element.classList.remove(Mi),this._element.classList.remove(Pi),pe.trigger(this._element,"hidden.bs.toast")}),this._element,this._config.animation)))}dispose(){this._clearTimeout(),this._element.classList.contains(Pi)&&this._element.classList.remove(Pi),super.dispose()}_getConfig(t){return t={...Hi,...ke.getDataAttributes(this._element),..."object"==typeof t&&t?t:{}},qt(Li,t,this.constructor.DefaultType),t}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(t,e){switch(t.type){case"mouseover":case"mouseout":this._hasMouseInteraction=e;break;case"focusin":case"focusout":this._hasKeyboardInteraction=e}if(e)return void this._clearTimeout();const n=t.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}_setListeners(){pe.on(this._element,"mouseover.bs.toast",(t=>this._onInteraction(t,!0))),pe.on(this._element,"mouseout.bs.toast",(t=>this._onInteraction(t,!1))),pe.on(this._element,"focusin.bs.toast",(t=>this._onInteraction(t,!0))),pe.on(this._element,"focusout.bs.toast",(t=>this._onInteraction(t,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(t){return this.each((function(){const e=Ri.getOrCreateInstance(this,t);if("string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t](this)}}))}}ve(Ri),Xt(Ri)},755:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(i,r){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},c=o.push,u=o.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h=p.toString,m=h.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},b=function(t){return null!=t&&t===t.window},y=i.document,_={type:!0,src:!0,nonce:!0,noModule:!0};function w(t,e,n){var i,r,o=(n=n||y).createElement("script");if(o.text=t,e)for(i in _)(r=e[i]||e.getAttribute&&e.getAttribute(i))&&o.setAttribute(i,r);n.head.appendChild(o).parentNode.removeChild(o)}function x(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?f[d.call(t)]||"object":typeof t}var k="3.6.0",E=function(t,e){return new E.fn.init(t,e)};function A(t){var e=!!t&&"length"in t&&t.length,n=x(t);return!v(t)&&!b(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}E.fn=E.prototype={jquery:k,constructor:E,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=E.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return E.each(this,t)},map:function(t){return this.pushStack(E.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var t,e,n,i,r,o,a=arguments[0]||{},s=1,l=arguments.length,c=!1;for("boolean"==typeof a&&(c=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(e in t)i=t[e],"__proto__"!==e&&a!==i&&(c&&i&&(E.isPlainObject(i)||(r=Array.isArray(i)))?(n=a[e],o=r&&!Array.isArray(n)?[]:r||E.isPlainObject(n)?n:{},r=!1,a[e]=E.extend(c,o,i)):void 0!==i&&(a[e]=i));return a},E.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==d.call(t)||(e=a(t))&&("function"!=typeof(n=p.call(e,"constructor")&&e.constructor)||h.call(n)!==m))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){w(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,i=0;if(A(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(A(Object(t))?E.merge(n,"string"==typeof t?[t]:t):c.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:u.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,o=t.length,a=!n;r<o;r++)!e(t[r],r)!==a&&i.push(t[r]);return i},map:function(t,e,n){var i,r,o=0,a=[];if(A(t))for(i=t.length;o<i;o++)null!=(r=e(t[o],o,n))&&a.push(r);else for(o in t)null!=(r=e(t[o],o,n))&&a.push(r);return l(a)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){f["[object "+e+"]"]=e.toLowerCase()}));var T=function(t){var e,n,i,r,o,a,s,l,c,u,f,d,p,h,m,g,v,b,y,_="sizzle"+1*new Date,w=t.document,x=0,k=0,E=lt(),A=lt(),T=lt(),C=lt(),O=function(t,e){return t===e&&(f=!0),0},S={}.hasOwnProperty,N=[],D=N.pop,L=N.push,j=N.push,P=N.slice,M=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",R="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",q="\\[[\\x20\\t\\r\\n\\f]*("+R+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+R+"))|)"+H+"*\\]",z=":("+R+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+q+")*)|.*)\\)|)",B=new RegExp(H+"+","g"),W=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),F=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),$=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),Y=new RegExp(H+"|>"),U=new RegExp(z),V=new RegExp("^"+R+"$"),X={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+q),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},it=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,rt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){d()},at=_t((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(N=P.call(w.childNodes),w.childNodes),N[w.childNodes.length].nodeType}catch(t){j={apply:N.length?function(t,e){L.apply(t,P.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function st(t,e,i,r){var o,s,c,u,f,h,v,b=e&&e.ownerDocument,w=e?e.nodeType:9;if(i=i||[],"string"!=typeof t||!t||1!==w&&9!==w&&11!==w)return i;if(!r&&(d(e),e=e||p,m)){if(11!==w&&(f=Z.exec(t)))if(o=f[1]){if(9===w){if(!(c=e.getElementById(o)))return i;if(c.id===o)return i.push(c),i}else if(b&&(c=b.getElementById(o))&&y(e,c)&&c.id===o)return i.push(c),i}else{if(f[2])return j.apply(i,e.getElementsByTagName(t)),i;if((o=f[3])&&n.getElementsByClassName&&e.getElementsByClassName)return j.apply(i,e.getElementsByClassName(o)),i}if(n.qsa&&!C[t+" "]&&(!g||!g.test(t))&&(1!==w||"object"!==e.nodeName.toLowerCase())){if(v=t,b=e,1===w&&(Y.test(t)||$.test(t))){for((b=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((u=e.getAttribute("id"))?u=u.replace(it,rt):e.setAttribute("id",u=_)),s=(h=a(t)).length;s--;)h[s]=(u?"#"+u:":scope")+" "+yt(h[s]);v=h.join(",")}try{return j.apply(i,b.querySelectorAll(v)),i}catch(e){C(t,!0)}finally{u===_&&e.removeAttribute("id")}}}return l(t.replace(W,"$1"),e,i,r)}function lt(){var t=[];return function e(n,r){return t.push(n+" ")>i.cacheLength&&delete e[t.shift()],e[n+" "]=r}}function ct(t){return t[_]=!0,t}function ut(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ft(t,e){for(var n=t.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=e}function dt(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function ht(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function mt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return ct((function(e){return e=+e,ct((function(n,i){for(var r,o=t([],n.length,e),a=o.length;a--;)n[r=o[a]]&&(n[r]=!(i[r]=n[r]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},o=st.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!K.test(e||n&&n.nodeName||"HTML")},d=st.setDocument=function(t){var e,r,a=t?t.ownerDocument||t:w;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!o(p),w!=p&&(r=p.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ot,!1):r.attachEvent&&r.attachEvent("onunload",ot)),n.scope=ut((function(t){return h.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),n.attributes=ut((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ut((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ut((function(t){return h.appendChild(t).id=_,!p.getElementsByName||!p.getElementsByName(_).length})),n.getById?(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n=e.getElementById(t);return n?[n]:[]}}):(i.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},i.find.ID=function(t,e){if(void 0!==e.getElementById&&m){var n,i,r,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(r=e.getElementsByName(t),i=0;o=r[i++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),i.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},i.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&m)return e.getElementsByClassName(t)},v=[],g=[],(n.qsa=J.test(p.querySelectorAll))&&(ut((function(t){var e;h.appendChild(t).innerHTML="<a id='"+_+"'></a><select id='"+_+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+I+")"),t.querySelectorAll("[id~="+_+"-]").length||g.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+_+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ut((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),h.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(b=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ut((function(t){n.disconnectedMatch=b.call(t,"*"),b.call(t,"[s!='']:x"),v.push("!=",z)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(h.compareDocumentPosition),y=e||J.test(h.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},O=e?function(t,e){if(t===e)return f=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===i?t==p||t.ownerDocument==w&&y(w,t)?-1:e==p||e.ownerDocument==w&&y(w,e)?1:u?M(u,t)-M(u,e):0:4&i?-1:1)}:function(t,e){if(t===e)return f=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!r||!o)return t==p?-1:e==p?1:r?-1:o?1:u?M(u,t)-M(u,e):0;if(r===o)return dt(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?dt(a[i],s[i]):a[i]==w?-1:s[i]==w?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if(d(t),n.matchesSelector&&m&&!C[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var i=b.call(t,e);if(i||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){C(e,!0)}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!=p&&d(t),y(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!=p&&d(t);var r=i.attrHandle[e.toLowerCase()],o=r&&S.call(i.attrHandle,e.toLowerCase())?r(t,e,!m):void 0;return void 0!==o?o:n.attributes||!m?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(it,rt)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,i=[],r=0,o=0;if(f=!n.detectDuplicates,u=!n.sortStable&&t.slice(0),t.sort(O),f){for(;e=t[o++];)e===t[o]&&(r=i.push(o));for(;r--;)t.splice(i[r],1)}return u=null,t},r=st.getText=function(t){var e,n="",i=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=r(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[i++];)n+=r(e);return n},i=st.selectors={cacheLength:50,createPseudo:ct,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return X.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&U.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=E[t+" "];return e||(e=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+t+"("+H+"|$)"))&&E(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(i){var r=st.attr(i,t);return null==r?"!="===e:!e||(r+="","="===e?r===n:"!="===e?r!==n:"^="===e?n&&0===r.indexOf(n):"*="===e?n&&r.indexOf(n)>-1:"$="===e?n&&r.slice(-n.length)===n:"~="===e?(" "+r.replace(B," ")+" ").indexOf(n)>-1:"|="===e&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var c,u,f,d,p,h,m=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),b=!l&&!s,y=!1;if(g){if(o){for(;m;){for(d=e;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===t&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&b){for(y=(p=(c=(u=(f=(d=g)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]||[])[0]===x&&c[1])&&c[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(y=p=0)||h.pop();)if(1===d.nodeType&&++y&&d===e){u[t]=[x,p,y];break}}else if(b&&(y=p=(c=(u=(f=(d=e)[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]||[])[0]===x&&c[1]),!1===y)for(;(d=++p&&d&&d[m]||(y=p=0)||h.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++y||(b&&((u=(f=d[_]||(d[_]={}))[d.uniqueID]||(f[d.uniqueID]={}))[t]=[x,y]),d!==e)););return(y-=r)===i||y%i==0&&y/i>=0}}},PSEUDO:function(t,e){var n,r=i.pseudos[t]||i.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return r[_]?r(e):r.length>1?(n=[t,t,"",e],i.setFilters.hasOwnProperty(t.toLowerCase())?ct((function(t,n){for(var i,o=r(t,e),a=o.length;a--;)t[i=M(t,o[a])]=!(n[i]=o[a])})):function(t){return r(t,0,n)}):r}},pseudos:{not:ct((function(t){var e=[],n=[],i=s(t.replace(W,"$1"));return i[_]?ct((function(t,e,n,r){for(var o,a=i(t,null,r,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,r,o){return e[0]=t,i(e,null,o,n),e[0]=null,!n.pop()}})),has:ct((function(t){return function(e){return st(t,e).length>0}})),contains:ct((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||r(e)).indexOf(t)>-1}})),lang:ct((function(t){return V.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=m?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===h},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!i.pseudos.empty(t)},header:function(t){return G.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,n){return[n<0?n+e:n]})),even:gt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:gt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:gt((function(t,e,n){for(var i=n<0?n+e:n>e?e:n;--i>=0;)t.push(i);return t})),gt:gt((function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t}))}},i.pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})i.pseudos[e]=ht(e);function bt(){}function yt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function _t(t,e,n){var i=e.dir,r=e.next,o=r||i,a=n&&"parentNode"===o,s=k++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||a)return t(e,n,r);return!1}:function(e,n,l){var c,u,f,d=[x,s];if(l){for(;e=e[i];)if((1===e.nodeType||a)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||a)if(u=(f=e[_]||(e[_]={}))[e.uniqueID]||(f[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((c=u[o])&&c[0]===x&&c[1]===s)return d[2]=c[2];if(u[o]=d,d[2]=t(e,n,l))return!0}return!1}}function wt(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function xt(t,e,n,i,r){for(var o,a=[],s=0,l=t.length,c=null!=e;s<l;s++)(o=t[s])&&(n&&!n(o,i,r)||(a.push(o),c&&e.push(s)));return a}function kt(t,e,n,i,r,o){return i&&!i[_]&&(i=kt(i)),r&&!r[_]&&(r=kt(r,o)),ct((function(o,a,s,l){var c,u,f,d=[],p=[],h=a.length,m=o||function(t,e,n){for(var i=0,r=e.length;i<r;i++)st(t,e[i],n);return n}(e||"*",s.nodeType?[s]:s,[]),g=!t||!o&&e?m:xt(m,d,t,s,l),v=n?r||(o?t:h||i)?[]:a:g;if(n&&n(g,v,s,l),i)for(c=xt(v,p),i(c,[],s,l),u=c.length;u--;)(f=c[u])&&(v[p[u]]=!(g[p[u]]=f));if(o){if(r||t){if(r){for(c=[],u=v.length;u--;)(f=v[u])&&c.push(g[u]=f);r(null,v=[],c,l)}for(u=v.length;u--;)(f=v[u])&&(c=r?M(o,f):d[u])>-1&&(o[c]=!(a[c]=f))}}else v=xt(v===a?v.splice(h,v.length):v),r?r(null,a,v,l):j.apply(a,v)}))}function Et(t){for(var e,n,r,o=t.length,a=i.relative[t[0].type],s=a||i.relative[" "],l=a?1:0,u=_t((function(t){return t===e}),s,!0),f=_t((function(t){return M(e,t)>-1}),s,!0),d=[function(t,n,i){var r=!a&&(i||n!==c)||((e=n).nodeType?u(t,n,i):f(t,n,i));return e=null,r}];l<o;l++)if(n=i.relative[t[l].type])d=[_t(wt(d),n)];else{if((n=i.filter[t[l].type].apply(null,t[l].matches))[_]){for(r=++l;r<o&&!i.relative[t[r].type];r++);return kt(l>1&&wt(d),l>1&&yt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(W,"$1"),n,l<r&&Et(t.slice(l,r)),r<o&&Et(t=t.slice(r)),r<o&&yt(t))}d.push(n)}return wt(d)}return bt.prototype=i.filters=i.pseudos,i.setFilters=new bt,a=st.tokenize=function(t,e){var n,r,o,a,s,l,c,u=A[t+" "];if(u)return e?0:u.slice(0);for(s=t,l=[],c=i.preFilter;s;){for(a in n&&!(r=F.exec(s))||(r&&(s=s.slice(r[0].length)||s),l.push(o=[])),n=!1,(r=$.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(W," ")}),s=s.slice(n.length)),i.filter)!(r=X[a].exec(s))||c[a]&&!(r=c[a](r))||(n=r.shift(),o.push({value:n,type:a,matches:r}),s=s.slice(n.length));if(!n)break}return e?s.length:s?st.error(t):A(t,l).slice(0)},s=st.compile=function(t,e){var n,r=[],o=[],s=T[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=Et(e[n]))[_]?r.push(s):o.push(s);s=T(t,function(t,e){var n=e.length>0,r=t.length>0,o=function(o,a,s,l,u){var f,h,g,v=0,b="0",y=o&&[],_=[],w=c,k=o||r&&i.find.TAG("*",u),E=x+=null==w?1:Math.random()||.1,A=k.length;for(u&&(c=a==p||a||u);b!==A&&null!=(f=k[b]);b++){if(r&&f){for(h=0,a||f.ownerDocument==p||(d(f),s=!m);g=t[h++];)if(g(f,a||p,s)){l.push(f);break}u&&(x=E)}n&&((f=!g&&f)&&v--,o&&y.push(f))}if(v+=b,n&&b!==v){for(h=0;g=e[h++];)g(y,_,a,s);if(o){if(v>0)for(;b--;)y[b]||_[b]||(_[b]=D.call(l));_=xt(_)}j.apply(l,_),u&&!o&&_.length>0&&v+e.length>1&&st.uniqueSort(l)}return u&&(x=E,c=w),y};return n?ct(o):o}(o,r)),s.selector=t}return s},l=st.select=function(t,e,n,r){var o,l,c,u,f,d="function"==typeof t&&t,p=!r&&a(t=d.selector||t);if(n=n||[],1===p.length){if((l=p[0]=p[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===e.nodeType&&m&&i.relative[l[1].type]){if(!(e=(i.find.ID(c.matches[0].replace(et,nt),e)||[])[0]))return n;d&&(e=e.parentNode),t=t.slice(l.shift().value.length)}for(o=X.needsContext.test(t)?0:l.length;o--&&(c=l[o],!i.relative[u=c.type]);)if((f=i.find[u])&&(r=f(c.matches[0].replace(et,nt),tt.test(l[0].type)&&vt(e.parentNode)||e))){if(l.splice(o,1),!(t=r.length&&yt(l)))return j.apply(n,r),n;break}}return(d||s(t,p))(r,e,!m,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=_.split("").sort(O).join("")===_,n.detectDuplicates=!!f,d(),n.sortDetached=ut((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ut((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ft("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ut((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ft("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ut((function(t){return null==t.getAttribute("disabled")}))||ft(I,(function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null})),st}(i);E.find=T,E.expr=T.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=T.uniqueSort,E.text=T.getText,E.isXMLDoc=T.isXML,E.contains=T.contains,E.escapeSelector=T.escape;var C=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&E(t).is(n))break;i.push(t)}return i},O=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},S=E.expr.match.needsContext;function N(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function L(t,e,n){return v(e)?E.grep(t,(function(t,i){return!!e.call(t,i,t)!==n})):e.nodeType?E.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?E.grep(t,(function(t){return u.call(e,t)>-1!==n})):E.filter(e,t,n)}E.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?E.find.matchesSelector(i,t)?[i]:[]:E.find.matches(t,E.grep(e,(function(t){return 1===t.nodeType})))},E.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(E(t).filter((function(){for(e=0;e<i;e++)if(E.contains(r[e],this))return!0})));for(n=this.pushStack([]),e=0;e<i;e++)E.find(t,r[e],n);return i>1?E.uniqueSort(n):n},filter:function(t){return this.pushStack(L(this,t||[],!1))},not:function(t){return this.pushStack(L(this,t||[],!0))},is:function(t){return!!L(this,"string"==typeof t&&S.test(t)?E(t):t||[],!1).length}});var j,P=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||j,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:P.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof E?e[0]:e,E.merge(this,E.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:y,!0)),D.test(i[1])&&E.isPlainObject(e))for(i in e)v(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=y.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(E):E.makeArray(t,this)}).prototype=E.fn,j=E(y);var M=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function H(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}E.fn.extend({has:function(t){var e=E(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(E.contains(this,e[t]))return!0}))},closest:function(t,e){var n,i=0,r=this.length,o=[],a="string"!=typeof t&&E(t);if(!S.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?u.call(E(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),E.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,n){return C(t,"parentNode",n)},next:function(t){return H(t,"nextSibling")},prev:function(t){return H(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,n){return C(t,"nextSibling",n)},prevUntil:function(t,e,n){return C(t,"previousSibling",n)},siblings:function(t){return O((t.parentNode||{}).firstChild,t)},children:function(t){return O(t.firstChild)},contents:function(t){return null!=t.contentDocument&&a(t.contentDocument)?t.contentDocument:(N(t,"template")&&(t=t.content||t),E.merge([],t.childNodes))}},(function(t,e){E.fn[t]=function(n,i){var r=E.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=E.filter(i,r)),this.length>1&&(I[t]||E.uniqueSort(r),M.test(t)&&r.reverse()),this.pushStack(r)}}));var R=/[^\x20\t\r\n\f]+/g;function q(t){return t}function z(t){throw t}function B(t,e,n,i){var r;try{t&&v(r=t.promise)?r.call(t).done(e).fail(n):t&&v(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}E.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return E.each(t.match(R)||[],(function(t,n){e[n]=!0})),e}(t):E.extend({},t);var e,n,i,r,o=[],a=[],s=-1,l=function(){for(r=r||t.once,i=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},c={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){E.each(n,(function(n,i){v(i)?t.unique&&c.has(i)||o.push(i):i&&i.length&&"string"!==x(i)&&e(i)}))}(arguments),n&&!e&&l()),this},remove:function(){return E.each(arguments,(function(t,e){for(var n;(n=E.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?E.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=a=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!i}};return c},E.extend({Deferred:function(t){var e=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var t=arguments;return E.Deferred((function(n){E.each(e,(function(e,i){var r=v(t[i[4]])&&t[i[4]];o[i[1]]((function(){var t=r&&r.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,r){var o=0;function a(t,e,n,r){return function(){var s=this,l=arguments,c=function(){var i,c;if(!(t<o)){if((i=n.apply(s,l))===e.promise())throw new TypeError("Thenable self-resolution");c=i&&("object"==typeof i||"function"==typeof i)&&i.then,v(c)?r?c.call(i,a(o,e,q,r),a(o,e,z,r)):(o++,c.call(i,a(o,e,q,r),a(o,e,z,r),a(o,e,q,e.notifyWith))):(n!==q&&(s=void 0,l=[i]),(r||e.resolveWith)(s,l))}},u=r?c:function(){try{c()}catch(i){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(i,u.stackTrace),t+1>=o&&(n!==z&&(s=void 0,l=[i]),e.rejectWith(s,l))}};t?u():(E.Deferred.getStackHook&&(u.stackTrace=E.Deferred.getStackHook()),i.setTimeout(u))}}return E.Deferred((function(i){e[0][3].add(a(0,i,v(r)?r:q,i.notifyWith)),e[1][3].add(a(0,i,v(t)?t:q)),e[2][3].add(a(0,i,v(n)?n:z))})).promise()},promise:function(t){return null!=t?E.extend(t,r):r}},o={};return E.each(e,(function(t,i){var a=i[2],s=i[5];r[i[1]]=a.add,s&&a.add((function(){n=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(i[3].fire),o[i[0]]=function(){return o[i[0]+"With"](this===o?void 0:this,arguments),this},o[i[0]+"With"]=a.fireWith})),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=s.call(arguments),o=E.Deferred(),a=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?s.call(arguments):n,--e||o.resolveWith(i,r)}};if(e<=1&&(B(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||v(r[n]&&r[n].then)))return o.then();for(;n--;)B(r[n],a(n),o.reject);return o.promise()}});var W=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(t,e){i.console&&i.console.warn&&t&&W.test(t.name)&&i.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},E.readyException=function(t){i.setTimeout((function(){throw t}))};var F=E.Deferred();function $(){y.removeEventListener("DOMContentLoaded",$),i.removeEventListener("load",$),E.ready()}E.fn.ready=function(t){return F.then(t).catch((function(t){E.readyException(t)})),this},E.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==t&&--E.readyWait>0||F.resolveWith(y,[E]))}}),E.ready.then=F.then,"complete"===y.readyState||"loading"!==y.readyState&&!y.documentElement.doScroll?i.setTimeout(E.ready):(y.addEventListener("DOMContentLoaded",$),i.addEventListener("load",$));var Y=function(t,e,n,i,r,o,a){var s=0,l=t.length,c=null==n;if("object"===x(n))for(s in r=!0,n)Y(t,e,s,n[s],!0,o,a);else if(void 0!==i&&(r=!0,v(i)||(a=!0),c&&(a?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(E(t),n)})),e))for(;s<l;s++)e(t[s],n,a?i:i.call(t[s],s,e(t[s],n)));return r?t:c?e.call(t):l?e(t[0],n):o},U=/^-ms-/,V=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function K(t){return t.replace(U,"ms-").replace(V,X)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function G(){this.expando=E.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[K(e)]=n;else for(i in e)r[K(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(K):(e=K(e))in i?[e]:e.match(R)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||E.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!E.isEmptyObject(e)}};var J=new G,Z=new G,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}E.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),E.fn.extend({data:function(t,e){var n,i,r,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(r=Z.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(i=a[n].name).indexOf("data-")&&(i=K(i.slice(5)),nt(o,i,r[i]));J.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each((function(){Z.set(this,t)})):Y(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=Z.get(o,t))||void 0!==(n=nt(o,t))?n:void 0;this.each((function(){Z.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){Z.remove(this,t)}))}}),E.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=J.get(t,e),n&&(!i||Array.isArray(n)?i=J.access(t,e,E.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=E.queue(t,e),i=n.length,r=n.shift(),o=E._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,(function(){E.dequeue(t,e)}),o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:E.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),E.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?E.queue(this[0],t):void 0===e?this:this.each((function(){var n=E.queue(this,t,e);E._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&E.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){E.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=E.Deferred(),o=this,a=this.length,s=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=J.get(o[a],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(s));return s(),r.promise(e)}});var it=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,rt=new RegExp("^(?:([+-])=|)("+it+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=y.documentElement,st=function(t){return E.contains(t.ownerDocument,t)},lt={composed:!0};at.getRootNode&&(st=function(t){return E.contains(t.ownerDocument,t)||t.getRootNode(lt)===t.ownerDocument});var ct=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===E.css(t,"display")};function ut(t,e,n,i){var r,o,a=20,s=i?function(){return i.cur()}:function(){return E.css(t,e,"")},l=s(),c=n&&n[3]||(E.cssNumber[e]?"":"px"),u=t.nodeType&&(E.cssNumber[e]||"px"!==c&&+l)&&rt.exec(E.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)E.style(t,e,u+c),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),u/=o;u*=2,E.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var ft={};function dt(t){var e,n=t.ownerDocument,i=t.nodeName,r=ft[i];return r||(e=n.body.appendChild(n.createElement(i)),r=E.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),ft[i]=r,r)}function pt(t,e){for(var n,i,r=[],o=0,a=t.length;o<a;o++)(i=t[o]).style&&(n=i.style.display,e?("none"===n&&(r[o]=J.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&ct(i)&&(r[o]=dt(i))):"none"!==n&&(r[o]="none",J.set(i,"display",n)));for(o=0;o<a;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}E.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){ct(this)?E(this).show():E(this).hide()}))}});var ht,mt,gt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,bt=/^$|^module$|\/(?:java|ecma)script/i;ht=y.createDocumentFragment().appendChild(y.createElement("div")),(mt=y.createElement("input")).setAttribute("type","radio"),mt.setAttribute("checked","checked"),mt.setAttribute("name","t"),ht.appendChild(mt),g.checkClone=ht.cloneNode(!0).cloneNode(!0).lastChild.checked,ht.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!ht.cloneNode(!0).lastChild.defaultValue,ht.innerHTML="<option></option>",g.option=!!ht.lastChild;var yt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _t(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&N(t,e)?E.merge([t],n):n}function wt(t,e){for(var n=0,i=t.length;n<i;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}yt.tbody=yt.tfoot=yt.colgroup=yt.caption=yt.thead,yt.th=yt.td,g.option||(yt.optgroup=yt.option=[1,"<select multiple='multiple'>","</select>"]);var xt=/<|&#?\w+;/;function kt(t,e,n,i,r){for(var o,a,s,l,c,u,f=e.createDocumentFragment(),d=[],p=0,h=t.length;p<h;p++)if((o=t[p])||0===o)if("object"===x(o))E.merge(d,o.nodeType?[o]:o);else if(xt.test(o)){for(a=a||f.appendChild(e.createElement("div")),s=(vt.exec(o)||["",""])[1].toLowerCase(),l=yt[s]||yt._default,a.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],u=l[0];u--;)a=a.lastChild;E.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(e.createTextNode(o));for(f.textContent="",p=0;o=d[p++];)if(i&&E.inArray(o,i)>-1)r&&r.push(o);else if(c=st(o),a=_t(f.appendChild(o),"script"),c&&wt(a),n)for(u=0;o=a[u++];)bt.test(o.type||"")&&n.push(o);return f}var Et=/^([^.]*)(?:\.(.+)|)/;function At(){return!0}function Tt(){return!1}function Ct(t,e){return t===function(){try{return y.activeElement}catch(t){}}()==("focus"===e)}function Ot(t,e,n,i,r,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(i=i||n,n=void 0),e)Ot(t,s,n,i,e[s],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Tt;else if(!r)return t;return 1===o&&(a=r,r=function(t){return E().off(t),a.apply(this,arguments)},r.guid=a.guid||(a.guid=E.guid++)),t.each((function(){E.event.add(this,e,r,i,n)}))}function St(t,e,n){n?(J.set(t,e,!1),E.event.add(t,e,{namespace:!1,handler:function(t){var i,r,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(E.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=s.call(arguments),J.set(this,e,o),i=n(this,e),this[e](),o!==(r=J.get(this,e))||i?J.set(this,e,!1):r={},o!==r)return t.stopImmediatePropagation(),t.preventDefault(),r&&r.value}else o.length&&(J.set(this,e,{value:E.event.trigger(E.extend(o[0],E.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&E.event.add(t,e,At)}E.event={global:{},add:function(t,e,n,i,r){var o,a,s,l,c,u,f,d,p,h,m,g=J.get(t);if(Q(t))for(n.handler&&(n=(o=n).handler,r=o.selector),r&&E.find.matchesSelector(at,r),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==E&&E.event.triggered!==e.type?E.event.dispatch.apply(t,arguments):void 0}),c=(e=(e||"").match(R)||[""]).length;c--;)p=m=(s=Et.exec(e[c])||[])[1],h=(s[2]||"").split(".").sort(),p&&(f=E.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,f=E.event.special[p]||{},u=E.extend({type:p,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&E.expr.match.needsContext.test(r),namespace:h.join(".")},o),(d=l[p])||((d=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,i,h,a)||t.addEventListener&&t.addEventListener(p,a)),f.add&&(f.add.call(t,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),E.event.global[p]=!0)},remove:function(t,e,n,i,r){var o,a,s,l,c,u,f,d,p,h,m,g=J.hasData(t)&&J.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(R)||[""]).length;c--;)if(p=m=(s=Et.exec(e[c])||[])[1],h=(s[2]||"").split(".").sort(),p){for(f=E.event.special[p]||{},d=l[p=(i?f.delegateType:f.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)u=d[o],!r&&m!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(o,1),u.selector&&d.delegateCount--,f.remove&&f.remove.call(t,u));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(t,h,g.handle)||E.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)E.event.remove(t,p+e[c],n,i,!0);E.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,a,s=new Array(arguments.length),l=E.event.fix(t),c=(J.get(this,"events")||Object.create(null))[l.type]||[],u=E.event.special[l.type]||{};for(s[0]=l,e=1;e<arguments.length;e++)s[e]=arguments[e];if(l.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,c),e=0;(r=a[e++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(i=((E.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,s))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,l),l.result}},handlers:function(t,e){var n,i,r,o,a,s=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&t.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[r=(i=e[n]).selector+" "]&&(a[r]=i.needsContext?E(r,this).index(c)>-1:E.find(r,this,null,[c]).length),a[r]&&o.push(i);o.length&&s.push({elem:c,handlers:o})}return c=this,l<e.length&&s.push({elem:c,handlers:e.slice(l)}),s},addProp:function(t,e){Object.defineProperty(E.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[E.expando]?t:new E.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&N(e,"input")&&St(e,"click",At),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&N(e,"input")&&St(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&N(e,"input")&&J.get(e,"click")||N(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},E.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},E.Event=function(t,e){if(!(this instanceof E.Event))return new E.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?At:Tt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&E.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Tt,isPropagationStopped:Tt,isImmediatePropagationStopped:Tt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=At,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=At,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=At,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(t,e){E.event.special[t]={setup:function(){return St(this,t,Ct),!1},trigger:function(){return St(this,t),!0},_default:function(){return!0},delegateType:e}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){E.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return r&&(r===i||E.contains(i,r))||(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}})),E.fn.extend({on:function(t,e,n,i){return Ot(this,t,e,n,i)},one:function(t,e,n,i){return Ot(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,E(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Tt),this.each((function(){E.event.remove(this,t,n,e)}))}});var Nt=/<script|<style|<link/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function jt(t,e){return N(t,"table")&&N(11!==e.nodeType?e:e.firstChild,"tr")&&E(t).children("tbody")[0]||t}function Pt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Mt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function It(t,e){var n,i,r,o,a,s;if(1===e.nodeType){if(J.hasData(t)&&(s=J.get(t).events))for(r in J.remove(e,"handle events"),s)for(n=0,i=s[r].length;n<i;n++)E.event.add(e,r,s[r][n]);Z.hasData(t)&&(o=Z.access(t),a=E.extend({},o),Z.set(e,a))}}function Ht(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Rt(t,e,n,i){e=l(e);var r,o,a,s,c,u,f=0,d=t.length,p=d-1,h=e[0],m=v(h);if(m||d>1&&"string"==typeof h&&!g.checkClone&&Dt.test(h))return t.each((function(r){var o=t.eq(r);m&&(e[0]=h.call(this,r,o.html())),Rt(o,e,n,i)}));if(d&&(o=(r=kt(e,t[0].ownerDocument,!1,t,i)).firstChild,1===r.childNodes.length&&(r=o),o||i)){for(s=(a=E.map(_t(r,"script"),Pt)).length;f<d;f++)c=r,f!==p&&(c=E.clone(c,!0,!0),s&&E.merge(a,_t(c,"script"))),n.call(t[f],c,f);if(s)for(u=a[a.length-1].ownerDocument,E.map(a,Mt),f=0;f<s;f++)c=a[f],bt.test(c.type||"")&&!J.access(c,"globalEval")&&E.contains(u,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?E._evalUrl&&!c.noModule&&E._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},u):w(c.textContent.replace(Lt,""),c,u))}return t}function qt(t,e,n){for(var i,r=e?E.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||E.cleanData(_t(i)),i.parentNode&&(n&&st(i)&&wt(_t(i,"script")),i.parentNode.removeChild(i));return t}E.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var i,r,o,a,s=t.cloneNode(!0),l=st(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||E.isXMLDoc(t)))for(a=_t(s),i=0,r=(o=_t(t)).length;i<r;i++)Ht(o[i],a[i]);if(e)if(n)for(o=o||_t(t),a=a||_t(s),i=0,r=o.length;i<r;i++)It(o[i],a[i]);else It(t,s);return(a=_t(s,"script")).length>0&&wt(a,!l&&_t(t,"script")),s},cleanData:function(t){for(var e,n,i,r=E.event.special,o=0;void 0!==(n=t[o]);o++)if(Q(n)){if(e=n[J.expando]){if(e.events)for(i in e.events)r[i]?E.event.remove(n,i):E.removeEvent(n,i,e.handle);n[J.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),E.fn.extend({detach:function(t){return qt(this,t,!0)},remove:function(t){return qt(this,t)},text:function(t){return Y(this,(function(t){return void 0===t?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Rt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||jt(this,t).appendChild(t)}))},prepend:function(){return Rt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=jt(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Rt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Rt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(E.cleanData(_t(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return E.clone(this,t,e)}))},html:function(t){return Y(this,(function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Nt.test(t)&&!yt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=E.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(E.cleanData(_t(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Rt(this,arguments,(function(e){var n=this.parentNode;E.inArray(this,t)<0&&(E.cleanData(_t(this)),n&&n.replaceChild(e,this))}),t)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){E.fn[t]=function(t){for(var n,i=[],r=E(t),o=r.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),E(r[a])[e](n),c.apply(i,n.get());return this.pushStack(i)}}));var zt=new RegExp("^("+it+")(?!px)[a-z%]+$","i"),Bt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=i),e.getComputedStyle(t)},Wt=function(t,e,n){var i,r,o={};for(r in e)o[r]=t.style[r],t.style[r]=e[r];for(r in i=n.call(t),e)t.style[r]=o[r];return i},Ft=new RegExp(ot.join("|"),"i");function $t(t,e,n){var i,r,o,a,s=t.style;return(n=n||Bt(t))&&(""!==(a=n.getPropertyValue(e)||n[e])||st(t)||(a=E.style(t,e)),!g.pixelBoxStyles()&&zt.test(a)&&Ft.test(e)&&(i=s.width,r=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=i,s.minWidth=r,s.maxWidth=o)),void 0!==a?a+"":a}function Yt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(c).appendChild(u);var t=i.getComputedStyle(u);n="1%"!==t.top,l=12===e(t.marginLeft),u.style.right="60%",a=36===e(t.right),r=36===e(t.width),u.style.position="absolute",o=12===e(u.offsetWidth/3),at.removeChild(c),u=null}}function e(t){return Math.round(parseFloat(t))}var n,r,o,a,s,l,c=y.createElement("div"),u=y.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return t(),r},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,n,r;return null==s&&(t=y.createElement("table"),e=y.createElement("tr"),n=y.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",at.appendChild(t).appendChild(e).appendChild(n),r=i.getComputedStyle(e),s=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===e.offsetHeight,at.removeChild(t)),s}}))}();var Ut=["Webkit","Moz","ms"],Vt=y.createElement("div").style,Xt={};function Kt(t){return E.cssProps[t]||Xt[t]||(t in Vt?t:Xt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=Ut.length;n--;)if((t=Ut[n]+e)in Vt)return t}(t)||t)}var Qt=/^(none|table(?!-c[ea]).+)/,Gt=/^--/,Jt={position:"absolute",visibility:"hidden",display:"block"},Zt={letterSpacing:"0",fontWeight:"400"};function te(t,e,n){var i=rt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function ee(t,e,n,i,r,o){var a="width"===e?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=E.css(t,n+ot[a],!0,r)),i?("content"===n&&(l-=E.css(t,"padding"+ot[a],!0,r)),"margin"!==n&&(l-=E.css(t,"border"+ot[a]+"Width",!0,r))):(l+=E.css(t,"padding"+ot[a],!0,r),"padding"!==n?l+=E.css(t,"border"+ot[a]+"Width",!0,r):s+=E.css(t,"border"+ot[a]+"Width",!0,r));return!i&&o>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-l-s-.5))||0),l}function ne(t,e,n){var i=Bt(t),r=(!g.boxSizingReliable()||n)&&"border-box"===E.css(t,"boxSizing",!1,i),o=r,a=$t(t,e,i),s="offset"+e[0].toUpperCase()+e.slice(1);if(zt.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&r||!g.reliableTrDimensions()&&N(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(t,"display",!1,i))&&t.getClientRects().length&&(r="border-box"===E.css(t,"boxSizing",!1,i),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+ee(t,e,n||(r?"border":"content"),o,i,a)+"px"}function ie(t,e,n,i,r){return new ie.prototype.init(t,e,n,i,r)}E.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=$t(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,a,s=K(e),l=Gt.test(e),c=t.style;if(l||(e=Kt(s)),a=E.cssHooks[e]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(r=a.get(t,!1,i))?r:c[e];"string"==(o=typeof n)&&(r=rt.exec(n))&&r[1]&&(n=ut(t,e,r),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=r&&r[3]||(E.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,o,a,s=K(e);return Gt.test(e)||(e=Kt(s)),(a=E.cssHooks[e]||E.cssHooks[s])&&"get"in a&&(r=a.get(t,!0,n)),void 0===r&&(r=$t(t,e,i)),"normal"===r&&e in Zt&&(r=Zt[e]),""===n||n?(o=parseFloat(r),!0===n||isFinite(o)?o||0:r):r}}),E.each(["height","width"],(function(t,e){E.cssHooks[e]={get:function(t,n,i){if(n)return!Qt.test(E.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ne(t,e,i):Wt(t,Jt,(function(){return ne(t,e,i)}))},set:function(t,n,i){var r,o=Bt(t),a=!g.scrollboxSize()&&"absolute"===o.position,s=(a||i)&&"border-box"===E.css(t,"boxSizing",!1,o),l=i?ee(t,e,i,s,o):0;return s&&a&&(l-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-ee(t,e,"border",!1,o)-.5)),l&&(r=rt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=E.css(t,e)),te(0,n,l)}}})),E.cssHooks.marginLeft=Yt(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat($t(t,"marginLeft"))||t.getBoundingClientRect().left-Wt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(t,e){E.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+ot[i]+e]=o[i]||o[i-2]||o[0];return r}},"margin"!==t&&(E.cssHooks[t+e].set=te)})),E.fn.extend({css:function(t,e){return Y(this,(function(t,e,n){var i,r,o={},a=0;if(Array.isArray(e)){for(i=Bt(t),r=e.length;a<r;a++)o[e[a]]=E.css(t,e[a],!1,i);return o}return void 0!==n?E.style(t,e,n):E.css(t,e)}),t,e,arguments.length>1)}}),E.Tween=ie,ie.prototype={constructor:ie,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||E.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var t=ie.propHooks[this.prop];return t&&t.get?t.get(this):ie.propHooks._default.get(this)},run:function(t){var e,n=ie.propHooks[this.prop];return this.options.duration?this.pos=e=E.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ie.propHooks._default.set(this),this}},ie.prototype.init.prototype=ie.prototype,ie.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=E.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){E.fx.step[t.prop]?E.fx.step[t.prop](t):1!==t.elem.nodeType||!E.cssHooks[t.prop]&&null==t.elem.style[Kt(t.prop)]?t.elem[t.prop]=t.now:E.style(t.elem,t.prop,t.now+t.unit)}}},ie.propHooks.scrollTop=ie.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},E.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},E.fx=ie.prototype.init,E.fx.step={};var re,oe,ae=/^(?:toggle|show|hide)$/,se=/queueHooks$/;function le(){oe&&(!1===y.hidden&&i.requestAnimationFrame?i.requestAnimationFrame(le):i.setTimeout(le,E.fx.interval),E.fx.tick())}function ce(){return i.setTimeout((function(){re=void 0})),re=Date.now()}function ue(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=ot[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function fe(t,e,n){for(var i,r=(de.tweeners[e]||[]).concat(de.tweeners["*"]),o=0,a=r.length;o<a;o++)if(i=r[o].call(n,e,t))return i}function de(t,e,n){var i,r,o=0,a=de.prefilters.length,s=E.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var e=re||ce(),n=Math.max(0,c.startTime+c.duration-e),i=1-(n/c.duration||0),o=0,a=c.tweens.length;o<a;o++)c.tweens[o].run(i);return s.notifyWith(t,[c,i,n]),i<1&&a?n:(a||s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c]),!1)},c=s.promise({elem:t,props:E.extend({},e),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:e,originalOptions:n,startTime:re||ce(),duration:n.duration,tweens:[],createTween:function(e,n){var i=E.Tween(t,c.opts,e,n,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(i),i},stop:function(e){var n=0,i=e?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return e?(s.notifyWith(t,[c,1,0]),s.resolveWith(t,[c,e])):s.rejectWith(t,[c,e]),this}}),u=c.props;for(function(t,e){var n,i,r,o,a;for(n in t)if(r=e[i=K(n)],o=t[n],Array.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),(a=E.cssHooks[i])&&"expand"in a)for(n in o=a.expand(o),delete t[i],o)n in t||(t[n]=o[n],e[n]=r);else e[i]=r}(u,c.opts.specialEasing);o<a;o++)if(i=de.prefilters[o].call(c,t,u,c.opts))return v(i.stop)&&(E._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return E.map(u,fe,c),v(c.opts.start)&&c.opts.start.call(t,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),E.fx.timer(E.extend(l,{elem:t,anim:c,queue:c.opts.queue})),c}E.Animation=E.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ut(n.elem,t,rt.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(R);for(var n,i=0,r=t.length;i<r;i++)n=t[i],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,o,a,s,l,c,u,f="width"in e||"height"in e,d=this,p={},h=t.style,m=t.nodeType&&ct(t),g=J.get(t,"fxshow");for(i in n.queue||(null==(a=E._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,E.queue(t,"fx").length||a.empty.fire()}))}))),e)if(r=e[i],ae.test(r)){if(delete e[i],o=o||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}p[i]=g&&g[i]||E.style(t,i)}if((l=!E.isEmptyObject(e))||!E.isEmptyObject(p))for(i in f&&1===t.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=g&&g.display)&&(c=J.get(t,"display")),"none"===(u=E.css(t,"display"))&&(c?u=c:(pt([t],!0),c=t.style.display||c,u=E.css(t,"display"),pt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===E.css(t,"float")&&(l||(d.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(t,"fxshow",{display:c}),o&&(g.hidden=!m),m&&pt([t],!0),d.done((function(){for(i in m||pt([t]),J.remove(t,"fxshow"),p)E.style(t,i,p[i])}))),l=fe(m?g[i]:0,i,d),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),E.speed=function(t,e,n){var i=t&&"object"==typeof t?E.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return E.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in E.fx.speeds?i.duration=E.fx.speeds[i.duration]:i.duration=E.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&E.dequeue(this,i.queue)},i},E.fn.extend({fadeTo:function(t,e,n,i){return this.filter(ct).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=E.isEmptyObject(t),o=E.speed(e,n,i),a=function(){var e=de(this,E.extend({},t),o);(r||J.get(this,"finish"))&&e.stop(!0)};return a.finish=a,r||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,r=null!=t&&t+"queueHooks",o=E.timers,a=J.get(this);if(r)a[r]&&a[r].stop&&i(a[r]);else for(r in a)a[r]&&a[r].stop&&se.test(r)&&i(a[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));!e&&n||E.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=E.timers,a=i?i.length:0;for(n.finish=!0,E.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(t,e){var n=E.fn[e];E.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(ue(e,!0),t,i,r)}})),E.each({slideDown:ue("show"),slideUp:ue("hide"),slideToggle:ue("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){E.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}})),E.timers=[],E.fx.tick=function(){var t,e=0,n=E.timers;for(re=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||E.fx.stop(),re=void 0},E.fx.timer=function(t){E.timers.push(t),E.fx.start()},E.fx.interval=13,E.fx.start=function(){oe||(oe=!0,le())},E.fx.stop=function(){oe=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(t,e){return t=E.fx&&E.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var r=i.setTimeout(e,t);n.stop=function(){i.clearTimeout(r)}}))},function(){var t=y.createElement("input"),e=y.createElement("select").appendChild(y.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=y.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var pe,he=E.expr.attrHandle;E.fn.extend({attr:function(t,e){return Y(this,E.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){E.removeAttr(this,t)}))}}),E.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?E.prop(t,e,n):(1===o&&E.isXMLDoc(t)||(r=E.attrHooks[e.toLowerCase()]||(E.expr.match.bool.test(e)?pe:void 0)),void 0!==n?null===n?void E.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=E.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&N(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(R);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),pe={set:function(t,e,n){return!1===e?E.removeAttr(t,n):t.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=he[e]||E.find.attr;he[e]=function(t,e,i){var r,o,a=e.toLowerCase();return i||(o=he[a],he[a]=r,r=null!=n(t,e,i)?a:null,he[a]=o),r}}));var me=/^(?:input|select|textarea|button)$/i,ge=/^(?:a|area)$/i;function ve(t){return(t.match(R)||[]).join(" ")}function be(t){return t.getAttribute&&t.getAttribute("class")||""}function ye(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(R)||[]}E.fn.extend({prop:function(t,e){return Y(this,E.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[E.propFix[t]||t]}))}}),E.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(t)||(e=E.propFix[e]||e,r=E.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=E.find.attr(t,"tabindex");return e?parseInt(e,10):me.test(t.nodeName)||ge.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(t){var e,n,i,r,o,a,s,l=0;if(v(t))return this.each((function(e){E(this).addClass(t.call(this,e,be(this)))}));if((e=ye(t)).length)for(;n=this[l++];)if(r=be(n),i=1===n.nodeType&&" "+ve(r)+" "){for(a=0;o=e[a++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");r!==(s=ve(i))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,i,r,o,a,s,l=0;if(v(t))return this.each((function(e){E(this).removeClass(t.call(this,e,be(this)))}));if(!arguments.length)return this.attr("class","");if((e=ye(t)).length)for(;n=this[l++];)if(r=be(n),i=1===n.nodeType&&" "+ve(r)+" "){for(a=0;o=e[a++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");r!==(s=ve(i))&&n.setAttribute("class",s)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):v(t)?this.each((function(n){E(this).toggleClass(t.call(this,n,be(this),e),e)})):this.each((function(){var e,r,o,a;if(i)for(r=0,o=E(this),a=ye(t);e=a[r++];)o.hasClass(e)?o.removeClass(e):o.addClass(e);else void 0!==t&&"boolean"!==n||((e=be(this))&&J.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":J.get(this,"__className__")||""))}))},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+ve(be(n))+" ").indexOf(e)>-1)return!0;return!1}});var _e=/\r/g;E.fn.extend({val:function(t){var e,n,i,r=this[0];return arguments.length?(i=v(t),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?t.call(this,n,E(this).val()):t)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=E.map(r,(function(t){return null==t?"":t+""}))),(e=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))}))):r?(e=E.valHooks[r.type]||E.valHooks[r.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(_e,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(t){var e=E.find.attr(t,"value");return null!=e?e:ve(E.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?o+1:r.length;for(i=o<0?l:a?o:0;i<l;i++)if(((n=r[i]).selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(e=E(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=E.makeArray(e),a=r.length;a--;)((i=r[a]).selected=E.inArray(E.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=E.inArray(E(t).val(),e)>-1}},g.checkOn||(E.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in i;var we=/^(?:focusinfocus|focusoutblur)$/,xe=function(t){t.stopPropagation()};E.extend(E.event,{trigger:function(t,e,n,r){var o,a,s,l,c,u,f,d,h=[n||y],m=p.call(t,"type")?t.type:t,g=p.call(t,"namespace")?t.namespace.split("."):[];if(a=d=s=n=n||y,3!==n.nodeType&&8!==n.nodeType&&!we.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),c=m.indexOf(":")<0&&"on"+m,(t=t[E.expando]?t:new E.Event(m,"object"==typeof t&&t)).isTrigger=r?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:E.makeArray(e,[t]),f=E.event.special[m]||{},r||!f.trigger||!1!==f.trigger.apply(n,e))){if(!r&&!f.noBubble&&!b(n)){for(l=f.delegateType||m,we.test(l+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||y)&&h.push(s.defaultView||s.parentWindow||i)}for(o=0;(a=h[o++])&&!t.isPropagationStopped();)d=a,t.type=o>1?l:f.bindType||m,(u=(J.get(a,"events")||Object.create(null))[t.type]&&J.get(a,"handle"))&&u.apply(a,e),(u=c&&a[c])&&u.apply&&Q(a)&&(t.result=u.apply(a,e),!1===t.result&&t.preventDefault());return t.type=m,r||t.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),e)||!Q(n)||c&&v(n[m])&&!b(n)&&((s=n[c])&&(n[c]=null),E.event.triggered=m,t.isPropagationStopped()&&d.addEventListener(m,xe),n[m](),t.isPropagationStopped()&&d.removeEventListener(m,xe),E.event.triggered=void 0,s&&(n[c]=s)),t.result}},simulate:function(t,e,n){var i=E.extend(new E.Event,n,{type:t,isSimulated:!0});E.event.trigger(i,null,e)}}),E.fn.extend({trigger:function(t,e){return this.each((function(){E.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return E.event.trigger(t,e,n,!0)}}),g.focusin||E.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){E.event.simulate(e,t.target,E.event.fix(t))};E.event.special[e]={setup:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,e);r||i.addEventListener(t,n,!0),J.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=J.access(i,e)-1;r?J.access(i,e,r):(i.removeEventListener(t,n,!0),J.remove(i,e))}}}));var ke=i.location,Ee={guid:Date.now()},Ae=/\?/;E.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new i.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||E.error("Invalid XML: "+(n?E.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Te=/\[\]$/,Ce=/\r?\n/g,Oe=/^(?:submit|button|image|reset|file)$/i,Se=/^(?:input|select|textarea|keygen)/i;function Ne(t,e,n,i){var r;if(Array.isArray(e))E.each(e,(function(e,r){n||Te.test(t)?i(t,r):Ne(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)}));else if(n||"object"!==x(e))i(t,e);else for(r in e)Ne(t+"["+r+"]",e[r],n,i)}E.param=function(t,e){var n,i=[],r=function(t,e){var n=v(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!E.isPlainObject(t))E.each(t,(function(){r(this.name,this.value)}));else for(n in t)Ne(n,t[n],e,r);return i.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=E.prop(this,"elements");return t?E.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!E(this).is(":disabled")&&Se.test(this.nodeName)&&!Oe.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(t){return{name:e.name,value:t.replace(Ce,"\r\n")}})):{name:e.name,value:n.replace(Ce,"\r\n")}})).get()}});var De=/%20/g,Le=/#.*$/,je=/([?&])_=[^&]*/,Pe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Me=/^(?:GET|HEAD)$/,Ie=/^\/\//,He={},Re={},qe="*/".concat("*"),ze=y.createElement("a");function Be(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(R)||[];if(v(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function We(t,e,n,i){var r={},o=t===Re;function a(s){var l;return r[s]=!0,E.each(t[s]||[],(function(t,s){var c=s(e,n,i);return"string"!=typeof c||o||r[c]?o?!(l=c):void 0:(e.dataTypes.unshift(c),a(c),!1)})),l}return a(e.dataTypes[0])||!r["*"]&&a("*")}function Fe(t,e){var n,i,r=E.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&E.extend(!0,t,i),t}ze.href=ke.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ke.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Fe(Fe(t,E.ajaxSettings),e):Fe(E.ajaxSettings,t)},ajaxPrefilter:Be(He),ajaxTransport:Be(Re),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,r,o,a,s,l,c,u,f,d,p=E.ajaxSetup({},e),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?E(h):E.event,g=E.Deferred(),v=E.Callbacks("once memory"),b=p.statusCode||{},_={},w={},x="canceled",k={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=Pe.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,_[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)k.always(t[k.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||x;return n&&n.abort(e),A(0,e),this}};if(g.promise(k),p.url=((t||p.url||ke.href)+"").replace(Ie,ke.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){l=y.createElement("a");try{l.href=p.url,l.href=l.href,p.crossDomain=ze.protocol+"//"+ze.host!=l.protocol+"//"+l.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=E.param(p.data,p.traditional)),We(He,p,e,k),c)return k;for(f in(u=E.event&&p.global)&&0==E.active++&&E.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Me.test(p.type),r=p.url.replace(Le,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(De,"+")):(d=p.url.slice(r.length),p.data&&(p.processData||"string"==typeof p.data)&&(r+=(Ae.test(r)?"&":"?")+p.data,delete p.data),!1===p.cache&&(r=r.replace(je,"$1"),d=(Ae.test(r)?"&":"?")+"_="+Ee.guid+++d),p.url=r+d),p.ifModified&&(E.lastModified[r]&&k.setRequestHeader("If-Modified-Since",E.lastModified[r]),E.etag[r]&&k.setRequestHeader("If-None-Match",E.etag[r])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qe+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,k,p)||c))return k.abort();if(x="abort",v.add(p.complete),k.done(p.success),k.fail(p.error),n=We(Re,p,e,k)){if(k.readyState=1,u&&m.trigger("ajaxSend",[k,p]),c)return k;p.async&&p.timeout>0&&(s=i.setTimeout((function(){k.abort("timeout")}),p.timeout));try{c=!1,n.send(_,A)}catch(t){if(c)throw t;A(-1,t)}}else A(-1,"No Transport");function A(t,e,a,l){var f,d,y,_,w,x=e;c||(c=!0,s&&i.clearTimeout(s),n=void 0,o=l||"",k.readyState=t>0?4:0,f=t>=200&&t<300||304===t,a&&(_=function(t,e,n){for(var i,r,o,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in s)if(s[r]&&s[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}a||(a=r)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(p,k,a)),!f&&E.inArray("script",p.dataTypes)>-1&&E.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),_=function(t,e,n,i){var r,o,a,s,l,c={},u=t.dataTypes.slice();if(u[1])for(a in t.converters)c[a.toLowerCase()]=t.converters[a];for(o=u.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=c[l+" "+o]||c["* "+o]))for(r in c)if((s=r.split(" "))[1]===o&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[r]:!0!==c[r]&&(o=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}(p,_,k,f),f?(p.ifModified&&((w=k.getResponseHeader("Last-Modified"))&&(E.lastModified[r]=w),(w=k.getResponseHeader("etag"))&&(E.etag[r]=w)),204===t||"HEAD"===p.type?x="nocontent":304===t?x="notmodified":(x=_.state,d=_.data,f=!(y=_.error))):(y=x,!t&&x||(x="error",t<0&&(t=0))),k.status=t,k.statusText=(e||x)+"",f?g.resolveWith(h,[d,x,k]):g.rejectWith(h,[k,x,y]),k.statusCode(b),b=void 0,u&&m.trigger(f?"ajaxSuccess":"ajaxError",[k,p,f?d:y]),v.fireWith(h,[k,x]),u&&(m.trigger("ajaxComplete",[k,p]),--E.active||E.event.trigger("ajaxStop")))}return k},getJSON:function(t,e,n){return E.get(t,e,n,"json")},getScript:function(t,e){return E.get(t,void 0,e,"script")}}),E.each(["get","post"],(function(t,e){E[e]=function(t,n,i,r){return v(n)&&(r=r||i,i=n,n=void 0),E.ajax(E.extend({url:t,type:e,dataType:r,data:n,success:i},E.isPlainObject(t)&&t))}})),E.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),E._evalUrl=function(t,e,n){return E.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){E.globalEval(t,e,n)}})},E.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=E(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){E(this).wrapInner(t.call(this,e))})):this.each((function(){var e=E(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){E(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(t){return!E.expr.pseudos.visible(t)},E.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new i.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Ye=E.ajaxSettings.xhr();g.cors=!!Ye&&"withCredentials"in Ye,g.ajax=Ye=!!Ye,E.ajaxTransport((function(t){var e,n;if(g.cors||Ye&&!t.crossDomain)return{send:function(r,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)s.setRequestHeader(a,r[a]);e=function(t){return function(){e&&(e=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o($e[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),n=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&i.setTimeout((function(){e&&n()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),E.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return E.globalEval(t),t}}}),E.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),E.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(i,r){e=E("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),y.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ue,Ve=[],Xe=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ve.pop()||E.expando+"_"+Ee.guid++;return this[t]=!0,t}}),E.ajaxPrefilter("json jsonp",(function(t,e,n){var r,o,a,s=!1!==t.jsonp&&(Xe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xe.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return r=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Xe,"$1"+r):!1!==t.jsonp&&(t.url+=(Ae.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return a||E.error(r+" was not called"),a[0]},t.dataTypes[0]="json",o=i[r],i[r]=function(){a=arguments},n.always((function(){void 0===o?E(i).removeProp(r):i[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ve.push(r)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),g.createHTMLDocument=((Ue=y.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ue.childNodes.length),E.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((i=(e=y.implementation.createHTMLDocument("")).createElement("base")).href=y.location.href,e.head.appendChild(i)):e=y),o=!n&&[],(r=D.exec(t))?[e.createElement(r[1])]:(r=kt([t],e,o),o&&o.length&&E(o).remove(),E.merge([],r.childNodes)));var i,r,o},E.fn.load=function(t,e,n){var i,r,o,a=this,s=t.indexOf(" ");return s>-1&&(i=ve(t.slice(s)),t=t.slice(0,s)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),a.length>0&&E.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(i?E("<div>").append(E.parseHTML(t)).find(i):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},E.expr.pseudos.animated=function(t){return E.grep(E.timers,(function(e){return t===e.elem})).length},E.offset={setOffset:function(t,e,n){var i,r,o,a,s,l,c=E.css(t,"position"),u=E(t),f={};"static"===c&&(t.style.position="relative"),s=u.offset(),o=E.css(t,"top"),l=E.css(t,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(a=(i=u.position()).top,r=i.left):(a=parseFloat(o)||0,r=parseFloat(l)||0),v(e)&&(e=e.call(t,n,E.extend({},s))),null!=e.top&&(f.top=e.top-s.top+a),null!=e.left&&(f.left=e.left-s.left+r),"using"in e?e.using.call(t,f):u.css(f)}},E.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){E.offset.setOffset(this,t,e)}));var e,n,i=this[0];return i?i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===E.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===E.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=E(t).offset()).top+=E.css(t,"borderTopWidth",!0),r.left+=E.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-E.css(i,"marginTop",!0),left:e.left-r.left-E.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===E.css(t,"position");)t=t.offsetParent;return t||at}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;E.fn[t]=function(i){return Y(this,(function(t,i,r){var o;if(b(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===r)return o?o[e]:t[i];o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r}),t,i,arguments.length)}})),E.each(["top","left"],(function(t,e){E.cssHooks[e]=Yt(g.pixelPosition,(function(t,n){if(n)return n=$t(t,e),zt.test(n)?E(t).position()[e]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(t,e){E.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,i){E.fn[i]=function(r,o){var a=arguments.length&&(n||"boolean"!=typeof r),s=n||(!0===r||!0===o?"margin":"border");return Y(this,(function(e,n,r){var o;return b(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?E.css(e,n,s):E.style(e,n,r,s)}),e,a?r:void 0,a)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){E.fn[e]=function(t){return this.on(e,t)}})),E.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){E.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var Ke=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return i=s.call(arguments,2),r=function(){return t.apply(e||this,i.concat(s.call(arguments)))},r.guid=t.guid=t.guid||E.guid++,r},E.holdReady=function(t){t?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=N,E.isFunction=v,E.isWindow=b,E.camelCase=K,E.type=x,E.now=Date.now,E.isNumeric=function(t){var e=E.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},E.trim=function(t){return null==t?"":(t+"").replace(Ke,"")},void 0===(n=function(){return E}.apply(e,[]))||(t.exports=n);var Qe=i.jQuery,Ge=i.$;return E.noConflict=function(t){return i.$===E&&(i.$=Ge),t&&i.jQuery===E&&(i.jQuery=Qe),E},void 0===r&&(i.jQuery=i.$=E),E}))}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};return(()=>{"use strict";n.r(i);const t='<div class="modal fade" tabindex="-1" role="dialog" aria-hidden="true"> <div class="modal-dialog gdpr_modal" role="document"> <div class="modal-content"> <div class="modal-header"> <h5> <i class="fa-solid fa-user-lock icon" aria-hidden="true"></i> <span id="textTitleModal"></span>  </h5> <button type="button" class="btn btn-sm close" data-dismiss="modal" aria-label="Chiudi"> <i class="fas fa-times" aria-hidden="true"></i> </button> </div> <div class="modal-body"> <div class="notice text-justify"> <span id="textAbstractModal"></span> </div> <div class="small mt-2 text-muted"> <i class="fas fa-check-double" aria-hidden="true"></i> Data ultimo consenso: <span class="last-consent-date"><em>non disponibile</em></span> <a id="delete_cookie" href="#EliminaUltimoConsenso"><i class="fas fa-trash-alt"></i> <span id="textButtonResetCookie"></span></a> </div> </div> <div class="modal-footer justify-content-between"> <a class="btn btn-secondary btn-sm float-left" id="linkPrivacyPolicy" alt="Privacy Policy" href="./privacy_policy.html" target="_blank"> <i class="fas fa-file-contract" aria-hidden="true"></i> <span id="textButtonOpenPolicy"></span> </a> <a id="accept_policy" class="btn btn-primary btn-sm float-end" data-dismiss="modal"><i class="fas fa-user-check" aria-hidden="true"></i> <span id="textButtonAccept"></span></a> <div class="col-12"> <small class="small text-muted">Generata con <a title="GDPR Commons" href="https://www.gdprcommons.it" target="_blank">GDPR Commons</a></small> </div> </div> </div> </div> </div>',e='<a href="#GDPRCommons-dialog" id="open_cookiemodal" class="fixedicon" aria-label="Open Cookie Notice"> <i class="fa-solid fa-user-lock icon" aria-hidden="true"></i> </a>';$=window.$=window.jQuery=n(755),n(755),n(169),n(649);var r={text:{linkPrivacyPolicy:"http://www.gdprcommons.it",textTitleModal:"Informativa Cookie",textAbstractModal:"Questo sito utilizza esclusivamente cookie e/o altri strumenti di tracciamento di tipo tecnico o analitici al solo scopo di analisi statistica del traffico senza risalire all'identità del singolo utente. In oltre, non raccoglie informazioni personali in modo automatico senza esplicito consenso. In alcuni casi sono utilizzate risorse esterne. Ai fini legislativi, a scopo informativo si chiede la consultazione della Privacy Policy e proseguire cliccando su 'Ho capito'",textButtonAccept:"Ho capito",textButtonOpenPolicy:"Leggi l'informativa",textButtonResetCookie:"elimina"},modal:{showOnPageLoad:"cookie"},fixedicon:{show:!0}};window.onload=function(){!function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,i="ever",r="cookie",o=20,a="GDPRCommons",s=".gdprcommons-notice",l=".gdprcommons-fixedicon",c={load:(new Date).getTime(),accepted:!1};function u(){var t=p(a);null!=t&&$(s+" .last-consent-date").html(new Date(t.load).toDateString()),$(s+" .modal").modal("show")}function f(t){document.cookie=t+"=; Max-Age=-99999999;"}function d(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;e=JSON.stringify(e);var i="";if(n){var r=new Date;r.setTime(r.getTime()+24*n*60*60*1e3),i="; expires="+r.toUTCString()}document.cookie=t+"="+(e||"")+i+"; path=/"}function p(t){for(var e=t+"=",n=document.cookie.split(";"),i=0;i<n.length;i++){for(var r=n[i];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(e)){var o=r.substring(e.length,r.length);return JSON.parse(o)}}return null}$(s).html(t),$(s+" #accept_policy").on("click",(function(){console.log("accepted"),c.accepted=!0,d(a,c),$(s+" .modal").modal("hide")})),$(s+" #delete_cookie").on("click",(function(){f(a),console.log("erased"),$(s+" .last-consent-date").html("non disponibile")})),!0===n.fixedicon.show&&($(l).html(e),$(l+" #open_cookiemodal").on("click",(function(){u(),console.log("..")}))),n.modal.showOnPageLoad==i?u():n.modal.showOnPageLoad==r&&(console.log(p(a)),null==p(a)&&u()),n&&n.text&&(n.text.linkPrivacyPolicy?$("#linkPrivacyPolicy").attr("href",n.text.linkPrivacyPolicy):$("#linkPrivacyPolicy").attr("href","/"),n.text.textTitleModal?$("#textTitleModal").html(n.text.textTitleModal):$("#textTitleModal").html("example title"),n.text.textAbstractModal?$("#textAbstractModal").html(n.text.textAbstractModal):$("#textAbstractModal").html("example abstract"),n.text.textButtonAccept?$("#textButtonAccept").html(n.text.textButtonAccept):$("#textButtonAccept").html("accept example"),n.text.textButtonOpenPolicy?$("#textButtonOpenPolicy").html(n.text.textButtonOpenPolicy):$("#textButtonOpenPolicy").html("example open policy"),n.text.textButtonResetCookie?$("#textButtonResetCookie").html(n.text.textButtonResetCookie):$("#textButtonResetCookie").html("example delete"))}(r)}})(),i})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFLHNCQUFzQngzQixLQUFLLE9BQVEsS0FFckNtQixFQUFPdVgsS0FBS3c5RCxlQUNaMStDLEVBQUUsbUJBQW1CdnBCLEtBQUs5TSxFQUFPdVgsS0FBS3c5RCxnQkFFdEMxK0MsRUFBRSxtQkFBbUJ2cEIsS0FBSyxpQkFFMUI5TSxFQUFPdVgsS0FBS3k5RCxrQkFDWjMrQyxFQUFFLHNCQUFzQnZwQixLQUFLOU0sRUFBT3VYLEtBQUt5OUQsbUJBRXpDMytDLEVBQUUsc0JBQXNCdnBCLEtBQUssb0JBRTdCOU0sRUFBT3VYLEtBQUswOUQsaUJBQ1o1K0MsRUFBRSxxQkFBcUJ2cEIsS0FBSzlNLEVBQU91WCxLQUFLMDlELGtCQUV4QzUrQyxFQUFFLHFCQUFxQnZwQixLQUFLLGtCQUU1QjlNLEVBQU91WCxLQUFLMjlELHFCQUNaNytDLEVBQUUseUJBQXlCdnBCLEtBQUs5TSxFQUFPdVgsS0FBSzI5RCxzQkFFNUM3K0MsRUFBRSx5QkFBeUJ2cEIsS0FBSyx1QkFFaEM5TSxFQUFPdVgsS0FBSzQ5RCxzQkFDWjkrQyxFQUFFLDBCQUEwQnZwQixLQUFLOU0sRUFBT3VYLEtBQUs0OUQsdUJBRTdDOStDLEVBQUUsMEJBQTBCdnBCLEtBQUssbUJDbkg3Q29xRSxDQUFZbDNFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1mcmVlL2pzL2ZvbnRhd2Vzb21lLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2NvbnRhaW5zLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzVGFibGVFbGVtZW50LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcnJvdy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0VmFyaWF0aW9uLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvcmVjdFRvQ2xpZW50UmVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFZpZXdwb3J0UmVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZU9mZnNldHMuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9oaWRlLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0QWx0QXhpcy5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9jcmVhdGVQb3BwZXIuanMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvLi9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZUJ5TmFtZS5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9wb3BwZXItbGl0ZS5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL25vZGVfbW9kdWxlcy9ib290c3RyYXAvZGlzdC9qcy9ib290c3RyYXAuZXNtLmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vR0RQUkNvbW1vbnMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL0dEUFJDb21tb25zLy4vc3JjL2NvbXBvbmVudHMvY29va2llbW9kYWwuaHRtbCIsIndlYnBhY2s6Ly9HRFBSQ29tbW9ucy8uL3NyYy9jb21wb25lbnRzL2ZpeGVkaWNvbi5odG1sIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vc3JjL2Nvb2tpZUFsZXJ0LmpzIiwid2VicGFjazovL0dEUFJDb21tb25zLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiR0RQUkNvbW1vbnNcIiwgW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiR0RQUkNvbW1vbnNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiR0RQUkNvbW1vbnNcIl0gPSBmYWN0b3J5KCk7XG59KShzZWxmLCAoKSA9PiB7XG5yZXR1cm4gIiwiLyohXG4gKiBGb250IEF3ZXNvbWUgRnJlZSA2LjEuMSBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxuICogTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UvZnJlZSAoSWNvbnM6IENDIEJZIDQuMCwgRm9udHM6IFNJTCBPRkwgMS4xLCBDb2RlOiBNSVQgTGljZW5zZSlcbiAqIENvcHlyaWdodCAyMDIyIEZvbnRpY29ucywgSW5jLlxuICovXG4oZnVuY3Rpb24gKCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpO1xuICAgICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG4gIH1cblxuICBmdW5jdGlvbiBfb2JqZWN0U3ByZWFkMih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICAgIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfSwgX3R5cGVvZihvYmopO1xuICB9XG5cbiAgZnVuY3Rpb24gX3dyYXBSZWdFeHAoKSB7XG4gICAgX3dyYXBSZWdFeHAgPSBmdW5jdGlvbiAocmUsIGdyb3Vwcykge1xuICAgICAgcmV0dXJuIG5ldyBCYWJlbFJlZ0V4cChyZSwgdm9pZCAwLCBncm91cHMpO1xuICAgIH07XG5cbiAgICB2YXIgX3N1cGVyID0gUmVnRXhwLnByb3RvdHlwZSxcbiAgICAgICAgX2dyb3VwcyA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgICBmdW5jdGlvbiBCYWJlbFJlZ0V4cChyZSwgZmxhZ3MsIGdyb3Vwcykge1xuICAgICAgdmFyIF90aGlzID0gbmV3IFJlZ0V4cChyZSwgZmxhZ3MpO1xuXG4gICAgICByZXR1cm4gX2dyb3Vwcy5zZXQoX3RoaXMsIGdyb3VwcyB8fCBfZ3JvdXBzLmdldChyZSkpLCBfc2V0UHJvdG90eXBlT2YoX3RoaXMsIEJhYmVsUmVnRXhwLnByb3RvdHlwZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYnVpbGRHcm91cHMocmVzdWx0LCByZSkge1xuICAgICAgdmFyIGcgPSBfZ3JvdXBzLmdldChyZSk7XG5cbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhnKS5yZWR1Y2UoZnVuY3Rpb24gKGdyb3VwcywgbmFtZSkge1xuICAgICAgICByZXR1cm4gZ3JvdXBzW25hbWVdID0gcmVzdWx0W2dbbmFtZV1dLCBncm91cHM7XG4gICAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2luaGVyaXRzKEJhYmVsUmVnRXhwLCBSZWdFeHApLCBCYWJlbFJlZ0V4cC5wcm90b3R5cGUuZXhlYyA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBfc3VwZXIuZXhlYy5jYWxsKHRoaXMsIHN0cik7XG5cbiAgICAgIHJldHVybiByZXN1bHQgJiYgKHJlc3VsdC5ncm91cHMgPSBidWlsZEdyb3VwcyhyZXN1bHQsIHRoaXMpKSwgcmVzdWx0O1xuICAgIH0sIEJhYmVsUmVnRXhwLnByb3RvdHlwZVtTeW1ib2wucmVwbGFjZV0gPSBmdW5jdGlvbiAoc3RyLCBzdWJzdGl0dXRpb24pIHtcbiAgICAgIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiBzdWJzdGl0dXRpb24pIHtcbiAgICAgICAgdmFyIGdyb3VwcyA9IF9ncm91cHMuZ2V0KHRoaXMpO1xuXG4gICAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBzdWJzdGl0dXRpb24ucmVwbGFjZSgvXFwkPChbXj5dKyk+L2csIGZ1bmN0aW9uIChfLCBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIFwiJFwiICsgZ3JvdXBzW25hbWVdO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHN1YnN0aXR1dGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHJldHVybiBfc3VwZXJbU3ltYm9sLnJlcGxhY2VdLmNhbGwodGhpcywgc3RyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgIT0gdHlwZW9mIGFyZ3NbYXJncy5sZW5ndGggLSAxXSAmJiAoYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJncykpLnB1c2goYnVpbGRHcm91cHMoYXJncywgX3RoaXMpKSwgc3Vic3RpdHV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9zdXBlcltTeW1ib2wucmVwbGFjZV0uY2FsbCh0aGlzLCBzdHIsIHN1YnN0aXR1dGlvbik7XG4gICAgfSwgX3dyYXBSZWdFeHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHtcbiAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgIH0pO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBpZiAoa2V5IGluIG9iaikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ialtrZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgICB9XG5cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdWJDbGFzcywgXCJwcm90b3R5cGVcIiwge1xuICAgICAgd3JpdGFibGU6IGZhbHNlXG4gICAgfSk7XG4gICAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG4gIH1cblxuICBmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgICByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICAgIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGl0ZXJbU3ltYm9sLml0ZXJhdG9yXSAhPSBudWxsIHx8IGl0ZXJbXCJAQGl0ZXJhdG9yXCJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICAgIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcblxuICAgIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gICAgdmFyIF9hcnIgPSBbXTtcbiAgICB2YXIgX24gPSB0cnVlO1xuICAgIHZhciBfZCA9IGZhbHNlO1xuXG4gICAgdmFyIF9zLCBfZTtcblxuICAgIHRyeSB7XG4gICAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgX2QgPSB0cnVlO1xuICAgICAgX2UgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChfZCkgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIF9hcnI7XG4gIH1cblxuICBmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gICAgaWYgKCFvKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gICAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIH1cblxuICBmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICAgIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICB2YXIgbm9vcCA9IGZ1bmN0aW9uIG5vb3AoKSB7fTtcblxuICB2YXIgX1dJTkRPVyA9IHt9O1xuICB2YXIgX0RPQ1VNRU5UID0ge307XG4gIHZhciBfTVVUQVRJT05fT0JTRVJWRVIgPSBudWxsO1xuICB2YXIgX1BFUkZPUk1BTkNFID0ge1xuICAgIG1hcms6IG5vb3AsXG4gICAgbWVhc3VyZTogbm9vcFxuICB9O1xuXG4gIHRyeSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSBfV0lORE9XID0gd2luZG93O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSBfRE9DVU1FTlQgPSBkb2N1bWVudDtcbiAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnKSBfTVVUQVRJT05fT0JTRVJWRVIgPSBNdXRhdGlvbk9ic2VydmVyO1xuICAgIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnKSBfUEVSRk9STUFOQ0UgPSBwZXJmb3JtYW5jZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgX3JlZiA9IF9XSU5ET1cubmF2aWdhdG9yIHx8IHt9LFxuICAgICAgX3JlZiR1c2VyQWdlbnQgPSBfcmVmLnVzZXJBZ2VudCxcbiAgICAgIHVzZXJBZ2VudCA9IF9yZWYkdXNlckFnZW50ID09PSB2b2lkIDAgPyAnJyA6IF9yZWYkdXNlckFnZW50O1xuICB2YXIgV0lORE9XID0gX1dJTkRPVztcbiAgdmFyIERPQ1VNRU5UID0gX0RPQ1VNRU5UO1xuICB2YXIgTVVUQVRJT05fT0JTRVJWRVIgPSBfTVVUQVRJT05fT0JTRVJWRVI7XG4gIHZhciBQRVJGT1JNQU5DRSA9IF9QRVJGT1JNQU5DRTtcbiAgdmFyIElTX0JST1dTRVIgPSAhIVdJTkRPVy5kb2N1bWVudDtcbiAgdmFyIElTX0RPTSA9ICEhRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50ICYmICEhRE9DVU1FTlQuaGVhZCAmJiB0eXBlb2YgRE9DVU1FTlQuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgRE9DVU1FTlQuY3JlYXRlRWxlbWVudCA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIElTX0lFID0gfnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgfHwgfnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50LycpO1xuXG4gIHZhciBOQU1FU1BBQ0VfSURFTlRJRklFUiA9ICdfX19GT05UX0FXRVNPTUVfX18nO1xuICB2YXIgVU5JVFNfSU5fR1JJRCA9IDE2O1xuICB2YXIgREVGQVVMVF9GQU1JTFlfUFJFRklYID0gJ2ZhJztcbiAgdmFyIERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1MgPSAnc3ZnLWlubGluZS0tZmEnO1xuICB2YXIgREFUQV9GQV9JMlNWRyA9ICdkYXRhLWZhLWkyc3ZnJztcbiAgdmFyIERBVEFfRkFfUFNFVURPX0VMRU1FTlQgPSAnZGF0YS1mYS1wc2V1ZG8tZWxlbWVudCc7XG4gIHZhciBEQVRBX0ZBX1BTRVVET19FTEVNRU5UX1BFTkRJTkcgPSAnZGF0YS1mYS1wc2V1ZG8tZWxlbWVudC1wZW5kaW5nJztcbiAgdmFyIERBVEFfUFJFRklYID0gJ2RhdGEtcHJlZml4JztcbiAgdmFyIERBVEFfSUNPTiA9ICdkYXRhLWljb24nO1xuICB2YXIgSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTID0gJ2ZvbnRhd2Vzb21lLWkyc3ZnJztcbiAgdmFyIE1VVEFUSU9OX0FQUFJPQUNIX0FTWU5DID0gJ2FzeW5jJztcbiAgdmFyIFRBR05BTUVTX1RPX1NLSVBfRk9SX1BTRVVET0VMRU1FTlRTID0gWydIVE1MJywgJ0hFQUQnLCAnU1RZTEUnLCAnU0NSSVBUJ107XG4gIHZhciBQUk9EVUNUSU9OID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gXCJwcm9kdWN0aW9uXCIgPT09ICdwcm9kdWN0aW9uJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KCk7XG4gIHZhciBQUkVGSVhfVE9fU1RZTEUgPSB7XG4gICAgJ2Zhcyc6ICdzb2xpZCcsXG4gICAgJ2ZhLXNvbGlkJzogJ3NvbGlkJyxcbiAgICAnZmFyJzogJ3JlZ3VsYXInLFxuICAgICdmYS1yZWd1bGFyJzogJ3JlZ3VsYXInLFxuICAgICdmYWwnOiAnbGlnaHQnLFxuICAgICdmYS1saWdodCc6ICdsaWdodCcsXG4gICAgJ2ZhdCc6ICd0aGluJyxcbiAgICAnZmEtdGhpbic6ICd0aGluJyxcbiAgICAnZmFkJzogJ2R1b3RvbmUnLFxuICAgICdmYS1kdW90b25lJzogJ2R1b3RvbmUnLFxuICAgICdmYWInOiAnYnJhbmRzJyxcbiAgICAnZmEtYnJhbmRzJzogJ2JyYW5kcycsXG4gICAgJ2Zhayc6ICdraXQnLFxuICAgICdmYS1raXQnOiAna2l0JyxcbiAgICAnZmEnOiAnc29saWQnXG4gIH07XG4gIHZhciBTVFlMRV9UT19QUkVGSVggPSB7XG4gICAgJ3NvbGlkJzogJ2ZhcycsXG4gICAgJ3JlZ3VsYXInOiAnZmFyJyxcbiAgICAnbGlnaHQnOiAnZmFsJyxcbiAgICAndGhpbic6ICdmYXQnLFxuICAgICdkdW90b25lJzogJ2ZhZCcsXG4gICAgJ2JyYW5kcyc6ICdmYWInLFxuICAgICdraXQnOiAnZmFrJ1xuICB9O1xuICB2YXIgUFJFRklYX1RPX0xPTkdfU1RZTEUgPSB7XG4gICAgJ2ZhYic6ICdmYS1icmFuZHMnLFxuICAgICdmYWQnOiAnZmEtZHVvdG9uZScsXG4gICAgJ2Zhayc6ICdmYS1raXQnLFxuICAgICdmYWwnOiAnZmEtbGlnaHQnLFxuICAgICdmYXInOiAnZmEtcmVndWxhcicsXG4gICAgJ2Zhcyc6ICdmYS1zb2xpZCcsXG4gICAgJ2ZhdCc6ICdmYS10aGluJ1xuICB9O1xuICB2YXIgTE9OR19TVFlMRV9UT19QUkVGSVggPSB7XG4gICAgJ2ZhLWJyYW5kcyc6ICdmYWInLFxuICAgICdmYS1kdW90b25lJzogJ2ZhZCcsXG4gICAgJ2ZhLWtpdCc6ICdmYWsnLFxuICAgICdmYS1saWdodCc6ICdmYWwnLFxuICAgICdmYS1yZWd1bGFyJzogJ2ZhcicsXG4gICAgJ2ZhLXNvbGlkJzogJ2ZhcycsXG4gICAgJ2ZhLXRoaW4nOiAnZmF0J1xuICB9O1xuICB2YXIgSUNPTl9TRUxFQ1RJT05fU1lOVEFYX1BBVFRFUk4gPSAvZmFbc3JsdGRia1xcLVxcIF0vOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cbiAgdmFyIExBWUVSU19URVhUX0NMQVNTTkFNRSA9ICdmYS1sYXllcnMtdGV4dCc7XG4gIHZhciBGT05UX0ZBTUlMWV9QQVRURVJOID0gL0ZvbnQgP0F3ZXNvbWUgPyhbNTYgXSopKFNvbGlkfFJlZ3VsYXJ8TGlnaHR8VGhpbnxEdW90b25lfEJyYW5kc3xGcmVlfFByb3xLaXQpPy4qL2k7IC8vIFRPRE86IGRvIHdlIG5lZWQgdG8gaGFuZGxlIGZvbnQtd2VpZ2h0IGZvciBraXQgU1ZHIHBzZXVkby1lbGVtZW50cz9cblxuICB2YXIgRk9OVF9XRUlHSFRfVE9fUFJFRklYID0ge1xuICAgICc5MDAnOiAnZmFzJyxcbiAgICAnNDAwJzogJ2ZhcicsXG4gICAgJ25vcm1hbCc6ICdmYXInLFxuICAgICczMDAnOiAnZmFsJyxcbiAgICAnMTAwJzogJ2ZhdCdcbiAgfTtcbiAgdmFyIG9uZVRvVGVuID0gWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwXTtcbiAgdmFyIG9uZVRvVHdlbnR5ID0gb25lVG9UZW4uY29uY2F0KFsxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMF0pO1xuICB2YXIgQVRUUklCVVRFU19XQVRDSEVEX0ZPUl9NVVRBVElPTiA9IFsnY2xhc3MnLCAnZGF0YS1wcmVmaXgnLCAnZGF0YS1pY29uJywgJ2RhdGEtZmEtdHJhbnNmb3JtJywgJ2RhdGEtZmEtbWFzayddO1xuICB2YXIgRFVPVE9ORV9DTEFTU0VTID0ge1xuICAgIEdST1VQOiAnZHVvdG9uZS1ncm91cCcsXG4gICAgU1dBUF9PUEFDSVRZOiAnc3dhcC1vcGFjaXR5JyxcbiAgICBQUklNQVJZOiAncHJpbWFyeScsXG4gICAgU0VDT05EQVJZOiAnc2Vjb25kYXJ5J1xuICB9O1xuICB2YXIgUkVTRVJWRURfQ0xBU1NFUyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoT2JqZWN0LmtleXMoU1RZTEVfVE9fUFJFRklYKSksIFsnMnhzJywgJ3hzJywgJ3NtJywgJ2xnJywgJ3hsJywgJzJ4bCcsICdiZWF0JywgJ2JvcmRlcicsICdmYWRlJywgJ2JlYXQtZmFkZScsICdib3VuY2UnLCAnZmxpcC1ib3RoJywgJ2ZsaXAtaG9yaXpvbnRhbCcsICdmbGlwLXZlcnRpY2FsJywgJ2ZsaXAnLCAnZncnLCAnaW52ZXJzZScsICdsYXllcnMtY291bnRlcicsICdsYXllcnMtdGV4dCcsICdsYXllcnMnLCAnbGknLCAncHVsbC1sZWZ0JywgJ3B1bGwtcmlnaHQnLCAncHVsc2UnLCAncm90YXRlLTE4MCcsICdyb3RhdGUtMjcwJywgJ3JvdGF0ZS05MCcsICdyb3RhdGUtYnknLCAnc2hha2UnLCAnc3Bpbi1wdWxzZScsICdzcGluLXJldmVyc2UnLCAnc3BpbicsICdzdGFjay0xeCcsICdzdGFjay0yeCcsICdzdGFjaycsICd1bCcsIERVT1RPTkVfQ0xBU1NFUy5HUk9VUCwgRFVPVE9ORV9DTEFTU0VTLlNXQVBfT1BBQ0lUWSwgRFVPVE9ORV9DTEFTU0VTLlBSSU1BUlksIERVT1RPTkVfQ0xBU1NFUy5TRUNPTkRBUlldKS5jb25jYXQob25lVG9UZW4ubWFwKGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KG4sIFwieFwiKTtcbiAgfSkpLmNvbmNhdChvbmVUb1R3ZW50eS5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gXCJ3LVwiLmNvbmNhdChuKTtcbiAgfSkpO1xuXG4gIHZhciBpbml0aWFsID0gV0lORE9XLkZvbnRBd2Vzb21lQ29uZmlnIHx8IHt9O1xuXG4gIGZ1bmN0aW9uIGdldEF0dHJDb25maWcoYXR0cikge1xuICAgIHZhciBlbGVtZW50ID0gRE9DVU1FTlQucXVlcnlTZWxlY3Rvcignc2NyaXB0WycgKyBhdHRyICsgJ10nKTtcblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICAgIC8vIEdldHRpbmcgYW4gZW1wdHkgc3RyaW5nIHdpbGwgb2NjdXIgaWYgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgb24gdGhlIEhUTUwgdGFnIGJ1dCB3aXRob3V0IGEgdmFsdWVcbiAgICAvLyBXZSdsbCBhc3N1bWUgdGhhdCB0aGlzIGlzIGFuIGluZGljYXRpb24gdGhhdCBpdCBzaG91bGQgYmUgdG9nZ2xlZCB0byB0cnVlXG4gICAgaWYgKHZhbCA9PT0gJycpIHJldHVybiB0cnVlO1xuICAgIGlmICh2YWwgPT09ICdmYWxzZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodmFsID09PSAndHJ1ZScpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBpZiAoRE9DVU1FTlQgJiYgdHlwZW9mIERPQ1VNRU5ULnF1ZXJ5U2VsZWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYXR0cnMgPSBbWydkYXRhLWZhbWlseS1wcmVmaXgnLCAnZmFtaWx5UHJlZml4J10sIFsnZGF0YS1zdHlsZS1kZWZhdWx0JywgJ3N0eWxlRGVmYXVsdCddLCBbJ2RhdGEtcmVwbGFjZW1lbnQtY2xhc3MnLCAncmVwbGFjZW1lbnRDbGFzcyddLCBbJ2RhdGEtYXV0by1yZXBsYWNlLXN2ZycsICdhdXRvUmVwbGFjZVN2ZyddLCBbJ2RhdGEtYXV0by1hZGQtY3NzJywgJ2F1dG9BZGRDc3MnXSwgWydkYXRhLWF1dG8tYTExeScsICdhdXRvQTExeSddLCBbJ2RhdGEtc2VhcmNoLXBzZXVkby1lbGVtZW50cycsICdzZWFyY2hQc2V1ZG9FbGVtZW50cyddLCBbJ2RhdGEtb2JzZXJ2ZS1tdXRhdGlvbnMnLCAnb2JzZXJ2ZU11dGF0aW9ucyddLCBbJ2RhdGEtbXV0YXRlLWFwcHJvYWNoJywgJ211dGF0ZUFwcHJvYWNoJ10sIFsnZGF0YS1rZWVwLW9yaWdpbmFsLXNvdXJjZScsICdrZWVwT3JpZ2luYWxTb3VyY2UnXSwgWydkYXRhLW1lYXN1cmUtcGVyZm9ybWFuY2UnLCAnbWVhc3VyZVBlcmZvcm1hbmNlJ10sIFsnZGF0YS1zaG93LW1pc3NpbmctaWNvbnMnLCAnc2hvd01pc3NpbmdJY29ucyddXTtcbiAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICBhdHRyID0gX3JlZjJbMF0sXG4gICAgICAgICAga2V5ID0gX3JlZjJbMV07XG5cbiAgICAgIHZhciB2YWwgPSBjb2VyY2UoZ2V0QXR0ckNvbmZpZyhhdHRyKSk7XG5cbiAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCAmJiB2YWwgIT09IG51bGwpIHtcbiAgICAgICAgaW5pdGlhbFtrZXldID0gdmFsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9kZWZhdWx0ID0ge1xuICAgIGZhbWlseVByZWZpeDogREVGQVVMVF9GQU1JTFlfUFJFRklYLFxuICAgIHN0eWxlRGVmYXVsdDogJ3NvbGlkJyxcbiAgICByZXBsYWNlbWVudENsYXNzOiBERUZBVUxUX1JFUExBQ0VNRU5UX0NMQVNTLFxuICAgIGF1dG9SZXBsYWNlU3ZnOiB0cnVlLFxuICAgIGF1dG9BZGRDc3M6IHRydWUsXG4gICAgYXV0b0ExMXk6IHRydWUsXG4gICAgc2VhcmNoUHNldWRvRWxlbWVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVNdXRhdGlvbnM6IHRydWUsXG4gICAgbXV0YXRlQXBwcm9hY2g6ICdhc3luYycsXG4gICAga2VlcE9yaWdpbmFsU291cmNlOiB0cnVlLFxuICAgIG1lYXN1cmVQZXJmb3JtYW5jZTogZmFsc2UsXG4gICAgc2hvd01pc3NpbmdJY29uczogdHJ1ZVxuICB9O1xuXG4gIHZhciBfY29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIF9kZWZhdWx0KSwgaW5pdGlhbCk7XG5cbiAgaWYgKCFfY29uZmlnLmF1dG9SZXBsYWNlU3ZnKSBfY29uZmlnLm9ic2VydmVNdXRhdGlvbnMgPSBmYWxzZTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuICBPYmplY3Qua2V5cyhfY29uZmlnKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uZmlnLCBrZXksIHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgX2NvbmZpZ1trZXldID0gdmFsO1xuXG4gICAgICAgIF9vbkNoYW5nZUNiLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgcmV0dXJuIGNiKGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2NvbmZpZ1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgV0lORE9XLkZvbnRBd2Vzb21lQ29uZmlnID0gY29uZmlnO1xuICB2YXIgX29uQ2hhbmdlQ2IgPSBbXTtcbiAgZnVuY3Rpb24gb25DaGFuZ2UoY2IpIHtcbiAgICBfb25DaGFuZ2VDYi5wdXNoKGNiKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBfb25DaGFuZ2VDYi5zcGxpY2UoX29uQ2hhbmdlQ2IuaW5kZXhPZihjYiksIDEpO1xuICAgIH07XG4gIH1cblxuICB2YXIgZCA9IFVOSVRTX0lOX0dSSUQ7XG4gIHZhciBtZWFuaW5nbGVzc1RyYW5zZm9ybSA9IHtcbiAgICBzaXplOiAxNixcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgcm90YXRlOiAwLFxuICAgIGZsaXBYOiBmYWxzZSxcbiAgICBmbGlwWTogZmFsc2VcbiAgfTtcbiAgZnVuY3Rpb24gYnVua2VyKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGZuLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKCFQUk9EVUNUSU9OKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluc2VydENzcyhjc3MpIHtcbiAgICBpZiAoIWNzcyB8fCAhSVNfRE9NKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKTtcbiAgICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7XG4gICAgdmFyIGhlYWRDaGlsZHJlbiA9IERPQ1VNRU5ULmhlYWQuY2hpbGROb2RlcztcbiAgICB2YXIgYmVmb3JlQ2hpbGQgPSBudWxsO1xuXG4gICAgZm9yICh2YXIgaSA9IGhlYWRDaGlsZHJlbi5sZW5ndGggLSAxOyBpID4gLTE7IGktLSkge1xuICAgICAgdmFyIGNoaWxkID0gaGVhZENoaWxkcmVuW2ldO1xuICAgICAgdmFyIHRhZ05hbWUgPSAoY2hpbGQudGFnTmFtZSB8fCAnJykudG9VcHBlckNhc2UoKTtcblxuICAgICAgaWYgKFsnU1RZTEUnLCAnTElOSyddLmluZGV4T2YodGFnTmFtZSkgPiAtMSkge1xuICAgICAgICBiZWZvcmVDaGlsZCA9IGNoaWxkO1xuICAgICAgfVxuICAgIH1cblxuICAgIERPQ1VNRU5ULmhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBiZWZvcmVDaGlsZCk7XG4gICAgcmV0dXJuIGNzcztcbiAgfVxuICB2YXIgaWRQb29sID0gJzAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJztcbiAgZnVuY3Rpb24gbmV4dFVuaXF1ZUlkKCkge1xuICAgIHZhciBzaXplID0gMTI7XG4gICAgdmFyIGlkID0gJyc7XG5cbiAgICB3aGlsZSAoc2l6ZS0tID4gMCkge1xuICAgICAgaWQgKz0gaWRQb29sW01hdGgucmFuZG9tKCkgKiA2MiB8IDBdO1xuICAgIH1cblxuICAgIHJldHVybiBpZDtcbiAgfVxuICBmdW5jdGlvbiB0b0FycmF5KG9iaikge1xuICAgIHZhciBhcnJheSA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IChvYmogfHwgW10pLmxlbmd0aCA+Pj4gMDsgaS0tOykge1xuICAgICAgYXJyYXlbaV0gPSBvYmpbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIGZ1bmN0aW9uIGNsYXNzQXJyYXkobm9kZSkge1xuICAgIGlmIChub2RlLmNsYXNzTGlzdCkge1xuICAgICAgcmV0dXJuIHRvQXJyYXkobm9kZS5jbGFzc0xpc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKG5vZGUuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKS5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBodG1sRXNjYXBlKHN0cikge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzdHIpLnJlcGxhY2UoLyYvZywgJyZhbXA7JykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLnJlcGxhY2UoLycvZywgJyYjMzk7JykucmVwbGFjZSgvPC9nLCAnJmx0OycpLnJlcGxhY2UoLz4vZywgJyZndDsnKTtcbiAgfVxuICBmdW5jdGlvbiBqb2luQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMgfHwge30pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICByZXR1cm4gYWNjICsgXCJcIi5jb25jYXQoYXR0cmlidXRlTmFtZSwgXCI9XFxcIlwiKS5jb25jYXQoaHRtbEVzY2FwZShhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdKSwgXCJcXFwiIFwiKTtcbiAgICB9LCAnJykudHJpbSgpO1xuICB9XG4gIGZ1bmN0aW9uIGpvaW5TdHlsZXMoc3R5bGVzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlcyB8fCB7fSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHN0eWxlTmFtZSkge1xuICAgICAgcmV0dXJuIGFjYyArIFwiXCIuY29uY2F0KHN0eWxlTmFtZSwgXCI6IFwiKS5jb25jYXQoc3R5bGVzW3N0eWxlTmFtZV0udHJpbSgpLCBcIjtcIik7XG4gICAgfSwgJycpO1xuICB9XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtLnNpemUgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnNpemUgfHwgdHJhbnNmb3JtLnggIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnggfHwgdHJhbnNmb3JtLnkgIT09IG1lYW5pbmdsZXNzVHJhbnNmb3JtLnkgfHwgdHJhbnNmb3JtLnJvdGF0ZSAhPT0gbWVhbmluZ2xlc3NUcmFuc2Zvcm0ucm90YXRlIHx8IHRyYW5zZm9ybS5mbGlwWCB8fCB0cmFuc2Zvcm0uZmxpcFk7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNmb3JtRm9yU3ZnKF9yZWYpIHtcbiAgICB2YXIgdHJhbnNmb3JtID0gX3JlZi50cmFuc2Zvcm0sXG4gICAgICAgIGNvbnRhaW5lcldpZHRoID0gX3JlZi5jb250YWluZXJXaWR0aCxcbiAgICAgICAgaWNvbldpZHRoID0gX3JlZi5pY29uV2lkdGg7XG4gICAgdmFyIG91dGVyID0ge1xuICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQoY29udGFpbmVyV2lkdGggLyAyLCBcIiAyNTYpXCIpXG4gICAgfTtcbiAgICB2YXIgaW5uZXJUcmFuc2xhdGUgPSBcInRyYW5zbGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnggKiAzMiwgXCIsIFwiKS5jb25jYXQodHJhbnNmb3JtLnkgKiAzMiwgXCIpIFwiKTtcbiAgICB2YXIgaW5uZXJTY2FsZSA9IFwic2NhbGUoXCIuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gMTYgKiAodHJhbnNmb3JtLmZsaXBYID8gLTEgOiAxKSwgXCIsIFwiKS5jb25jYXQodHJhbnNmb3JtLnNpemUgLyAxNiAqICh0cmFuc2Zvcm0uZmxpcFkgPyAtMSA6IDEpLCBcIikgXCIpO1xuICAgIHZhciBpbm5lclJvdGF0ZSA9IFwicm90YXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ucm90YXRlLCBcIiAwIDApXCIpO1xuICAgIHZhciBpbm5lciA9IHtcbiAgICAgIHRyYW5zZm9ybTogXCJcIi5jb25jYXQoaW5uZXJUcmFuc2xhdGUsIFwiIFwiKS5jb25jYXQoaW5uZXJTY2FsZSwgXCIgXCIpLmNvbmNhdChpbm5lclJvdGF0ZSlcbiAgICB9O1xuICAgIHZhciBwYXRoID0ge1xuICAgICAgdHJhbnNmb3JtOiBcInRyYW5zbGF0ZShcIi5jb25jYXQoaWNvbldpZHRoIC8gMiAqIC0xLCBcIiAtMjU2KVwiKVxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIG91dGVyOiBvdXRlcixcbiAgICAgIGlubmVyOiBpbm5lcixcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHRyYW5zZm9ybUZvckNzcyhfcmVmMikge1xuICAgIHZhciB0cmFuc2Zvcm0gPSBfcmVmMi50cmFuc2Zvcm0sXG4gICAgICAgIF9yZWYyJHdpZHRoID0gX3JlZjIud2lkdGgsXG4gICAgICAgIHdpZHRoID0gX3JlZjIkd2lkdGggPT09IHZvaWQgMCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiR3aWR0aCxcbiAgICAgICAgX3JlZjIkaGVpZ2h0ID0gX3JlZjIuaGVpZ2h0LFxuICAgICAgICBoZWlnaHQgPSBfcmVmMiRoZWlnaHQgPT09IHZvaWQgMCA/IFVOSVRTX0lOX0dSSUQgOiBfcmVmMiRoZWlnaHQsXG4gICAgICAgIF9yZWYyJHN0YXJ0Q2VudGVyZWQgPSBfcmVmMi5zdGFydENlbnRlcmVkLFxuICAgICAgICBzdGFydENlbnRlcmVkID0gX3JlZjIkc3RhcnRDZW50ZXJlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRzdGFydENlbnRlcmVkO1xuICAgIHZhciB2YWwgPSAnJztcblxuICAgIGlmIChzdGFydENlbnRlcmVkICYmIElTX0lFKSB7XG4gICAgICB2YWwgKz0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54IC8gZCAtIHdpZHRoIC8gMiwgXCJlbSwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0ueSAvIGQgLSBoZWlnaHQgLyAyLCBcImVtKSBcIik7XG4gICAgfSBlbHNlIGlmIChzdGFydENlbnRlcmVkKSB7XG4gICAgICB2YWwgKz0gXCJ0cmFuc2xhdGUoY2FsYygtNTAlICsgXCIuY29uY2F0KHRyYW5zZm9ybS54IC8gZCwgXCJlbSksIGNhbGMoLTUwJSArIFwiKS5jb25jYXQodHJhbnNmb3JtLnkgLyBkLCBcImVtKSkgXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgKz0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54IC8gZCwgXCJlbSwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0ueSAvIGQsIFwiZW0pIFwiKTtcbiAgICB9XG5cbiAgICB2YWwgKz0gXCJzY2FsZShcIi5jb25jYXQodHJhbnNmb3JtLnNpemUgLyBkICogKHRyYW5zZm9ybS5mbGlwWCA/IC0xIDogMSksIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS5zaXplIC8gZCAqICh0cmFuc2Zvcm0uZmxpcFkgPyAtMSA6IDEpLCBcIikgXCIpO1xuICAgIHZhbCArPSBcInJvdGF0ZShcIi5jb25jYXQodHJhbnNmb3JtLnJvdGF0ZSwgXCJkZWcpIFwiKTtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgdmFyIGJhc2VTdHlsZXMgPSBcIjpob3N0LDpyb290ey0tZmEtZm9udC1zb2xpZDpub3JtYWwgOTAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBTb2xpZFxcXCI7LS1mYS1mb250LXJlZ3VsYXI6bm9ybWFsIDQwMCAxZW0vMSBcXFwiRm9udCBBd2Vzb21lIDYgUmVndWxhclxcXCI7LS1mYS1mb250LWxpZ2h0Om5vcm1hbCAzMDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IExpZ2h0XFxcIjstLWZhLWZvbnQtdGhpbjpub3JtYWwgMTAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBUaGluXFxcIjstLWZhLWZvbnQtZHVvdG9uZTpub3JtYWwgOTAwIDFlbS8xIFxcXCJGb250IEF3ZXNvbWUgNiBEdW90b25lXFxcIjstLWZhLWZvbnQtYnJhbmRzOm5vcm1hbCA0MDAgMWVtLzEgXFxcIkZvbnQgQXdlc29tZSA2IEJyYW5kc1xcXCJ9c3ZnOm5vdCg6aG9zdCkuc3ZnLWlubGluZS0tZmEsc3ZnOm5vdCg6cm9vdCkuc3ZnLWlubGluZS0tZmF7b3ZlcmZsb3c6dmlzaWJsZTtib3gtc2l6aW5nOmNvbnRlbnQtYm94fS5zdmctaW5saW5lLS1mYXtkaXNwbGF5OnZhcigtLWZhLWRpc3BsYXksaW5saW5lLWJsb2NrKTtoZWlnaHQ6MWVtO292ZXJmbG93OnZpc2libGU7dmVydGljYWwtYWxpZ246LS4xMjVlbX0uc3ZnLWlubGluZS0tZmEuZmEtMnhze3ZlcnRpY2FsLWFsaWduOi4xZW19LnN2Zy1pbmxpbmUtLWZhLmZhLXhze3ZlcnRpY2FsLWFsaWduOjB9LnN2Zy1pbmxpbmUtLWZhLmZhLXNte3ZlcnRpY2FsLWFsaWduOi0uMDcxNDI4NTcwNWVtfS5zdmctaW5saW5lLS1mYS5mYS1sZ3t2ZXJ0aWNhbC1hbGlnbjotLjJlbX0uc3ZnLWlubGluZS0tZmEuZmEteGx7dmVydGljYWwtYWxpZ246LS4yNWVtfS5zdmctaW5saW5lLS1mYS5mYS0yeGx7dmVydGljYWwtYWxpZ246LS4zMTI1ZW19LnN2Zy1pbmxpbmUtLWZhLmZhLXB1bGwtbGVmdHttYXJnaW4tcmlnaHQ6dmFyKC0tZmEtcHVsbC1tYXJnaW4sLjNlbSk7d2lkdGg6YXV0b30uc3ZnLWlubGluZS0tZmEuZmEtcHVsbC1yaWdodHttYXJnaW4tbGVmdDp2YXIoLS1mYS1wdWxsLW1hcmdpbiwuM2VtKTt3aWR0aDphdXRvfS5zdmctaW5saW5lLS1mYS5mYS1saXt3aWR0aDp2YXIoLS1mYS1saS13aWR0aCwyZW0pO3RvcDouMjVlbX0uc3ZnLWlubGluZS0tZmEuZmEtZnd7d2lkdGg6dmFyKC0tZmEtZnctd2lkdGgsMS4yNWVtKX0uZmEtbGF5ZXJzIHN2Zy5zdmctaW5saW5lLS1mYXtib3R0b206MDtsZWZ0OjA7bWFyZ2luOmF1dG87cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MH0uZmEtbGF5ZXJzLWNvdW50ZXIsLmZhLWxheWVycy10ZXh0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RleHQtYWxpZ246Y2VudGVyfS5mYS1sYXllcnN7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjFlbTtwb3NpdGlvbjpyZWxhdGl2ZTt0ZXh0LWFsaWduOmNlbnRlcjt2ZXJ0aWNhbC1hbGlnbjotLjEyNWVtO3dpZHRoOjFlbX0uZmEtbGF5ZXJzIHN2Zy5zdmctaW5saW5lLS1mYXstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcjt0cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBjZW50ZXJ9LmZhLWxheWVycy10ZXh0e2xlZnQ6NTAlO3RvcDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgY2VudGVyO3RyYW5zZm9ybS1vcmlnaW46Y2VudGVyIGNlbnRlcn0uZmEtbGF5ZXJzLWNvdW50ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1mYS1jb3VudGVyLWJhY2tncm91bmQtY29sb3IsI2ZmMjUzYSk7Ym9yZGVyLXJhZGl1czp2YXIoLS1mYS1jb3VudGVyLWJvcmRlci1yYWRpdXMsMWVtKTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Y29sb3I6dmFyKC0tZmEtaW52ZXJzZSwjZmZmKTtsaW5lLWhlaWdodDp2YXIoLS1mYS1jb3VudGVyLWxpbmUtaGVpZ2h0LDEpO21heC13aWR0aDp2YXIoLS1mYS1jb3VudGVyLW1heC13aWR0aCw1ZW0pO21pbi13aWR0aDp2YXIoLS1mYS1jb3VudGVyLW1pbi13aWR0aCwxLjVlbSk7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmc6dmFyKC0tZmEtY291bnRlci1wYWRkaW5nLC4yNWVtIC41ZW0pO3JpZ2h0OnZhcigtLWZhLXJpZ2h0LDApO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7dG9wOnZhcigtLWZhLXRvcCwwKTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1jb3VudGVyLXNjYWxlLC4yNSkpO3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1jb3VudGVyLXNjYWxlLC4yNSkpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgcmlnaHQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgcmlnaHR9LmZhLWxheWVycy1ib3R0b20tcmlnaHR7Ym90dG9tOnZhcigtLWZhLWJvdHRvbSwwKTtyaWdodDp2YXIoLS1mYS1yaWdodCwwKTt0b3A6YXV0bzstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsLjI1KSk7dHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwuMjUpKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Ym90dG9tIHJpZ2h0O3RyYW5zZm9ybS1vcmlnaW46Ym90dG9tIHJpZ2h0fS5mYS1sYXllcnMtYm90dG9tLWxlZnR7Ym90dG9tOnZhcigtLWZhLWJvdHRvbSwwKTtsZWZ0OnZhcigtLWZhLWxlZnQsMCk7cmlnaHQ6YXV0bzt0b3A6YXV0bzstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1sYXllcnMtc2NhbGUsLjI1KSk7dHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwuMjUpKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Ym90dG9tIGxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpib3R0b20gbGVmdH0uZmEtbGF5ZXJzLXRvcC1yaWdodHt0b3A6dmFyKC0tZmEtdG9wLDApO3JpZ2h0OnZhcigtLWZhLXJpZ2h0LDApOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwuMjUpKTt0cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLC4yNSkpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgcmlnaHQ7dHJhbnNmb3JtLW9yaWdpbjp0b3AgcmlnaHR9LmZhLWxheWVycy10b3AtbGVmdHtsZWZ0OnZhcigtLWZhLWxlZnQsMCk7cmlnaHQ6YXV0bzt0b3A6dmFyKC0tZmEtdG9wLDApOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWxheWVycy1zY2FsZSwuMjUpKTt0cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtbGF5ZXJzLXNjYWxlLC4yNSkpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDt0cmFuc2Zvcm0tb3JpZ2luOnRvcCBsZWZ0fS5mYS0xeHtmb250LXNpemU6MWVtfS5mYS0yeHtmb250LXNpemU6MmVtfS5mYS0zeHtmb250LXNpemU6M2VtfS5mYS00eHtmb250LXNpemU6NGVtfS5mYS01eHtmb250LXNpemU6NWVtfS5mYS02eHtmb250LXNpemU6NmVtfS5mYS03eHtmb250LXNpemU6N2VtfS5mYS04eHtmb250LXNpemU6OGVtfS5mYS05eHtmb250LXNpemU6OWVtfS5mYS0xMHh7Zm9udC1zaXplOjEwZW19LmZhLTJ4c3tmb250LXNpemU6LjYyNWVtO2xpbmUtaGVpZ2h0Oi4xZW07dmVydGljYWwtYWxpZ246LjIyNWVtfS5mYS14c3tmb250LXNpemU6Ljc1ZW07bGluZS1oZWlnaHQ6LjA4MzMzMzMzMzdlbTt2ZXJ0aWNhbC1hbGlnbjouMTI1ZW19LmZhLXNte2ZvbnQtc2l6ZTouODc1ZW07bGluZS1oZWlnaHQ6LjA3MTQyODU3MThlbTt2ZXJ0aWNhbC1hbGlnbjouMDUzNTcxNDI5NWVtfS5mYS1sZ3tmb250LXNpemU6MS4yNWVtO2xpbmUtaGVpZ2h0Oi4wNWVtO3ZlcnRpY2FsLWFsaWduOi0uMDc1ZW19LmZhLXhse2ZvbnQtc2l6ZToxLjVlbTtsaW5lLWhlaWdodDouMDQxNjY2NjY4MmVtO3ZlcnRpY2FsLWFsaWduOi0uMTI1ZW19LmZhLTJ4bHtmb250LXNpemU6MmVtO2xpbmUtaGVpZ2h0Oi4wMzEyNWVtO3ZlcnRpY2FsLWFsaWduOi0uMTg3NWVtfS5mYS1md3t0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDoxLjI1ZW19LmZhLXVse2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbi1sZWZ0OnZhcigtLWZhLWxpLW1hcmdpbiwyLjVlbSk7cGFkZGluZy1sZWZ0OjB9LmZhLXVsPmxpe3Bvc2l0aW9uOnJlbGF0aXZlfS5mYS1saXtsZWZ0OmNhbGModmFyKC0tZmEtbGktd2lkdGgsMmVtKSAqIC0xKTtwb3NpdGlvbjphYnNvbHV0ZTt0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDp2YXIoLS1mYS1saS13aWR0aCwyZW0pO2xpbmUtaGVpZ2h0OmluaGVyaXR9LmZhLWJvcmRlcntib3JkZXItY29sb3I6dmFyKC0tZmEtYm9yZGVyLWNvbG9yLCNlZWUpO2JvcmRlci1yYWRpdXM6dmFyKC0tZmEtYm9yZGVyLXJhZGl1cywuMWVtKTtib3JkZXItc3R5bGU6dmFyKC0tZmEtYm9yZGVyLXN0eWxlLHNvbGlkKTtib3JkZXItd2lkdGg6dmFyKC0tZmEtYm9yZGVyLXdpZHRoLC4wOGVtKTtwYWRkaW5nOnZhcigtLWZhLWJvcmRlci1wYWRkaW5nLC4yZW0gLjI1ZW0gLjE1ZW0pfS5mYS1wdWxsLWxlZnR7ZmxvYXQ6bGVmdDttYXJnaW4tcmlnaHQ6dmFyKC0tZmEtcHVsbC1tYXJnaW4sLjNlbSl9LmZhLXB1bGwtcmlnaHR7ZmxvYXQ6cmlnaHQ7bWFyZ2luLWxlZnQ6dmFyKC0tZmEtcHVsbC1tYXJnaW4sLjNlbSl9LmZhLWJlYXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYS1iZWF0O2FuaW1hdGlvbi1uYW1lOmZhLWJlYXQ7LXdlYmtpdC1hbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApO2FuaW1hdGlvbi1kZWxheTp2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksMCk7LXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sbm9ybWFsKTthbmltYXRpb24tZGlyZWN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sbm9ybWFsKTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sMXMpO2FuaW1hdGlvbi1kdXJhdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sMXMpOy13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OnZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsaW5maW5pdGUpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLGVhc2UtaW4tb3V0KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsZWFzZS1pbi1vdXQpfS5mYS1ib3VuY2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYS1ib3VuY2U7YW5pbWF0aW9uLW5hbWU6ZmEtYm91bmNlOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OnZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwwKTthbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApOy13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7YW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTthbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxjdWJpYy1iZXppZXIoLjI4LC44NCwuNDIsMSkpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxjdWJpYy1iZXppZXIoLjI4LC44NCwuNDIsMSkpfS5mYS1mYWRley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmEtZmFkZTthbmltYXRpb24tbmFtZTpmYS1mYWRlOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OnZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwwKTthbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApOy13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7YW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTthbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxjdWJpYy1iZXppZXIoLjQsMCwuNiwxKSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLGN1YmljLWJlemllciguNCwwLC42LDEpKX0uZmEtYmVhdC1mYWRley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmEtYmVhdC1mYWRlO2FuaW1hdGlvbi1uYW1lOmZhLWJlYXQtZmFkZTstd2Via2l0LWFuaW1hdGlvbi1kZWxheTp2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksMCk7YW5pbWF0aW9uLWRlbGF5OnZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwwKTstd2Via2l0LWFuaW1hdGlvbi1kaXJlY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbixub3JtYWwpO2FuaW1hdGlvbi1kaXJlY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLWRpcmVjdGlvbixub3JtYWwpOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwxcyk7YW5pbWF0aW9uLWR1cmF0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kdXJhdGlvbiwxcyk7LXdlYmtpdC1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50OnZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsaW5maW5pdGUpO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsY3ViaWMtYmV6aWVyKC40LDAsLjYsMSkpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxjdWJpYy1iZXppZXIoLjQsMCwuNiwxKSl9LmZhLWZsaXB7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmYS1mbGlwO2FuaW1hdGlvbi1uYW1lOmZhLWZsaXA7LXdlYmtpdC1hbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApO2FuaW1hdGlvbi1kZWxheTp2YXIoLS1mYS1hbmltYXRpb24tZGVsYXksMCk7LXdlYmtpdC1hbmltYXRpb24tZGlyZWN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sbm9ybWFsKTthbmltYXRpb24tZGlyZWN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi1kaXJlY3Rpb24sbm9ybWFsKTstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sMXMpO2FuaW1hdGlvbi1kdXJhdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZHVyYXRpb24sMXMpOy13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OnZhcigtLWZhLWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQsaW5maW5pdGUpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLGVhc2UtaW4tb3V0KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOnZhcigtLWZhLWFuaW1hdGlvbi10aW1pbmcsZWFzZS1pbi1vdXQpfS5mYS1zaGFrZXstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmZhLXNoYWtlO2FuaW1hdGlvbi1uYW1lOmZhLXNoYWtlOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OnZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwwKTthbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApOy13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7YW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTthbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxsaW5lYXIpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxsaW5lYXIpfS5mYS1zcGluey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmEtc3BpbjthbmltYXRpb24tbmFtZTpmYS1zcGluOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OnZhcigtLWZhLWFuaW1hdGlvbi1kZWxheSwwKTthbmltYXRpb24tZGVsYXk6dmFyKC0tZmEtYW5pbWF0aW9uLWRlbGF5LDApOy13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7YW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDJzKTthbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDJzKTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxsaW5lYXIpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxsaW5lYXIpfS5mYS1zcGluLXJldmVyc2V7LS1mYS1hbmltYXRpb24tZGlyZWN0aW9uOnJldmVyc2V9LmZhLXB1bHNlLC5mYS1zcGluLXB1bHNley13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZmEtc3BpbjthbmltYXRpb24tbmFtZTpmYS1zcGluOy13ZWJraXQtYW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7YW5pbWF0aW9uLWRpcmVjdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tZGlyZWN0aW9uLG5vcm1hbCk7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTthbmltYXRpb24tZHVyYXRpb246dmFyKC0tZmEtYW5pbWF0aW9uLWR1cmF0aW9uLDFzKTstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6dmFyKC0tZmEtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudCxpbmZpbml0ZSk7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDp2YXIoLS1mYS1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50LGluZmluaXRlKTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246dmFyKC0tZmEtYW5pbWF0aW9uLXRpbWluZyxzdGVwcyg4KSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjp2YXIoLS1mYS1hbmltYXRpb24tdGltaW5nLHN0ZXBzKDgpKX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246cmVkdWNlKXsuZmEtYmVhdCwuZmEtYmVhdC1mYWRlLC5mYS1ib3VuY2UsLmZhLWZhZGUsLmZhLWZsaXAsLmZhLXB1bHNlLC5mYS1zaGFrZSwuZmEtc3BpbiwuZmEtc3Bpbi1wdWxzZXstd2Via2l0LWFuaW1hdGlvbi1kZWxheTotMW1zO2FuaW1hdGlvbi1kZWxheTotMW1zOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOjFtczthbmltYXRpb24tZHVyYXRpb246MW1zOy13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDoxO2FuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6MTt0cmFuc2l0aW9uLWRlbGF5OjBzO3RyYW5zaXRpb24tZHVyYXRpb246MHN9fUAtd2Via2l0LWtleWZyYW1lcyBmYS1iZWF0ezAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NDUley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsMS4yNSkpO3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1iZWF0LXNjYWxlLDEuMjUpKX19QGtleWZyYW1lcyBmYS1iZWF0ezAlLDkwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NDUley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJlYXQtc2NhbGUsMS4yNSkpO3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1iZWF0LXNjYWxlLDEuMjUpKX19QC13ZWJraXQta2V5ZnJhbWVzIGZhLWJvdW5jZXswJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLDEpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSgwKX0xMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsMS4xKSx2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteSwuOSkpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS14LDEuMSksdmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXksLjkpKSB0cmFuc2xhdGVZKDApfTMwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS14LC45KSx2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS15LDEuMSkpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLWhlaWdodCwtLjVlbSkpO3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS14LC45KSx2YXIoLS1mYS1ib3VuY2UtanVtcC1zY2FsZS15LDEuMSkpIHRyYW5zbGF0ZVkodmFyKC0tZmEtYm91bmNlLWhlaWdodCwtLjVlbSkpfTUwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS14LDEuMDUpLHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXksLjk1KSkgdHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteCwxLjA1KSx2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS15LC45NSkpIHRyYW5zbGF0ZVkoMCl9NTcley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtcmVib3VuZCwtLjEyNWVtKSk7dHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtcmVib3VuZCwtLjEyNWVtKSl9NjQley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpzY2FsZSgxLDEpIHRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgZmEtYm91bmNlezAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKDApfTEwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteCwxLjEpLHZhcigtLWZhLWJvdW5jZS1zdGFydC1zY2FsZS15LC45KSkgdHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtYm91bmNlLXN0YXJ0LXNjYWxlLXgsMS4xKSx2YXIoLS1mYS1ib3VuY2Utc3RhcnQtc2NhbGUteSwuOSkpIHRyYW5zbGF0ZVkoMCl9MzAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXgsLjkpLHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXksMS4xKSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtaGVpZ2h0LC0uNWVtKSk7dHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXgsLjkpLHZhcigtLWZhLWJvdW5jZS1qdW1wLXNjYWxlLXksMS4xKSkgdHJhbnNsYXRlWSh2YXIoLS1mYS1ib3VuY2UtaGVpZ2h0LC0uNWVtKSl9NTAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXgsMS4wNSksdmFyKC0tZmEtYm91bmNlLWxhbmQtc2NhbGUteSwuOTUpKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1ib3VuY2UtbGFuZC1zY2FsZS14LDEuMDUpLHZhcigtLWZhLWJvdW5jZS1sYW5kLXNjYWxlLXksLjk1KSkgdHJhbnNsYXRlWSgwKX01NyV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1yZWJvdW5kLC0uMTI1ZW0pKTt0cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKHZhcigtLWZhLWJvdW5jZS1yZWJvdW5kLC0uMTI1ZW0pKX02NCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSwxKSB0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTpzY2FsZSgxLDEpIHRyYW5zbGF0ZVkoMCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLDEpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnNjYWxlKDEsMSkgdHJhbnNsYXRlWSgwKX19QC13ZWJraXQta2V5ZnJhbWVzIGZhLWZhZGV7NTAle29wYWNpdHk6dmFyKC0tZmEtZmFkZS1vcGFjaXR5LC40KX19QGtleWZyYW1lcyBmYS1mYWRlezUwJXtvcGFjaXR5OnZhcigtLWZhLWZhZGUtb3BhY2l0eSwuNCl9fUAtd2Via2l0LWtleWZyYW1lcyBmYS1iZWF0LWZhZGV7MCUsMTAwJXtvcGFjaXR5OnZhcigtLWZhLWJlYXQtZmFkZS1vcGFjaXR5LC40KTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSh2YXIoLS1mYS1iZWF0LWZhZGUtc2NhbGUsMS4xMjUpKTt0cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtYmVhdC1mYWRlLXNjYWxlLDEuMTI1KSl9fUBrZXlmcmFtZXMgZmEtYmVhdC1mYWRlezAlLDEwMCV7b3BhY2l0eTp2YXIoLS1mYS1iZWF0LWZhZGUtb3BhY2l0eSwuNCk7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfTUwJXtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUodmFyKC0tZmEtYmVhdC1mYWRlLXNjYWxlLDEuMTI1KSk7dHJhbnNmb3JtOnNjYWxlKHZhcigtLWZhLWJlYXQtZmFkZS1zY2FsZSwxLjEyNSkpfX1ALXdlYmtpdC1rZXlmcmFtZXMgZmEtZmxpcHs1MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlM2QodmFyKC0tZmEtZmxpcC14LDApLHZhcigtLWZhLWZsaXAteSwxKSx2YXIoLS1mYS1mbGlwLXosMCksdmFyKC0tZmEtZmxpcC1hbmdsZSwtMTgwZGVnKSk7dHJhbnNmb3JtOnJvdGF0ZTNkKHZhcigtLWZhLWZsaXAteCwwKSx2YXIoLS1mYS1mbGlwLXksMSksdmFyKC0tZmEtZmxpcC16LDApLHZhcigtLWZhLWZsaXAtYW5nbGUsLTE4MGRlZykpfX1Aa2V5ZnJhbWVzIGZhLWZsaXB7NTAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZTNkKHZhcigtLWZhLWZsaXAteCwwKSx2YXIoLS1mYS1mbGlwLXksMSksdmFyKC0tZmEtZmxpcC16LDApLHZhcigtLWZhLWZsaXAtYW5nbGUsLTE4MGRlZykpO3RyYW5zZm9ybTpyb3RhdGUzZCh2YXIoLS1mYS1mbGlwLXgsMCksdmFyKC0tZmEtZmxpcC15LDEpLHZhcigtLWZhLWZsaXAteiwwKSx2YXIoLS1mYS1mbGlwLWFuZ2xlLC0xODBkZWcpKX19QC13ZWJraXQta2V5ZnJhbWVzIGZhLXNoYWtlezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTE1ZGVnKX00JXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMTVkZWcpfTI0JSw4JXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTE4ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0xOGRlZyl9MTIlLDI4JXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMThkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMThkZWcpfTE2JXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTIyZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0yMmRlZyl9MjAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgyMmRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgyMmRlZyl9MzIley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMTJkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTEyZGVnKX0zNiV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDEyZGVnKTt0cmFuc2Zvcm06cm90YXRlKDEyZGVnKX0xMDAlLDQwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKX19QGtleWZyYW1lcyBmYS1zaGFrZXswJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTE1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0xNWRlZyl9NCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE1ZGVnKX0yNCUsOCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0xOGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMThkZWcpfTEyJSwyOCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4ZGVnKX0xNiV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKC0yMmRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgtMjJkZWcpfTIwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMjJkZWcpO3RyYW5zZm9ybTpyb3RhdGUoMjJkZWcpfTMyJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoLTEyZGVnKTt0cmFuc2Zvcm06cm90YXRlKC0xMmRlZyl9MzYley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgxMmRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxMmRlZyl9MTAwJSw0MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9fUAtd2Via2l0LWtleWZyYW1lcyBmYS1zcGluezAley13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwKTt0cmFuc2Zvcm06cm90YXRlKDApfTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDM2MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgzNjBkZWcpfX1Aa2V5ZnJhbWVzIGZhLXNwaW57MCV7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDApO3RyYW5zZm9ybTpyb3RhdGUoMCl9MTAwJXstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDM2MGRlZyl9fS5mYS1yb3RhdGUtOTB7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDkwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX0uZmEtcm90YXRlLTE4MHstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDE4MGRlZyl9LmZhLXJvdGF0ZS0yNzB7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDI3MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgyNzBkZWcpfS5mYS1mbGlwLWhvcml6b250YWx7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLTEsMSk7dHJhbnNmb3JtOnNjYWxlKC0xLDEpfS5mYS1mbGlwLXZlcnRpY2Fsey13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEsLTEpO3RyYW5zZm9ybTpzY2FsZSgxLC0xKX0uZmEtZmxpcC1ib3RoLC5mYS1mbGlwLWhvcml6b250YWwuZmEtZmxpcC12ZXJ0aWNhbHstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgtMSwtMSk7dHJhbnNmb3JtOnNjYWxlKC0xLC0xKX0uZmEtcm90YXRlLWJ5ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSh2YXIoLS1mYS1yb3RhdGUtYW5nbGUsbm9uZSkpO3RyYW5zZm9ybTpyb3RhdGUodmFyKC0tZmEtcm90YXRlLWFuZ2xlLG5vbmUpKX0uZmEtc3RhY2t7ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246bWlkZGxlO2hlaWdodDoyZW07cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6Mi41ZW19LmZhLXN0YWNrLTF4LC5mYS1zdGFjay0yeHtib3R0b206MDtsZWZ0OjA7bWFyZ2luOmF1dG87cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MDt6LWluZGV4OnZhcigtLWZhLXN0YWNrLXotaW5kZXgsYXV0byl9LnN2Zy1pbmxpbmUtLWZhLmZhLXN0YWNrLTF4e2hlaWdodDoxZW07d2lkdGg6MS4yNWVtfS5zdmctaW5saW5lLS1mYS5mYS1zdGFjay0yeHtoZWlnaHQ6MmVtO3dpZHRoOjIuNWVtfS5mYS1pbnZlcnNle2NvbG9yOnZhcigtLWZhLWludmVyc2UsI2ZmZil9LmZhLXNyLW9ubHksLnNyLW9ubHl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7cGFkZGluZzowO21hcmdpbjotMXB4O292ZXJmbG93OmhpZGRlbjtjbGlwOnJlY3QoMCwwLDAsMCk7d2hpdGUtc3BhY2U6bm93cmFwO2JvcmRlci13aWR0aDowfS5mYS1zci1vbmx5LWZvY3VzYWJsZTpub3QoOmZvY3VzKSwuc3Itb25seS1mb2N1c2FibGU6bm90KDpmb2N1cyl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MXB4O2hlaWdodDoxcHg7cGFkZGluZzowO21hcmdpbjotMXB4O292ZXJmbG93OmhpZGRlbjtjbGlwOnJlY3QoMCwwLDAsMCk7d2hpdGUtc3BhY2U6bm93cmFwO2JvcmRlci13aWR0aDowfS5zdmctaW5saW5lLS1mYSAuZmEtcHJpbWFyeXtmaWxsOnZhcigtLWZhLXByaW1hcnktY29sb3IsY3VycmVudENvbG9yKTtvcGFjaXR5OnZhcigtLWZhLXByaW1hcnktb3BhY2l0eSwxKX0uc3ZnLWlubGluZS0tZmEgLmZhLXNlY29uZGFyeXtmaWxsOnZhcigtLWZhLXNlY29uZGFyeS1jb2xvcixjdXJyZW50Q29sb3IpO29wYWNpdHk6dmFyKC0tZmEtc2Vjb25kYXJ5LW9wYWNpdHksLjQpfS5zdmctaW5saW5lLS1mYS5mYS1zd2FwLW9wYWNpdHkgLmZhLXByaW1hcnl7b3BhY2l0eTp2YXIoLS1mYS1zZWNvbmRhcnktb3BhY2l0eSwuNCl9LnN2Zy1pbmxpbmUtLWZhLmZhLXN3YXAtb3BhY2l0eSAuZmEtc2Vjb25kYXJ5e29wYWNpdHk6dmFyKC0tZmEtcHJpbWFyeS1vcGFjaXR5LDEpfS5zdmctaW5saW5lLS1mYSBtYXNrIC5mYS1wcmltYXJ5LC5zdmctaW5saW5lLS1mYSBtYXNrIC5mYS1zZWNvbmRhcnl7ZmlsbDojMDAwfS5mYS1kdW90b25lLmZhLWludmVyc2UsLmZhZC5mYS1pbnZlcnNle2NvbG9yOnZhcigtLWZhLWludmVyc2UsI2ZmZil9XCI7XG5cbiAgZnVuY3Rpb24gY3NzKCkge1xuICAgIHZhciBkZnAgPSBERUZBVUxUX0ZBTUlMWV9QUkVGSVg7XG4gICAgdmFyIGRyYyA9IERFRkFVTFRfUkVQTEFDRU1FTlRfQ0xBU1M7XG4gICAgdmFyIGZwID0gY29uZmlnLmZhbWlseVByZWZpeDtcbiAgICB2YXIgcmMgPSBjb25maWcucmVwbGFjZW1lbnRDbGFzcztcbiAgICB2YXIgcyA9IGJhc2VTdHlsZXM7XG5cbiAgICBpZiAoZnAgIT09IGRmcCB8fCByYyAhPT0gZHJjKSB7XG4gICAgICB2YXIgZFBhdHQgPSBuZXcgUmVnRXhwKFwiXFxcXC5cIi5jb25jYXQoZGZwLCBcIlxcXFwtXCIpLCAnZycpO1xuICAgICAgdmFyIGN1c3RvbVByb3BQYXR0ID0gbmV3IFJlZ0V4cChcIlxcXFwtLVwiLmNvbmNhdChkZnAsIFwiXFxcXC1cIiksICdnJyk7XG4gICAgICB2YXIgclBhdHQgPSBuZXcgUmVnRXhwKFwiXFxcXC5cIi5jb25jYXQoZHJjKSwgJ2cnKTtcbiAgICAgIHMgPSBzLnJlcGxhY2UoZFBhdHQsIFwiLlwiLmNvbmNhdChmcCwgXCItXCIpKS5yZXBsYWNlKGN1c3RvbVByb3BQYXR0LCBcIi0tXCIuY29uY2F0KGZwLCBcIi1cIikpLnJlcGxhY2UoclBhdHQsIFwiLlwiLmNvbmNhdChyYykpO1xuICAgIH1cblxuICAgIHJldHVybiBzO1xuICB9XG5cbiAgdmFyIF9jc3NJbnNlcnRlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNzcygpIHtcbiAgICBpZiAoY29uZmlnLmF1dG9BZGRDc3MgJiYgIV9jc3NJbnNlcnRlZCkge1xuICAgICAgaW5zZXJ0Q3NzKGNzcygpKTtcbiAgICAgIF9jc3NJbnNlcnRlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIEluamVjdENTUyA9IHtcbiAgICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRvbToge1xuICAgICAgICAgIGNzczogY3NzLFxuICAgICAgICAgIGluc2VydENzczogZW5zdXJlQ3NzXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiZWZvcmVET01FbGVtZW50Q3JlYXRpb246IGZ1bmN0aW9uIGJlZm9yZURPTUVsZW1lbnRDcmVhdGlvbigpIHtcbiAgICAgICAgICBlbnN1cmVDc3MoKTtcbiAgICAgICAgfSxcbiAgICAgICAgYmVmb3JlSTJzdmc6IGZ1bmN0aW9uIGJlZm9yZUkyc3ZnKCkge1xuICAgICAgICAgIGVuc3VyZUNzcygpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgdyA9IFdJTkRPVyB8fCB7fTtcbiAgaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXSkgd1tOQU1FU1BBQ0VfSURFTlRJRklFUl0gPSB7fTtcbiAgaWYgKCF3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zdHlsZXMpIHdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnN0eWxlcyA9IHt9O1xuICBpZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLmhvb2tzKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5ob29rcyA9IHt9O1xuICBpZiAoIXdbTkFNRVNQQUNFX0lERU5USUZJRVJdLnNoaW1zKSB3W05BTUVTUEFDRV9JREVOVElGSUVSXS5zaGltcyA9IFtdO1xuICB2YXIgbmFtZXNwYWNlID0gd1tOQU1FU1BBQ0VfSURFTlRJRklFUl07XG5cbiAgdmFyIGZ1bmN0aW9ucyA9IFtdO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgIERPQ1VNRU5ULnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBsaXN0ZW5lcik7XG4gICAgbG9hZGVkID0gMTtcbiAgICBmdW5jdGlvbnMubWFwKGZ1bmN0aW9uIChmbikge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGxvYWRlZCA9IGZhbHNlO1xuXG4gIGlmIChJU19ET00pIHtcbiAgICBsb2FkZWQgPSAoRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsID8gL15sb2FkZWR8XmMvIDogL15sb2FkZWR8Xml8XmMvKS50ZXN0KERPQ1VNRU5ULnJlYWR5U3RhdGUpO1xuICAgIGlmICghbG9hZGVkKSBET0NVTUVOVC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZG9tcmVhZHkgKGZuKSB7XG4gICAgaWYgKCFJU19ET00pIHJldHVybjtcbiAgICBsb2FkZWQgPyBzZXRUaW1lb3V0KGZuLCAwKSA6IGZ1bmN0aW9ucy5wdXNoKGZuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvSHRtbChhYnN0cmFjdE5vZGVzKSB7XG4gICAgdmFyIHRhZyA9IGFic3RyYWN0Tm9kZXMudGFnLFxuICAgICAgICBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPSBhYnN0cmFjdE5vZGVzLmF0dHJpYnV0ZXMsXG4gICAgICAgIGF0dHJpYnV0ZXMgPSBfYWJzdHJhY3ROb2RlcyRhdHRyaWIgPT09IHZvaWQgMCA/IHt9IDogX2Fic3RyYWN0Tm9kZXMkYXR0cmliLFxuICAgICAgICBfYWJzdHJhY3ROb2RlcyRjaGlsZHIgPSBhYnN0cmFjdE5vZGVzLmNoaWxkcmVuLFxuICAgICAgICBjaGlsZHJlbiA9IF9hYnN0cmFjdE5vZGVzJGNoaWxkciA9PT0gdm9pZCAwID8gW10gOiBfYWJzdHJhY3ROb2RlcyRjaGlsZHI7XG5cbiAgICBpZiAodHlwZW9mIGFic3RyYWN0Tm9kZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gaHRtbEVzY2FwZShhYnN0cmFjdE5vZGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiPFwiLmNvbmNhdCh0YWcsIFwiIFwiKS5jb25jYXQoam9pbkF0dHJpYnV0ZXMoYXR0cmlidXRlcyksIFwiPlwiKS5jb25jYXQoY2hpbGRyZW4ubWFwKHRvSHRtbCkuam9pbignJyksIFwiPC9cIikuY29uY2F0KHRhZywgXCI+XCIpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGljb25Gcm9tTWFwcGluZyhtYXBwaW5nLCBwcmVmaXgsIGljb25OYW1lKSB7XG4gICAgaWYgKG1hcHBpbmcgJiYgbWFwcGluZ1twcmVmaXhdICYmIG1hcHBpbmdbcHJlZml4XVtpY29uTmFtZV0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICBpY29uTmFtZTogaWNvbk5hbWUsXG4gICAgICAgIGljb246IG1hcHBpbmdbcHJlZml4XVtpY29uTmFtZV1cbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludGVybmFsIGhlbHBlciB0byBiaW5kIGEgZnVuY3Rpb24ga25vd24gdG8gaGF2ZSA0IGFyZ3VtZW50c1xuICAgKiB0byBhIGdpdmVuIGNvbnRleHQuXG4gICAqL1xuXG4gIHZhciBiaW5kSW50ZXJuYWw0ID0gZnVuY3Rpb24gYmluZEludGVybmFsNChmdW5jLCB0aGlzQ29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICAgICAgcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQ29udGV4dCwgYSwgYiwgYywgZCk7XG4gICAgfTtcbiAgfTtcblxuICAvKipcbiAgICogIyBSZWR1Y2VcbiAgICpcbiAgICogQSBmYXN0IG9iamVjdCBgLnJlZHVjZSgpYCBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSAgIHN1YmplY3QgICAgICBUaGUgb2JqZWN0IHRvIHJlZHVjZSBvdmVyLlxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gZm4gICAgICAgICAgIFRoZSByZWR1Y2VyIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0gIHttaXhlZH0gICAgaW5pdGlhbFZhbHVlIFRoZSBpbml0aWFsIHZhbHVlIGZvciB0aGUgcmVkdWNlciwgZGVmYXVsdHMgdG8gc3ViamVjdFswXS5cbiAgICogQHBhcmFtICB7T2JqZWN0fSAgIHRoaXNDb250ZXh0ICBUaGUgY29udGV4dCBmb3IgdGhlIHJlZHVjZXIuXG4gICAqIEByZXR1cm4ge21peGVkfSAgICAgICAgICAgICAgICAgVGhlIGZpbmFsIHJlc3VsdC5cbiAgICovXG5cblxuICB2YXIgcmVkdWNlID0gZnVuY3Rpb24gZmFzdFJlZHVjZU9iamVjdChzdWJqZWN0LCBmbiwgaW5pdGlhbFZhbHVlLCB0aGlzQ29udGV4dCkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3ViamVjdCksXG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICBpdGVyYXRvciA9IHRoaXNDb250ZXh0ICE9PSB1bmRlZmluZWQgPyBiaW5kSW50ZXJuYWw0KGZuLCB0aGlzQ29udGV4dCkgOiBmbixcbiAgICAgICAgaSxcbiAgICAgICAga2V5LFxuICAgICAgICByZXN1bHQ7XG5cbiAgICBpZiAoaW5pdGlhbFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGkgPSAxO1xuICAgICAgcmVzdWx0ID0gc3ViamVjdFtrZXlzWzBdXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IDA7XG4gICAgICByZXN1bHQgPSBpbml0aWFsVmFsdWU7XG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yKHJlc3VsdCwgc3ViamVjdFtrZXldLCBrZXksIHN1YmplY3QpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIHVjczJkZWNvZGUoKSBhbmQgY29kZVBvaW50QXQoKSBhcmUgYm90aCB3b3JrcyBvZiBNYXRoaWFzIEJ5bmVucyBhbmQgbGljZW5zZWQgdW5kZXIgTUlUXG4gICAqXG4gICAqIENvcHlyaWdodCBNYXRoaWFzIEJ5bmVucyA8aHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlLz5cblxuICAgKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbiAgICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gICAqIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuICAgKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gICAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICAgKiBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbiAgICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4gICAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlXG4gICAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4gICAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4gICAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuICAgKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuICAgKiBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4gICAqIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT05cbiAgICogT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4gICAqIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICAgKi9cbiAgZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcbiAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cbiAgICAgIGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblxuICAgICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICAgIGNvdW50ZXItLTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cblxuICBmdW5jdGlvbiB0b0hleCh1bmljb2RlKSB7XG4gICAgdmFyIGRlY29kZWQgPSB1Y3MyZGVjb2RlKHVuaWNvZGUpO1xuICAgIHJldHVybiBkZWNvZGVkLmxlbmd0aCA9PT0gMSA/IGRlY29kZWRbMF0udG9TdHJpbmcoMTYpIDogbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBjb2RlUG9pbnRBdChzdHJpbmcsIGluZGV4KSB7XG4gICAgdmFyIHNpemUgPSBzdHJpbmcubGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KGluZGV4KTtcbiAgICB2YXIgc2Vjb25kO1xuXG4gICAgaWYgKGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgc2l6ZSA+IGluZGV4ICsgMSkge1xuICAgICAgc2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXggKyAxKTtcblxuICAgICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICByZXR1cm4gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlyc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVJY29ucyhpY29ucykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhpY29ucykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGljb25OYW1lKSB7XG4gICAgICB2YXIgaWNvbiA9IGljb25zW2ljb25OYW1lXTtcbiAgICAgIHZhciBleHBhbmRlZCA9ICEhaWNvbi5pY29uO1xuXG4gICAgICBpZiAoZXhwYW5kZWQpIHtcbiAgICAgICAgYWNjW2ljb24uaWNvbk5hbWVdID0gaWNvbi5pY29uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWNjW2ljb25OYW1lXSA9IGljb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lSWNvbnMocHJlZml4LCBpY29ucykge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuICAgIHZhciBfcGFyYW1zJHNraXBIb29rcyA9IHBhcmFtcy5za2lwSG9va3MsXG4gICAgICAgIHNraXBIb29rcyA9IF9wYXJhbXMkc2tpcEhvb2tzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkc2tpcEhvb2tzO1xuICAgIHZhciBub3JtYWxpemVkID0gbm9ybWFsaXplSWNvbnMoaWNvbnMpO1xuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UuaG9va3MuYWRkUGFjayA9PT0gJ2Z1bmN0aW9uJyAmJiAhc2tpcEhvb2tzKSB7XG4gICAgICBuYW1lc3BhY2UuaG9va3MuYWRkUGFjayhwcmVmaXgsIG5vcm1hbGl6ZUljb25zKGljb25zKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWVzcGFjZS5zdHlsZXNbcHJlZml4XSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBuYW1lc3BhY2Uuc3R5bGVzW3ByZWZpeF0gfHwge30pLCBub3JtYWxpemVkKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRm9udCBBd2Vzb21lIDQgdXNlZCB0aGUgcHJlZml4IG9mIGBmYWAgZm9yIGFsbCBpY29ucy4gV2l0aCB0aGUgaW50cm9kdWN0aW9uXG4gICAgICogb2YgbmV3IHN0eWxlcyB3ZSBuZWVkZWQgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIHRoZW0uIFByZWZpeCBgZmFgIGlzIG5vdyBhbiBhbGlhc1xuICAgICAqIGZvciBgZmFzYCBzbyB3ZSdsbCBlYXNlIHRoZSB1cGdyYWRlIHByb2Nlc3MgZm9yIG91ciB1c2VycyBieSBhdXRvbWF0aWNhbGx5IGRlZmluaW5nXG4gICAgICogdGhpcyBhcyB3ZWxsLlxuICAgICAqL1xuXG5cbiAgICBpZiAocHJlZml4ID09PSAnZmFzJykge1xuICAgICAgZGVmaW5lSWNvbnMoJ2ZhJywgaWNvbnMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkdW90b25lUGF0aFJlID0gWy8qI19fUFVSRV9fKi9fd3JhcFJlZ0V4cCgvcGF0aCBkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIuKnBhdGggZD1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLywge1xuICAgIGQxOiAxLFxuICAgIGQyOiAyXG4gIH0pLCAvKiNfX1BVUkVfXyovX3dyYXBSZWdFeHAoL3BhdGggY2xhc3M9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi4qZD1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipwYXRoIGNsYXNzPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIuKmQ9XCIoKD86KD8hXCIpW1xcc1xcU10pKylcIi8sIHtcbiAgICBjbHMxOiAxLFxuICAgIGQxOiAyLFxuICAgIGNsczI6IDMsXG4gICAgZDI6IDRcbiAgfSksIC8qI19fUFVSRV9fKi9fd3JhcFJlZ0V4cCgvcGF0aCBjbGFzcz1cIigoPzooPyFcIilbXFxzXFxTXSkrKVwiLipkPVwiKCg/Oig/IVwiKVtcXHNcXFNdKSspXCIvLCB7XG4gICAgY2xzMTogMSxcbiAgICBkMTogMlxuICB9KV07XG5cbiAgdmFyIHN0eWxlcyA9IG5hbWVzcGFjZS5zdHlsZXMsXG4gICAgICBzaGltcyA9IG5hbWVzcGFjZS5zaGltcztcbiAgdmFyIExPTkdfU1RZTEUgPSBPYmplY3QudmFsdWVzKFBSRUZJWF9UT19MT05HX1NUWUxFKTtcbiAgdmFyIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gbnVsbDtcbiAgdmFyIF9ieVVuaWNvZGUgPSB7fTtcbiAgdmFyIF9ieUxpZ2F0dXJlID0ge307XG4gIHZhciBfYnlPbGROYW1lID0ge307XG4gIHZhciBfYnlPbGRVbmljb2RlID0ge307XG4gIHZhciBfYnlBbGlhcyA9IHt9O1xuICB2YXIgUFJFRklYRVMgPSBPYmplY3Qua2V5cyhQUkVGSVhfVE9fU1RZTEUpO1xuXG4gIGZ1bmN0aW9uIGlzUmVzZXJ2ZWQobmFtZSkge1xuICAgIHJldHVybiB+UkVTRVJWRURfQ0xBU1NFUy5pbmRleE9mKG5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SWNvbk5hbWUoZmFtaWx5UHJlZml4LCBjbHMpIHtcbiAgICB2YXIgcGFydHMgPSBjbHMuc3BsaXQoJy0nKTtcbiAgICB2YXIgcHJlZml4ID0gcGFydHNbMF07XG4gICAgdmFyIGljb25OYW1lID0gcGFydHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gICAgaWYgKHByZWZpeCA9PT0gZmFtaWx5UHJlZml4ICYmIGljb25OYW1lICE9PSAnJyAmJiAhaXNSZXNlcnZlZChpY29uTmFtZSkpIHtcbiAgICAgIHJldHVybiBpY29uTmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIHZhciBidWlsZCA9IGZ1bmN0aW9uIGJ1aWxkKCkge1xuICAgIHZhciBsb29rdXAgPSBmdW5jdGlvbiBsb29rdXAocmVkdWNlcikge1xuICAgICAgcmV0dXJuIHJlZHVjZShzdHlsZXMsIGZ1bmN0aW9uIChvLCBzdHlsZSwgcHJlZml4KSB7XG4gICAgICAgIG9bcHJlZml4XSA9IHJlZHVjZShzdHlsZSwgcmVkdWNlciwge30pO1xuICAgICAgICByZXR1cm4gbztcbiAgICAgIH0sIHt9KTtcbiAgICB9O1xuXG4gICAgX2J5VW5pY29kZSA9IGxvb2t1cChmdW5jdGlvbiAoYWNjLCBpY29uLCBpY29uTmFtZSkge1xuICAgICAgaWYgKGljb25bM10pIHtcbiAgICAgICAgYWNjW2ljb25bM11dID0gaWNvbk5hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpY29uWzJdKSB7XG4gICAgICAgIHZhciBhbGlhc2VzID0gaWNvblsyXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09ICdudW1iZXInO1xuICAgICAgICB9KTtcbiAgICAgICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICAgIGFjY1thbGlhcy50b1N0cmluZygxNildID0gaWNvbk5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0pO1xuICAgIF9ieUxpZ2F0dXJlID0gbG9va3VwKGZ1bmN0aW9uIChhY2MsIGljb24sIGljb25OYW1lKSB7XG4gICAgICBhY2NbaWNvbk5hbWVdID0gaWNvbk5hbWU7XG5cbiAgICAgIGlmIChpY29uWzJdKSB7XG4gICAgICAgIHZhciBhbGlhc2VzID0gaWNvblsyXS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09ICdzdHJpbmcnO1xuICAgICAgICB9KTtcbiAgICAgICAgYWxpYXNlcy5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgICAgIGFjY1thbGlhc10gPSBpY29uTmFtZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSk7XG4gICAgX2J5QWxpYXMgPSBsb29rdXAoZnVuY3Rpb24gKGFjYywgaWNvbiwgaWNvbk5hbWUpIHtcbiAgICAgIHZhciBhbGlhc2VzID0gaWNvblsyXTtcbiAgICAgIGFjY1tpY29uTmFtZV0gPSBpY29uTmFtZTtcbiAgICAgIGFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgYWNjW2FsaWFzXSA9IGljb25OYW1lO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0pOyAvLyBJZiB3ZSBoYXZlIGEgS2l0LCB3ZSBjYW4ndCBkZXRlcm1pbmUgaWYgcmVndWxhciBpcyBhdmFpbGFibGUgc2luY2Ugd2VcbiAgICAvLyBjb3VsZCBiZSBhdXRvLWZldGNoaW5nIGl0LiBXZSdsbCBoYXZlIHRvIGFzc3VtZSB0aGF0IGl0IGlzIGF2YWlsYWJsZS5cblxuICAgIHZhciBoYXNSZWd1bGFyID0gJ2ZhcicgaW4gc3R5bGVzIHx8IGNvbmZpZy5hdXRvRmV0Y2hTdmc7XG4gICAgdmFyIHNoaW1Mb29rdXBzID0gcmVkdWNlKHNoaW1zLCBmdW5jdGlvbiAoYWNjLCBzaGltKSB7XG4gICAgICB2YXIgbWF5YmVOYW1lTWF5YmVVbmljb2RlID0gc2hpbVswXTtcbiAgICAgIHZhciBwcmVmaXggPSBzaGltWzFdO1xuICAgICAgdmFyIGljb25OYW1lID0gc2hpbVsyXTtcblxuICAgICAgaWYgKHByZWZpeCA9PT0gJ2ZhcicgJiYgIWhhc1JlZ3VsYXIpIHtcbiAgICAgICAgcHJlZml4ID0gJ2Zhcyc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbWF5YmVOYW1lTWF5YmVVbmljb2RlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhY2MubmFtZXNbbWF5YmVOYW1lTWF5YmVVbmljb2RlXSA9IHtcbiAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICBpY29uTmFtZTogaWNvbk5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBtYXliZU5hbWVNYXliZVVuaWNvZGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGFjYy51bmljb2Rlc1ttYXliZU5hbWVNYXliZVVuaWNvZGUudG9TdHJpbmcoMTYpXSA9IHtcbiAgICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgICBpY29uTmFtZTogaWNvbk5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7XG4gICAgICBuYW1lczoge30sXG4gICAgICB1bmljb2Rlczoge31cbiAgICB9KTtcbiAgICBfYnlPbGROYW1lID0gc2hpbUxvb2t1cHMubmFtZXM7XG4gICAgX2J5T2xkVW5pY29kZSA9IHNoaW1Mb29rdXBzLnVuaWNvZGVzO1xuICAgIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gZ2V0Q2Fub25pY2FsUHJlZml4KGNvbmZpZy5zdHlsZURlZmF1bHQpO1xuICB9O1xuICBvbkNoYW5nZShmdW5jdGlvbiAoYykge1xuICAgIF9kZWZhdWx0VXNhYmxlUHJlZml4ID0gZ2V0Q2Fub25pY2FsUHJlZml4KGMuc3R5bGVEZWZhdWx0KTtcbiAgfSk7XG4gIGJ1aWxkKCk7XG4gIGZ1bmN0aW9uIGJ5VW5pY29kZShwcmVmaXgsIHVuaWNvZGUpIHtcbiAgICByZXR1cm4gKF9ieVVuaWNvZGVbcHJlZml4XSB8fCB7fSlbdW5pY29kZV07XG4gIH1cbiAgZnVuY3Rpb24gYnlMaWdhdHVyZShwcmVmaXgsIGxpZ2F0dXJlKSB7XG4gICAgcmV0dXJuIChfYnlMaWdhdHVyZVtwcmVmaXhdIHx8IHt9KVtsaWdhdHVyZV07XG4gIH1cbiAgZnVuY3Rpb24gYnlBbGlhcyhwcmVmaXgsIGFsaWFzKSB7XG4gICAgcmV0dXJuIChfYnlBbGlhc1twcmVmaXhdIHx8IHt9KVthbGlhc107XG4gIH1cbiAgZnVuY3Rpb24gYnlPbGROYW1lKG5hbWUpIHtcbiAgICByZXR1cm4gX2J5T2xkTmFtZVtuYW1lXSB8fCB7XG4gICAgICBwcmVmaXg6IG51bGwsXG4gICAgICBpY29uTmFtZTogbnVsbFxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gYnlPbGRVbmljb2RlKHVuaWNvZGUpIHtcbiAgICB2YXIgb2xkVW5pY29kZSA9IF9ieU9sZFVuaWNvZGVbdW5pY29kZV07XG4gICAgdmFyIG5ld1VuaWNvZGUgPSBieVVuaWNvZGUoJ2ZhcycsIHVuaWNvZGUpO1xuICAgIHJldHVybiBvbGRVbmljb2RlIHx8IChuZXdVbmljb2RlID8ge1xuICAgICAgcHJlZml4OiAnZmFzJyxcbiAgICAgIGljb25OYW1lOiBuZXdVbmljb2RlXG4gICAgfSA6IG51bGwpIHx8IHtcbiAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgIGljb25OYW1lOiBudWxsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCkge1xuICAgIHJldHVybiBfZGVmYXVsdFVzYWJsZVByZWZpeDtcbiAgfVxuICB2YXIgZW1wdHlDYW5vbmljYWxJY29uID0gZnVuY3Rpb24gZW1wdHlDYW5vbmljYWxJY29uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmVmaXg6IG51bGwsXG4gICAgICBpY29uTmFtZTogbnVsbCxcbiAgICAgIHJlc3Q6IFtdXG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0Q2Fub25pY2FsUHJlZml4KHN0eWxlT3JQcmVmaXgpIHtcbiAgICB2YXIgc3R5bGUgPSBQUkVGSVhfVE9fU1RZTEVbc3R5bGVPclByZWZpeF07XG4gICAgdmFyIHByZWZpeCA9IFNUWUxFX1RPX1BSRUZJWFtzdHlsZU9yUHJlZml4XSB8fCBTVFlMRV9UT19QUkVGSVhbc3R5bGVdO1xuICAgIHZhciBkZWZpbmVkID0gc3R5bGVPclByZWZpeCBpbiBuYW1lc3BhY2Uuc3R5bGVzID8gc3R5bGVPclByZWZpeCA6IG51bGw7XG4gICAgcmV0dXJuIHByZWZpeCB8fCBkZWZpbmVkIHx8IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2Fub25pY2FsSWNvbih2YWx1ZXMpIHtcbiAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgX3BhcmFtcyRza2lwTG9va3VwcyA9IHBhcmFtcy5za2lwTG9va3VwcyxcbiAgICAgICAgc2tpcExvb2t1cHMgPSBfcGFyYW1zJHNraXBMb29rdXBzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkc2tpcExvb2t1cHM7XG4gICAgdmFyIGdpdmVuUHJlZml4ID0gbnVsbDtcbiAgICB2YXIgY2Fub25pY2FsID0gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjbHMpIHtcbiAgICAgIHZhciBpY29uTmFtZSA9IGdldEljb25OYW1lKGNvbmZpZy5mYW1pbHlQcmVmaXgsIGNscyk7XG5cbiAgICAgIGlmIChzdHlsZXNbY2xzXSkge1xuICAgICAgICBjbHMgPSBMT05HX1NUWUxFLmluY2x1ZGVzKGNscykgPyBMT05HX1NUWUxFX1RPX1BSRUZJWFtjbHNdIDogY2xzO1xuICAgICAgICBnaXZlblByZWZpeCA9IGNscztcbiAgICAgICAgYWNjLnByZWZpeCA9IGNscztcbiAgICAgIH0gZWxzZSBpZiAoUFJFRklYRVMuaW5kZXhPZihjbHMpID4gLTEpIHtcbiAgICAgICAgZ2l2ZW5QcmVmaXggPSBjbHM7XG4gICAgICAgIGFjYy5wcmVmaXggPSBnZXRDYW5vbmljYWxQcmVmaXgoY2xzKTtcbiAgICAgIH0gZWxzZSBpZiAoaWNvbk5hbWUpIHtcbiAgICAgICAgYWNjLmljb25OYW1lID0gaWNvbk5hbWU7XG4gICAgICB9IGVsc2UgaWYgKGNscyAhPT0gY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MpIHtcbiAgICAgICAgYWNjLnJlc3QucHVzaChjbHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXNraXBMb29rdXBzICYmIGFjYy5wcmVmaXggJiYgYWNjLmljb25OYW1lKSB7XG4gICAgICAgIHZhciBzaGltID0gZ2l2ZW5QcmVmaXggPT09ICdmYScgPyBieU9sZE5hbWUoYWNjLmljb25OYW1lKSA6IHt9O1xuICAgICAgICB2YXIgYWxpYXNJY29uTmFtZSA9IGJ5QWxpYXMoYWNjLnByZWZpeCwgYWNjLmljb25OYW1lKTtcblxuICAgICAgICBpZiAoc2hpbS5wcmVmaXgpIHtcbiAgICAgICAgICBnaXZlblByZWZpeCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhY2MuaWNvbk5hbWUgPSBzaGltLmljb25OYW1lIHx8IGFsaWFzSWNvbk5hbWUgfHwgYWNjLmljb25OYW1lO1xuICAgICAgICBhY2MucHJlZml4ID0gc2hpbS5wcmVmaXggfHwgYWNjLnByZWZpeDtcblxuICAgICAgICBpZiAoYWNjLnByZWZpeCA9PT0gJ2ZhcicgJiYgIXN0eWxlc1snZmFyJ10gJiYgc3R5bGVzWydmYXMnXSAmJiAhY29uZmlnLmF1dG9GZXRjaFN2Zykge1xuICAgICAgICAgIC8vIEFsbG93IGEgZmFsbGJhY2sgZnJvbSB0aGUgcmVndWxhciBzdHlsZSB0byBzb2xpZCBpZiByZWd1bGFyIGlzIG5vdCBhdmFpbGFibGVcbiAgICAgICAgICAvLyBidXQgb25seSBpZiB3ZSBhcmVuJ3QgYXV0by1mZXRjaGluZyBTVkdzXG4gICAgICAgICAgYWNjLnByZWZpeCA9ICdmYXMnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgZW1wdHlDYW5vbmljYWxJY29uKCkpO1xuXG4gICAgaWYgKGNhbm9uaWNhbC5wcmVmaXggPT09ICdmYScgfHwgZ2l2ZW5QcmVmaXggPT09ICdmYScpIHtcbiAgICAgIC8vIFRoZSBmYSBwcmVmaXggaXMgbm90IGNhbm9uaWNhbC4gU28gaWYgaXQgaGFzIG1hZGUgaXQgdGhyb3VnaCB1bnRpbCB0aGlzIHBvaW50XG4gICAgICAvLyB3ZSB3aWxsIHNoaWZ0IGl0IHRvIHRoZSBjb3JyZWN0IHByZWZpeC5cbiAgICAgIGNhbm9uaWNhbC5wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCkgfHwgJ2Zhcyc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbm9uaWNhbDtcbiAgfVxuXG4gIHZhciBMaWJyYXJ5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMaWJyYXJ5KCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIExpYnJhcnkpO1xuXG4gICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKExpYnJhcnksIFt7XG4gICAgICBrZXk6IFwiYWRkXCIsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBkZWZpbml0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBkZWZpbml0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhZGRpdGlvbnMgPSBkZWZpbml0aW9ucy5yZWR1Y2UodGhpcy5fcHVsbERlZmluaXRpb25zLCB7fSk7XG4gICAgICAgIE9iamVjdC5rZXlzKGFkZGl0aW9ucykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgX3RoaXMuZGVmaW5pdGlvbnNba2V5XSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBfdGhpcy5kZWZpbml0aW9uc1trZXldIHx8IHt9KSwgYWRkaXRpb25zW2tleV0pO1xuICAgICAgICAgIGRlZmluZUljb25zKGtleSwgYWRkaXRpb25zW2tleV0pO1xuICAgICAgICAgIHZhciBsb25nUHJlZml4ID0gUFJFRklYX1RPX0xPTkdfU1RZTEVba2V5XTtcbiAgICAgICAgICBpZiAobG9uZ1ByZWZpeCkgZGVmaW5lSWNvbnMobG9uZ1ByZWZpeCwgYWRkaXRpb25zW2tleV0pO1xuICAgICAgICAgIGJ1aWxkKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJyZXNldFwiLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgICB0aGlzLmRlZmluaXRpb25zID0ge307XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIl9wdWxsRGVmaW5pdGlvbnNcIixcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHVsbERlZmluaXRpb25zKGFkZGl0aW9ucywgZGVmaW5pdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZCA9IGRlZmluaXRpb24ucHJlZml4ICYmIGRlZmluaXRpb24uaWNvbk5hbWUgJiYgZGVmaW5pdGlvbi5pY29uID8ge1xuICAgICAgICAgIDA6IGRlZmluaXRpb25cbiAgICAgICAgfSA6IGRlZmluaXRpb247XG4gICAgICAgIE9iamVjdC5rZXlzKG5vcm1hbGl6ZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgdmFyIF9ub3JtYWxpemVkJGtleSA9IG5vcm1hbGl6ZWRba2V5XSxcbiAgICAgICAgICAgICAgcHJlZml4ID0gX25vcm1hbGl6ZWQka2V5LnByZWZpeCxcbiAgICAgICAgICAgICAgaWNvbk5hbWUgPSBfbm9ybWFsaXplZCRrZXkuaWNvbk5hbWUsXG4gICAgICAgICAgICAgIGljb24gPSBfbm9ybWFsaXplZCRrZXkuaWNvbjtcbiAgICAgICAgICB2YXIgYWxpYXNlcyA9IGljb25bMl07XG4gICAgICAgICAgaWYgKCFhZGRpdGlvbnNbcHJlZml4XSkgYWRkaXRpb25zW3ByZWZpeF0gPSB7fTtcblxuICAgICAgICAgIGlmIChhbGlhc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhbGlhcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBhZGRpdGlvbnNbcHJlZml4XVthbGlhc10gPSBpY29uO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhZGRpdGlvbnNbcHJlZml4XVtpY29uTmFtZV0gPSBpY29uO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFkZGl0aW9ucztcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gTGlicmFyeTtcbiAgfSgpO1xuXG4gIHZhciBfcGx1Z2lucyA9IFtdO1xuICB2YXIgX2hvb2tzID0ge307XG4gIHZhciBwcm92aWRlcnMgPSB7fTtcbiAgdmFyIGRlZmF1bHRQcm92aWRlcktleXMgPSBPYmplY3Qua2V5cyhwcm92aWRlcnMpO1xuICBmdW5jdGlvbiByZWdpc3RlclBsdWdpbnMobmV4dFBsdWdpbnMsIF9yZWYpIHtcbiAgICB2YXIgb2JqID0gX3JlZi5taXhvdXRzVG87XG4gICAgX3BsdWdpbnMgPSBuZXh0UGx1Z2lucztcbiAgICBfaG9va3MgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhwcm92aWRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGlmIChkZWZhdWx0UHJvdmlkZXJLZXlzLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgIGRlbGV0ZSBwcm92aWRlcnNba107XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBfcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICAgIHZhciBtaXhvdXQgPSBwbHVnaW4ubWl4b3V0ID8gcGx1Z2luLm1peG91dCgpIDoge307XG4gICAgICBPYmplY3Qua2V5cyhtaXhvdXQpLmZvckVhY2goZnVuY3Rpb24gKHRrKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWl4b3V0W3RrXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9ialt0a10gPSBtaXhvdXRbdGtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF90eXBlb2YobWl4b3V0W3RrXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgT2JqZWN0LmtleXMobWl4b3V0W3RrXSkuZm9yRWFjaChmdW5jdGlvbiAoc2spIHtcbiAgICAgICAgICAgIGlmICghb2JqW3RrXSkge1xuICAgICAgICAgICAgICBvYmpbdGtdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9ialt0a11bc2tdID0gbWl4b3V0W3RrXVtza107XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGx1Z2luLmhvb2tzKSB7XG4gICAgICAgIHZhciBob29rcyA9IHBsdWdpbi5ob29rcygpO1xuICAgICAgICBPYmplY3Qua2V5cyhob29rcykuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICAgIGlmICghX2hvb2tzW2hvb2tdKSB7XG4gICAgICAgICAgICBfaG9va3NbaG9va10gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfaG9va3NbaG9va10ucHVzaChob29rc1tob29rXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocGx1Z2luLnByb3ZpZGVzKSB7XG4gICAgICAgIHBsdWdpbi5wcm92aWRlcyhwcm92aWRlcnMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuICBmdW5jdGlvbiBjaGFpbkhvb2tzKGhvb2ssIGFjY3VtdWxhdG9yKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgdmFyIGhvb2tGbnMgPSBfaG9va3NbaG9va10gfHwgW107XG4gICAgaG9va0Zucy5mb3JFYWNoKGZ1bmN0aW9uIChob29rRm4pIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaG9va0ZuLmFwcGx5KG51bGwsIFthY2N1bXVsYXRvcl0uY29uY2F0KGFyZ3MpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11c2VsZXNzLWNhbGxcbiAgICB9KTtcbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cbiAgZnVuY3Rpb24gY2FsbEhvb2tzKGhvb2spIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICB2YXIgaG9va0ZucyA9IF9ob29rc1tob29rXSB8fCBbXTtcbiAgICBob29rRm5zLmZvckVhY2goZnVuY3Rpb24gKGhvb2tGbikge1xuICAgICAgaG9va0ZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH0pO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gY2FsbFByb3ZpZGVkKCkge1xuICAgIHZhciBob29rID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gcHJvdmlkZXJzW2hvb2tdID8gcHJvdmlkZXJzW2hvb2tdLmFwcGx5KG51bGwsIGFyZ3MpIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZEljb25EZWZpbml0aW9uKGljb25Mb29rdXApIHtcbiAgICBpZiAoaWNvbkxvb2t1cC5wcmVmaXggPT09ICdmYScpIHtcbiAgICAgIGljb25Mb29rdXAucHJlZml4ID0gJ2Zhcyc7XG4gICAgfVxuXG4gICAgdmFyIGljb25OYW1lID0gaWNvbkxvb2t1cC5pY29uTmFtZTtcbiAgICB2YXIgcHJlZml4ID0gaWNvbkxvb2t1cC5wcmVmaXggfHwgZ2V0RGVmYXVsdFVzYWJsZVByZWZpeCgpO1xuICAgIGlmICghaWNvbk5hbWUpIHJldHVybjtcbiAgICBpY29uTmFtZSA9IGJ5QWxpYXMocHJlZml4LCBpY29uTmFtZSkgfHwgaWNvbk5hbWU7XG4gICAgcmV0dXJuIGljb25Gcm9tTWFwcGluZyhsaWJyYXJ5LmRlZmluaXRpb25zLCBwcmVmaXgsIGljb25OYW1lKSB8fCBpY29uRnJvbU1hcHBpbmcobmFtZXNwYWNlLnN0eWxlcywgcHJlZml4LCBpY29uTmFtZSk7XG4gIH1cbiAgdmFyIGxpYnJhcnkgPSBuZXcgTGlicmFyeSgpO1xuICB2YXIgbm9BdXRvID0gZnVuY3Rpb24gbm9BdXRvKCkge1xuICAgIGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9IGZhbHNlO1xuICAgIGNvbmZpZy5vYnNlcnZlTXV0YXRpb25zID0gZmFsc2U7XG4gICAgY2FsbEhvb2tzKCdub0F1dG8nKTtcbiAgfTtcbiAgdmFyIGRvbSA9IHtcbiAgICBpMnN2ZzogZnVuY3Rpb24gaTJzdmcoKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICAgICAgaWYgKElTX0RPTSkge1xuICAgICAgICBjYWxsSG9va3MoJ2JlZm9yZUkyc3ZnJywgcGFyYW1zKTtcbiAgICAgICAgY2FsbFByb3ZpZGVkKCdwc2V1ZG9FbGVtZW50czJzdmcnLCBwYXJhbXMpO1xuICAgICAgICByZXR1cm4gY2FsbFByb3ZpZGVkKCdpMnN2ZycsIHBhcmFtcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ09wZXJhdGlvbiByZXF1aXJlcyBhIERPTSBvZiBzb21lIGtpbmQuJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDogZnVuY3Rpb24gd2F0Y2goKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAgIHZhciBhdXRvUmVwbGFjZVN2Z1Jvb3QgPSBwYXJhbXMuYXV0b1JlcGxhY2VTdmdSb290O1xuXG4gICAgICBpZiAoY29uZmlnLmF1dG9SZXBsYWNlU3ZnID09PSBmYWxzZSkge1xuICAgICAgICBjb25maWcuYXV0b1JlcGxhY2VTdmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb25maWcub2JzZXJ2ZU11dGF0aW9ucyA9IHRydWU7XG4gICAgICBkb21yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF1dG9SZXBsYWNlKHtcbiAgICAgICAgICBhdXRvUmVwbGFjZVN2Z1Jvb3Q6IGF1dG9SZXBsYWNlU3ZnUm9vdFxuICAgICAgICB9KTtcbiAgICAgICAgY2FsbEhvb2tzKCd3YXRjaCcsIHBhcmFtcyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHZhciBwYXJzZSA9IHtcbiAgICBpY29uOiBmdW5jdGlvbiBpY29uKF9pY29uKSB7XG4gICAgICBpZiAoX2ljb24gPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChfdHlwZW9mKF9pY29uKSA9PT0gJ29iamVjdCcgJiYgX2ljb24ucHJlZml4ICYmIF9pY29uLmljb25OYW1lKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlZml4OiBfaWNvbi5wcmVmaXgsXG4gICAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMoX2ljb24ucHJlZml4LCBfaWNvbi5pY29uTmFtZSkgfHwgX2ljb24uaWNvbk5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoX2ljb24pICYmIF9pY29uLmxlbmd0aCA9PT0gMikge1xuICAgICAgICB2YXIgaWNvbk5hbWUgPSBfaWNvblsxXS5pbmRleE9mKCdmYS0nKSA9PT0gMCA/IF9pY29uWzFdLnNsaWNlKDMpIDogX2ljb25bMV07XG4gICAgICAgIHZhciBwcmVmaXggPSBnZXRDYW5vbmljYWxQcmVmaXgoX2ljb25bMF0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgIGljb25OYW1lOiBieUFsaWFzKHByZWZpeCwgaWNvbk5hbWUpIHx8IGljb25OYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgX2ljb24gPT09ICdzdHJpbmcnICYmIChfaWNvbi5pbmRleE9mKFwiXCIuY29uY2F0KGNvbmZpZy5mYW1pbHlQcmVmaXgsIFwiLVwiKSkgPiAtMSB8fCBfaWNvbi5tYXRjaChJQ09OX1NFTEVDVElPTl9TWU5UQVhfUEFUVEVSTikpKSB7XG4gICAgICAgIHZhciBjYW5vbmljYWxJY29uID0gZ2V0Q2Fub25pY2FsSWNvbihfaWNvbi5zcGxpdCgnICcpLCB7XG4gICAgICAgICAgc2tpcExvb2t1cHM6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcHJlZml4OiBjYW5vbmljYWxJY29uLnByZWZpeCB8fCBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCksXG4gICAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMoY2Fub25pY2FsSWNvbi5wcmVmaXgsIGNhbm9uaWNhbEljb24uaWNvbk5hbWUpIHx8IGNhbm9uaWNhbEljb24uaWNvbk5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBfaWNvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIF9wcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmVmaXg6IF9wcmVmaXgsXG4gICAgICAgICAgaWNvbk5hbWU6IGJ5QWxpYXMoX3ByZWZpeCwgX2ljb24pIHx8IF9pY29uXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgYXBpID0ge1xuICAgIG5vQXV0bzogbm9BdXRvLFxuICAgIGNvbmZpZzogY29uZmlnLFxuICAgIGRvbTogZG9tLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBsaWJyYXJ5OiBsaWJyYXJ5LFxuICAgIGZpbmRJY29uRGVmaW5pdGlvbjogZmluZEljb25EZWZpbml0aW9uLFxuICAgIHRvSHRtbDogdG9IdG1sXG4gIH07XG5cbiAgdmFyIGF1dG9SZXBsYWNlID0gZnVuY3Rpb24gYXV0b1JlcGxhY2UoKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIF9wYXJhbXMkYXV0b1JlcGxhY2VTdiA9IHBhcmFtcy5hdXRvUmVwbGFjZVN2Z1Jvb3QsXG4gICAgICAgIGF1dG9SZXBsYWNlU3ZnUm9vdCA9IF9wYXJhbXMkYXV0b1JlcGxhY2VTdiA9PT0gdm9pZCAwID8gRE9DVU1FTlQgOiBfcGFyYW1zJGF1dG9SZXBsYWNlU3Y7XG4gICAgaWYgKChPYmplY3Qua2V5cyhuYW1lc3BhY2Uuc3R5bGVzKS5sZW5ndGggPiAwIHx8IGNvbmZpZy5hdXRvRmV0Y2hTdmcpICYmIElTX0RPTSAmJiBjb25maWcuYXV0b1JlcGxhY2VTdmcpIGFwaS5kb20uaTJzdmcoe1xuICAgICAgbm9kZTogYXV0b1JlcGxhY2VTdmdSb290XG4gICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gYm9vdHN0cmFwKHBsdWdpbnMpIHtcbiAgICBpZiAoSVNfQlJPV1NFUikge1xuICAgICAgaWYgKCFXSU5ET1cuRm9udEF3ZXNvbWUpIHtcbiAgICAgICAgV0lORE9XLkZvbnRBd2Vzb21lID0gYXBpO1xuICAgICAgfVxuXG4gICAgICBkb21yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF1dG9SZXBsYWNlKCk7XG4gICAgICAgIGNhbGxIb29rcygnYm9vdHN0cmFwJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBuYW1lc3BhY2UuaG9va3MgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbmFtZXNwYWNlLmhvb2tzKSwge30sIHtcbiAgICAgIGFkZFBhY2s6IGZ1bmN0aW9uIGFkZFBhY2socHJlZml4LCBpY29ucykge1xuICAgICAgICBuYW1lc3BhY2Uuc3R5bGVzW3ByZWZpeF0gPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdIHx8IHt9KSwgaWNvbnMpO1xuICAgICAgICBidWlsZCgpO1xuICAgICAgICBhdXRvUmVwbGFjZSgpO1xuICAgICAgfSxcbiAgICAgIGFkZFBhY2tzOiBmdW5jdGlvbiBhZGRQYWNrcyhwYWNrcykge1xuICAgICAgICBwYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICAgIHByZWZpeCA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgICBpY29ucyA9IF9yZWYyWzFdO1xuXG4gICAgICAgICAgbmFtZXNwYWNlLnN0eWxlc1twcmVmaXhdID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG5hbWVzcGFjZS5zdHlsZXNbcHJlZml4XSB8fCB7fSksIGljb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJ1aWxkKCk7XG4gICAgICAgIGF1dG9SZXBsYWNlKCk7XG4gICAgICB9LFxuICAgICAgYWRkU2hpbXM6IGZ1bmN0aW9uIGFkZFNoaW1zKHNoaW1zKSB7XG4gICAgICAgIHZhciBfbmFtZXNwYWNlJHNoaW1zO1xuXG4gICAgICAgIChfbmFtZXNwYWNlJHNoaW1zID0gbmFtZXNwYWNlLnNoaW1zKS5wdXNoLmFwcGx5KF9uYW1lc3BhY2Ukc2hpbXMsIF90b0NvbnN1bWFibGVBcnJheShzaGltcykpO1xuXG4gICAgICAgIGJ1aWxkKCk7XG4gICAgICAgIGF1dG9SZXBsYWNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBkb21WYXJpYW50cyh2YWwsIGFic3RyYWN0Q3JlYXRvcikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWwsICdhYnN0cmFjdCcsIHtcbiAgICAgIGdldDogYWJzdHJhY3RDcmVhdG9yXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbCwgJ2h0bWwnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHZhbC5hYnN0cmFjdC5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICByZXR1cm4gdG9IdG1sKGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsLCAnbm9kZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuICAgICAgICB2YXIgY29udGFpbmVyID0gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSB2YWwuaHRtbDtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5jaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgZnVuY3Rpb24gYXNJY29uIChfcmVmKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgICAgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXMsXG4gICAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtO1xuXG4gICAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pICYmIG1haW4uZm91bmQgJiYgIW1hc2suZm91bmQpIHtcbiAgICAgIHZhciB3aWR0aCA9IG1haW4ud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gbWFpbi5oZWlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0ID0ge1xuICAgICAgICB4OiB3aWR0aCAvIGhlaWdodCAvIDIsXG4gICAgICAgIHk6IDAuNVxuICAgICAgfTtcbiAgICAgIGF0dHJpYnV0ZXNbJ3N0eWxlJ10gPSBqb2luU3R5bGVzKF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzdHlsZXMpLCB7fSwge1xuICAgICAgICAndHJhbnNmb3JtLW9yaWdpbic6IFwiXCIuY29uY2F0KG9mZnNldC54ICsgdHJhbnNmb3JtLnggLyAxNiwgXCJlbSBcIikuY29uY2F0KG9mZnNldC55ICsgdHJhbnNmb3JtLnkgLyAxNiwgXCJlbVwiKVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiBbe1xuICAgICAgdGFnOiAnc3ZnJyxcbiAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICB9XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzU3ltYm9sIChfcmVmKSB7XG4gICAgdmFyIHByZWZpeCA9IF9yZWYucHJlZml4LFxuICAgICAgICBpY29uTmFtZSA9IF9yZWYuaWNvbk5hbWUsXG4gICAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgYXR0cmlidXRlcyA9IF9yZWYuYXR0cmlidXRlcyxcbiAgICAgICAgc3ltYm9sID0gX3JlZi5zeW1ib2w7XG4gICAgdmFyIGlkID0gc3ltYm9sID09PSB0cnVlID8gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGNvbmZpZy5mYW1pbHlQcmVmaXgsIFwiLVwiKS5jb25jYXQoaWNvbk5hbWUpIDogc3ltYm9sO1xuICAgIHJldHVybiBbe1xuICAgICAgdGFnOiAnc3ZnJyxcbiAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgc3R5bGU6ICdkaXNwbGF5OiBub25lOydcbiAgICAgIH0sXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdGFnOiAnc3ltYm9sJyxcbiAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGF0dHJpYnV0ZXMpLCB7fSwge1xuICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9XVxuICAgIH1dO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZUlubGluZVN2Z0Fic3RyYWN0KHBhcmFtcykge1xuICAgIHZhciBfcGFyYW1zJGljb25zID0gcGFyYW1zLmljb25zLFxuICAgICAgICBtYWluID0gX3BhcmFtcyRpY29ucy5tYWluLFxuICAgICAgICBtYXNrID0gX3BhcmFtcyRpY29ucy5tYXNrLFxuICAgICAgICBwcmVmaXggPSBwYXJhbXMucHJlZml4LFxuICAgICAgICBpY29uTmFtZSA9IHBhcmFtcy5pY29uTmFtZSxcbiAgICAgICAgdHJhbnNmb3JtID0gcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgICAgc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICAgIG1hc2tJZCA9IHBhcmFtcy5tYXNrSWQsXG4gICAgICAgIHRpdGxlSWQgPSBwYXJhbXMudGl0bGVJZCxcbiAgICAgICAgZXh0cmEgPSBwYXJhbXMuZXh0cmEsXG4gICAgICAgIF9wYXJhbXMkd2F0Y2hhYmxlID0gcGFyYW1zLndhdGNoYWJsZSxcbiAgICAgICAgd2F0Y2hhYmxlID0gX3BhcmFtcyR3YXRjaGFibGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyR3YXRjaGFibGU7XG5cbiAgICB2YXIgX3JlZiA9IG1hc2suZm91bmQgPyBtYXNrIDogbWFpbixcbiAgICAgICAgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmLmhlaWdodDtcblxuICAgIHZhciBpc1VwbG9hZGVkSWNvbiA9IHByZWZpeCA9PT0gJ2Zhayc7XG4gICAgdmFyIGF0dHJDbGFzcyA9IFtjb25maWcucmVwbGFjZW1lbnRDbGFzcywgaWNvbk5hbWUgPyBcIlwiLmNvbmNhdChjb25maWcuZmFtaWx5UHJlZml4LCBcIi1cIikuY29uY2F0KGljb25OYW1lKSA6ICcnXS5maWx0ZXIoZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBleHRyYS5jbGFzc2VzLmluZGV4T2YoYykgPT09IC0xO1xuICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGMgIT09ICcnIHx8ICEhYztcbiAgICB9KS5jb25jYXQoZXh0cmEuY2xhc3Nlcykuam9pbignICcpO1xuICAgIHZhciBjb250ZW50ID0ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLmF0dHJpYnV0ZXMpLCB7fSwge1xuICAgICAgICAnZGF0YS1wcmVmaXgnOiBwcmVmaXgsXG4gICAgICAgICdkYXRhLWljb24nOiBpY29uTmFtZSxcbiAgICAgICAgJ2NsYXNzJzogYXR0ckNsYXNzLFxuICAgICAgICAncm9sZSc6IGV4dHJhLmF0dHJpYnV0ZXMucm9sZSB8fCAnaW1nJyxcbiAgICAgICAgJ3htbG5zJzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICAgJ3ZpZXdCb3gnOiBcIjAgMCBcIi5jb25jYXQod2lkdGgsIFwiIFwiKS5jb25jYXQoaGVpZ2h0KVxuICAgICAgfSlcbiAgICB9O1xuICAgIHZhciB1cGxvYWRlZEljb25XaWR0aFN0eWxlID0gaXNVcGxvYWRlZEljb24gJiYgIX5leHRyYS5jbGFzc2VzLmluZGV4T2YoJ2ZhLWZ3JykgPyB7XG4gICAgICB3aWR0aDogXCJcIi5jb25jYXQod2lkdGggLyBoZWlnaHQgKiAxNiAqIDAuMDYyNSwgXCJlbVwiKVxuICAgIH0gOiB7fTtcblxuICAgIGlmICh3YXRjaGFibGUpIHtcbiAgICAgIGNvbnRlbnQuYXR0cmlidXRlc1tEQVRBX0ZBX0kyU1ZHXSA9ICcnO1xuICAgIH1cblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgY29udGVudC5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgdGFnOiAndGl0bGUnLFxuICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgaWQ6IGNvbnRlbnQuYXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gfHwgXCJ0aXRsZS1cIi5jb25jYXQodGl0bGVJZCB8fCBuZXh0VW5pcXVlSWQoKSlcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFt0aXRsZV1cbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIGNvbnRlbnQuYXR0cmlidXRlcy50aXRsZTtcbiAgICB9XG5cbiAgICB2YXIgYXJncyA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBjb250ZW50KSwge30sIHtcbiAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgbWFpbjogbWFpbixcbiAgICAgIG1hc2s6IG1hc2ssXG4gICAgICBtYXNrSWQ6IG1hc2tJZCxcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgICBzdHlsZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCB1cGxvYWRlZEljb25XaWR0aFN0eWxlKSwgZXh0cmEuc3R5bGVzKVxuICAgIH0pO1xuXG4gICAgdmFyIF9yZWYyID0gbWFzay5mb3VuZCAmJiBtYWluLmZvdW5kID8gY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZUFic3RyYWN0TWFzaycsIGFyZ3MpIHx8IHtcbiAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9XG4gICAgfSA6IGNhbGxQcm92aWRlZCgnZ2VuZXJhdGVBYnN0cmFjdEljb24nLCBhcmdzKSB8fCB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBhdHRyaWJ1dGVzOiB7fVxuICAgIH0sXG4gICAgICAgIGNoaWxkcmVuID0gX3JlZjIuY2hpbGRyZW4sXG4gICAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmMi5hdHRyaWJ1dGVzO1xuXG4gICAgYXJncy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIGFyZ3MuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgICBpZiAoc3ltYm9sKSB7XG4gICAgICByZXR1cm4gYXNTeW1ib2woYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhc0ljb24oYXJncyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1ha2VMYXllcnNUZXh0QWJzdHJhY3QocGFyYW1zKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBwYXJhbXMuY29udGVudCxcbiAgICAgICAgd2lkdGggPSBwYXJhbXMud2lkdGgsXG4gICAgICAgIGhlaWdodCA9IHBhcmFtcy5oZWlnaHQsXG4gICAgICAgIHRyYW5zZm9ybSA9IHBhcmFtcy50cmFuc2Zvcm0sXG4gICAgICAgIHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgICBleHRyYSA9IHBhcmFtcy5leHRyYSxcbiAgICAgICAgX3BhcmFtcyR3YXRjaGFibGUyID0gcGFyYW1zLndhdGNoYWJsZSxcbiAgICAgICAgd2F0Y2hhYmxlID0gX3BhcmFtcyR3YXRjaGFibGUyID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wYXJhbXMkd2F0Y2hhYmxlMjtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGV4dHJhLmF0dHJpYnV0ZXMpLCB0aXRsZSA/IHtcbiAgICAgICd0aXRsZSc6IHRpdGxlXG4gICAgfSA6IHt9KSwge30sIHtcbiAgICAgICdjbGFzcyc6IGV4dHJhLmNsYXNzZXMuam9pbignICcpXG4gICAgfSk7XG5cbiAgICBpZiAod2F0Y2hhYmxlKSB7XG4gICAgICBhdHRyaWJ1dGVzW0RBVEFfRkFfSTJTVkddID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlcyA9IF9vYmplY3RTcHJlYWQyKHt9LCBleHRyYS5zdHlsZXMpO1xuXG4gICAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgICBzdHlsZXNbJ3RyYW5zZm9ybSddID0gdHJhbnNmb3JtRm9yQ3NzKHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgIHN0YXJ0Q2VudGVyZWQ6IHRydWUsXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgIH0pO1xuICAgICAgc3R5bGVzWyctd2Via2l0LXRyYW5zZm9ybSddID0gc3R5bGVzWyd0cmFuc2Zvcm0nXTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVTdHJpbmcgPSBqb2luU3R5bGVzKHN0eWxlcyk7XG5cbiAgICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgYXR0cmlidXRlc1snc3R5bGUnXSA9IHN0eWxlU3RyaW5nO1xuICAgIH1cblxuICAgIHZhciB2YWwgPSBbXTtcbiAgICB2YWwucHVzaCh7XG4gICAgICB0YWc6ICdzcGFuJyxcbiAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZHJlbjogW2NvbnRlbnRdXG4gICAgfSk7XG5cbiAgICBpZiAodGl0bGUpIHtcbiAgICAgIHZhbC5wdXNoKHtcbiAgICAgICAgdGFnOiAnc3BhbicsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICBjbGFzczogJ3NyLW9ubHknXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBbdGl0bGVdXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VMYXllcnNDb3VudGVyQWJzdHJhY3QocGFyYW1zKSB7XG4gICAgdmFyIGNvbnRlbnQgPSBwYXJhbXMuY29udGVudCxcbiAgICAgICAgdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICAgIGV4dHJhID0gcGFyYW1zLmV4dHJhO1xuXG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgZXh0cmEuYXR0cmlidXRlcyksIHRpdGxlID8ge1xuICAgICAgJ3RpdGxlJzogdGl0bGVcbiAgICB9IDoge30pLCB7fSwge1xuICAgICAgJ2NsYXNzJzogZXh0cmEuY2xhc3Nlcy5qb2luKCcgJylcbiAgICB9KTtcblxuICAgIHZhciBzdHlsZVN0cmluZyA9IGpvaW5TdHlsZXMoZXh0cmEuc3R5bGVzKTtcblxuICAgIGlmIChzdHlsZVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICBhdHRyaWJ1dGVzWydzdHlsZSddID0gc3R5bGVTdHJpbmc7XG4gICAgfVxuXG4gICAgdmFyIHZhbCA9IFtdO1xuICAgIHZhbC5wdXNoKHtcbiAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkcmVuOiBbY29udGVudF1cbiAgICB9KTtcblxuICAgIGlmICh0aXRsZSkge1xuICAgICAgdmFsLnB1c2goe1xuICAgICAgICB0YWc6ICdzcGFuJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGNsYXNzOiAnc3Itb25seSdcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFt0aXRsZV1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICB2YXIgc3R5bGVzJDEgPSBuYW1lc3BhY2Uuc3R5bGVzO1xuICBmdW5jdGlvbiBhc0ZvdW5kSWNvbihpY29uKSB7XG4gICAgdmFyIHdpZHRoID0gaWNvblswXTtcbiAgICB2YXIgaGVpZ2h0ID0gaWNvblsxXTtcblxuICAgIHZhciBfaWNvbiRzbGljZSA9IGljb24uc2xpY2UoNCksXG4gICAgICAgIF9pY29uJHNsaWNlMiA9IF9zbGljZWRUb0FycmF5KF9pY29uJHNsaWNlLCAxKSxcbiAgICAgICAgdmVjdG9yRGF0YSA9IF9pY29uJHNsaWNlMlswXTtcblxuICAgIHZhciBlbGVtZW50ID0gbnVsbDtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZlY3RvckRhdGEpKSB7XG4gICAgICBlbGVtZW50ID0ge1xuICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGNsYXNzOiBcIlwiLmNvbmNhdChjb25maWcuZmFtaWx5UHJlZml4LCBcIi1cIikuY29uY2F0KERVT1RPTkVfQ0xBU1NFUy5HUk9VUClcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgY2xhc3M6IFwiXCIuY29uY2F0KGNvbmZpZy5mYW1pbHlQcmVmaXgsIFwiLVwiKS5jb25jYXQoRFVPVE9ORV9DTEFTU0VTLlNFQ09OREFSWSksXG4gICAgICAgICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgICAgICAgIGQ6IHZlY3RvckRhdGFbMF1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0YWc6ICdwYXRoJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICBjbGFzczogXCJcIi5jb25jYXQoY29uZmlnLmZhbWlseVByZWZpeCwgXCItXCIpLmNvbmNhdChEVU9UT05FX0NMQVNTRVMuUFJJTUFSWSksXG4gICAgICAgICAgICBmaWxsOiAnY3VycmVudENvbG9yJyxcbiAgICAgICAgICAgIGQ6IHZlY3RvckRhdGFbMV1cbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50ID0ge1xuICAgICAgICB0YWc6ICdwYXRoJyxcbiAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAgIGQ6IHZlY3RvckRhdGFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm91bmQ6IHRydWUsXG4gICAgICB3aWR0aDogd2lkdGgsXG4gICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgIGljb246IGVsZW1lbnRcbiAgICB9O1xuICB9XG4gIHZhciBtaXNzaW5nSWNvblJlc29sdXRpb25NaXhpbiA9IHtcbiAgICBmb3VuZDogZmFsc2UsXG4gICAgd2lkdGg6IDUxMixcbiAgICBoZWlnaHQ6IDUxMlxuICB9O1xuXG4gIGZ1bmN0aW9uIG1heWJlTm90aWZ5TWlzc2luZyhpY29uTmFtZSwgcHJlZml4KSB7XG4gICAgaWYgKCFQUk9EVUNUSU9OICYmICFjb25maWcuc2hvd01pc3NpbmdJY29ucyAmJiBpY29uTmFtZSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkljb24gd2l0aCBuYW1lIFxcXCJcIi5jb25jYXQoaWNvbk5hbWUsIFwiXFxcIiBhbmQgcHJlZml4IFxcXCJcIikuY29uY2F0KHByZWZpeCwgXCJcXFwiIGlzIG1pc3NpbmcuXCIpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSB7XG4gICAgdmFyIGdpdmVuUHJlZml4ID0gcHJlZml4O1xuXG4gICAgaWYgKHByZWZpeCA9PT0gJ2ZhJyAmJiBjb25maWcuc3R5bGVEZWZhdWx0ICE9PSBudWxsKSB7XG4gICAgICBwcmVmaXggPSBnZXREZWZhdWx0VXNhYmxlUHJlZml4KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciB2YWwgPSB7XG4gICAgICAgIGZvdW5kOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDUxMixcbiAgICAgICAgaGVpZ2h0OiA1MTIsXG4gICAgICAgIGljb246IGNhbGxQcm92aWRlZCgnbWlzc2luZ0ljb25BYnN0cmFjdCcpIHx8IHt9XG4gICAgICB9O1xuXG4gICAgICBpZiAoZ2l2ZW5QcmVmaXggPT09ICdmYScpIHtcbiAgICAgICAgdmFyIHNoaW0gPSBieU9sZE5hbWUoaWNvbk5hbWUpIHx8IHt9O1xuICAgICAgICBpY29uTmFtZSA9IHNoaW0uaWNvbk5hbWUgfHwgaWNvbk5hbWU7XG4gICAgICAgIHByZWZpeCA9IHNoaW0ucHJlZml4IHx8IHByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKGljb25OYW1lICYmIHByZWZpeCAmJiBzdHlsZXMkMVtwcmVmaXhdICYmIHN0eWxlcyQxW3ByZWZpeF1baWNvbk5hbWVdKSB7XG4gICAgICAgIHZhciBpY29uID0gc3R5bGVzJDFbcHJlZml4XVtpY29uTmFtZV07XG4gICAgICAgIHJldHVybiByZXNvbHZlKGFzRm91bmRJY29uKGljb24pKTtcbiAgICAgIH1cblxuICAgICAgbWF5YmVOb3RpZnlNaXNzaW5nKGljb25OYW1lLCBwcmVmaXgpO1xuICAgICAgcmVzb2x2ZShfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgbWlzc2luZ0ljb25SZXNvbHV0aW9uTWl4aW4pLCB7fSwge1xuICAgICAgICBpY29uOiBjb25maWcuc2hvd01pc3NpbmdJY29ucyAmJiBpY29uTmFtZSA/IGNhbGxQcm92aWRlZCgnbWlzc2luZ0ljb25BYnN0cmFjdCcpIHx8IHt9IDoge31cbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBub29wJDEgPSBmdW5jdGlvbiBub29wKCkge307XG5cbiAgdmFyIHAgPSBjb25maWcubWVhc3VyZVBlcmZvcm1hbmNlICYmIFBFUkZPUk1BTkNFICYmIFBFUkZPUk1BTkNFLm1hcmsgJiYgUEVSRk9STUFOQ0UubWVhc3VyZSA/IFBFUkZPUk1BTkNFIDoge1xuICAgIG1hcms6IG5vb3AkMSxcbiAgICBtZWFzdXJlOiBub29wJDFcbiAgfTtcbiAgdmFyIHByZWFtYmxlID0gXCJGQSBcXFwiNi4xLjFcXFwiXCI7XG5cbiAgdmFyIGJlZ2luID0gZnVuY3Rpb24gYmVnaW4obmFtZSkge1xuICAgIHAubWFyayhcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lLCBcIiBiZWdpbnNcIikpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZW5kKG5hbWUpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGVuZCA9IGZ1bmN0aW9uIGVuZChuYW1lKSB7XG4gICAgcC5tYXJrKFwiXCIuY29uY2F0KHByZWFtYmxlLCBcIiBcIikuY29uY2F0KG5hbWUsIFwiIGVuZHNcIikpO1xuICAgIHAubWVhc3VyZShcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lKSwgXCJcIi5jb25jYXQocHJlYW1ibGUsIFwiIFwiKS5jb25jYXQobmFtZSwgXCIgYmVnaW5zXCIpLCBcIlwiLmNvbmNhdChwcmVhbWJsZSwgXCIgXCIpLmNvbmNhdChuYW1lLCBcIiBlbmRzXCIpKTtcbiAgfTtcblxuICB2YXIgcGVyZiA9IHtcbiAgICBiZWdpbjogYmVnaW4sXG4gICAgZW5kOiBlbmRcbiAgfTtcblxuICB2YXIgbm9vcCQyID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4gIGZ1bmN0aW9uIGlzV2F0Y2hlZChub2RlKSB7XG4gICAgdmFyIGkyc3ZnID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA6IG51bGw7XG4gICAgcmV0dXJuIHR5cGVvZiBpMnN2ZyA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNQcmVmaXhBbmRJY29uKG5vZGUpIHtcbiAgICB2YXIgcHJlZml4ID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX1BSRUZJWCkgOiBudWxsO1xuICAgIHZhciBpY29uID0gbm9kZS5nZXRBdHRyaWJ1dGUgPyBub2RlLmdldEF0dHJpYnV0ZShEQVRBX0lDT04pIDogbnVsbDtcbiAgICByZXR1cm4gcHJlZml4ICYmIGljb247XG4gIH1cblxuICBmdW5jdGlvbiBoYXNCZWVuUmVwbGFjZWQobm9kZSkge1xuICAgIHJldHVybiBub2RlICYmIG5vZGUuY2xhc3NMaXN0ICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zICYmIG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNvbmZpZy5yZXBsYWNlbWVudENsYXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE11dGF0b3IoKSB7XG4gICAgaWYgKGNvbmZpZy5hdXRvUmVwbGFjZVN2ZyA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIG11dGF0b3JzLnJlcGxhY2U7XG4gICAgfVxuXG4gICAgdmFyIG11dGF0b3IgPSBtdXRhdG9yc1tjb25maWcuYXV0b1JlcGxhY2VTdmddO1xuICAgIHJldHVybiBtdXRhdG9yIHx8IG11dGF0b3JzLnJlcGxhY2U7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50TlModGFnKSB7XG4gICAgcmV0dXJuIERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCB0YWcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcpIHtcbiAgICByZXR1cm4gRE9DVU1FTlQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFNWRyhhYnN0cmFjdE9iaikge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBfcGFyYW1zJGNlRm4gPSBwYXJhbXMuY2VGbixcbiAgICAgICAgY2VGbiA9IF9wYXJhbXMkY2VGbiA9PT0gdm9pZCAwID8gYWJzdHJhY3RPYmoudGFnID09PSAnc3ZnJyA/IGNyZWF0ZUVsZW1lbnROUyA6IGNyZWF0ZUVsZW1lbnQgOiBfcGFyYW1zJGNlRm47XG5cbiAgICBpZiAodHlwZW9mIGFic3RyYWN0T2JqID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIERPQ1VNRU5ULmNyZWF0ZVRleHROb2RlKGFic3RyYWN0T2JqKTtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gY2VGbihhYnN0cmFjdE9iai50YWcpO1xuICAgIE9iamVjdC5rZXlzKGFic3RyYWN0T2JqLmF0dHJpYnV0ZXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdGFnLnNldEF0dHJpYnV0ZShrZXksIGFic3RyYWN0T2JqLmF0dHJpYnV0ZXNba2V5XSk7XG4gICAgfSk7XG4gICAgdmFyIGNoaWxkcmVuID0gYWJzdHJhY3RPYmouY2hpbGRyZW4gfHwgW107XG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHRhZy5hcHBlbmRDaGlsZChjb252ZXJ0U1ZHKGNoaWxkLCB7XG4gICAgICAgIGNlRm46IGNlRm5cbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGFnO1xuICB9XG5cbiAgZnVuY3Rpb24gbm9kZUFzQ29tbWVudChub2RlKSB7XG4gICAgdmFyIGNvbW1lbnQgPSBcIiBcIi5jb25jYXQobm9kZS5vdXRlckhUTUwsIFwiIFwiKTtcbiAgICAvKiBCRUdJTi5BVFRSSUJVVElPTiAqL1xuXG4gICAgY29tbWVudCA9IFwiXCIuY29uY2F0KGNvbW1lbnQsIFwiRm9udCBBd2Vzb21lIGZvbnRhd2Vzb21lLmNvbSBcIik7XG4gICAgLyogRU5ELkFUVFJJQlVUSU9OICovXG5cbiAgICByZXR1cm4gY29tbWVudDtcbiAgfVxuXG4gIHZhciBtdXRhdG9ycyA9IHtcbiAgICByZXBsYWNlOiBmdW5jdGlvbiByZXBsYWNlKG11dGF0aW9uKSB7XG4gICAgICB2YXIgbm9kZSA9IG11dGF0aW9uWzBdO1xuXG4gICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgIG11dGF0aW9uWzFdLmZvckVhY2goZnVuY3Rpb24gKGFic3RyYWN0KSB7XG4gICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjb252ZXJ0U1ZHKGFic3RyYWN0KSwgbm9kZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZShEQVRBX0ZBX0kyU1ZHKSA9PT0gbnVsbCAmJiBjb25maWcua2VlcE9yaWdpbmFsU291cmNlKSB7XG4gICAgICAgICAgdmFyIGNvbW1lbnQgPSBET0NVTUVOVC5jcmVhdGVDb21tZW50KG5vZGVBc0NvbW1lbnQobm9kZSkpO1xuICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoY29tbWVudCwgbm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbmVzdDogZnVuY3Rpb24gbmVzdChtdXRhdGlvbikge1xuICAgICAgdmFyIG5vZGUgPSBtdXRhdGlvblswXTtcbiAgICAgIHZhciBhYnN0cmFjdCA9IG11dGF0aW9uWzFdOyAvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgYSByZXBsYWNlZCBub2RlIHdlIGRvIG5vdCB3YW50IHRvIGNvbnRpbnVlIG5lc3Rpbmcgd2l0aGluIGl0LlxuICAgICAgLy8gU2hvcnQtY2lyY3VpdCB0byB0aGUgc3RhbmRhcmQgcmVwbGFjZW1lbnRcblxuICAgICAgaWYgKH5jbGFzc0FycmF5KG5vZGUpLmluZGV4T2YoY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MpKSB7XG4gICAgICAgIHJldHVybiBtdXRhdG9ycy5yZXBsYWNlKG11dGF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvclN2ZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoY29uZmlnLmZhbWlseVByZWZpeCwgXCItLipcIikpO1xuICAgICAgZGVsZXRlIGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuaWQ7XG5cbiAgICAgIGlmIChhYnN0cmFjdFswXS5hdHRyaWJ1dGVzLmNsYXNzKSB7XG4gICAgICAgIHZhciBzcGxpdENsYXNzZXMgPSBhYnN0cmFjdFswXS5hdHRyaWJ1dGVzLmNsYXNzLnNwbGl0KCcgJykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGNscykge1xuICAgICAgICAgIGlmIChjbHMgPT09IGNvbmZpZy5yZXBsYWNlbWVudENsYXNzIHx8IGNscy5tYXRjaChmb3JTdmcpKSB7XG4gICAgICAgICAgICBhY2MudG9TdmcucHVzaChjbHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2MudG9Ob2RlLnB1c2goY2xzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICB9LCB7XG4gICAgICAgICAgdG9Ob2RlOiBbXSxcbiAgICAgICAgICB0b1N2ZzogW11cbiAgICAgICAgfSk7XG4gICAgICAgIGFic3RyYWN0WzBdLmF0dHJpYnV0ZXMuY2xhc3MgPSBzcGxpdENsYXNzZXMudG9Tdmcuam9pbignICcpO1xuXG4gICAgICAgIGlmIChzcGxpdENsYXNzZXMudG9Ob2RlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdjbGFzcycsIHNwbGl0Q2xhc3Nlcy50b05vZGUuam9pbignICcpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgbmV3SW5uZXJIVE1MID0gYWJzdHJhY3QubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKERBVEFfRkFfSTJTVkcsICcnKTtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gbmV3SW5uZXJIVE1MO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBwZXJmb3JtT3BlcmF0aW9uU3luYyhvcCkge1xuICAgIG9wKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtKG11dGF0aW9ucywgY2FsbGJhY2spIHtcbiAgICB2YXIgY2FsbGJhY2tGdW5jdGlvbiA9IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJyA/IGNhbGxiYWNrIDogbm9vcCQyO1xuXG4gICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNhbGxiYWNrRnVuY3Rpb24oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGZyYW1lID0gcGVyZm9ybU9wZXJhdGlvblN5bmM7XG5cbiAgICAgIGlmIChjb25maWcubXV0YXRlQXBwcm9hY2ggPT09IE1VVEFUSU9OX0FQUFJPQUNIX0FTWU5DKSB7XG4gICAgICAgIGZyYW1lID0gV0lORE9XLnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBwZXJmb3JtT3BlcmF0aW9uU3luYztcbiAgICAgIH1cblxuICAgICAgZnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbXV0YXRvciA9IGdldE11dGF0b3IoKTtcbiAgICAgICAgdmFyIG1hcmsgPSBwZXJmLmJlZ2luKCdtdXRhdGUnKTtcbiAgICAgICAgbXV0YXRpb25zLm1hcChtdXRhdG9yKTtcbiAgICAgICAgbWFyaygpO1xuICAgICAgICBjYWxsYmFja0Z1bmN0aW9uKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgdmFyIGRpc2FibGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGRpc2FibGVPYnNlcnZhdGlvbigpIHtcbiAgICBkaXNhYmxlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlT2JzZXJ2YXRpb24oKSB7XG4gICAgZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxuICB2YXIgbW8gPSBudWxsO1xuICBmdW5jdGlvbiBvYnNlcnZlKG9wdGlvbnMpIHtcbiAgICBpZiAoIU1VVEFUSU9OX09CU0VSVkVSKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFjb25maWcub2JzZXJ2ZU11dGF0aW9ucykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyR0cmVlQ2FsbGJhY2sgPSBvcHRpb25zLnRyZWVDYWxsYmFjayxcbiAgICAgICAgdHJlZUNhbGxiYWNrID0gX29wdGlvbnMkdHJlZUNhbGxiYWNrID09PSB2b2lkIDAgPyBub29wJDIgOiBfb3B0aW9ucyR0cmVlQ2FsbGJhY2ssXG4gICAgICAgIF9vcHRpb25zJG5vZGVDYWxsYmFjayA9IG9wdGlvbnMubm9kZUNhbGxiYWNrLFxuICAgICAgICBub2RlQ2FsbGJhY2sgPSBfb3B0aW9ucyRub2RlQ2FsbGJhY2sgPT09IHZvaWQgMCA/IG5vb3AkMiA6IF9vcHRpb25zJG5vZGVDYWxsYmFjayxcbiAgICAgICAgX29wdGlvbnMkcHNldWRvRWxlbWVuID0gb3B0aW9ucy5wc2V1ZG9FbGVtZW50c0NhbGxiYWNrLFxuICAgICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrID0gX29wdGlvbnMkcHNldWRvRWxlbWVuID09PSB2b2lkIDAgPyBub29wJDIgOiBfb3B0aW9ucyRwc2V1ZG9FbGVtZW4sXG4gICAgICAgIF9vcHRpb25zJG9ic2VydmVNdXRhdCA9IG9wdGlvbnMub2JzZXJ2ZU11dGF0aW9uc1Jvb3QsXG4gICAgICAgIG9ic2VydmVNdXRhdGlvbnNSb290ID0gX29wdGlvbnMkb2JzZXJ2ZU11dGF0ID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9vcHRpb25zJG9ic2VydmVNdXRhdDtcbiAgICBtbyA9IG5ldyBNVVRBVElPTl9PQlNFUlZFUihmdW5jdGlvbiAob2JqZWN0cykge1xuICAgICAgaWYgKGRpc2FibGVkKSByZXR1cm47XG4gICAgICB2YXIgZGVmYXVsdFByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgICAgIHRvQXJyYXkob2JqZWN0cykuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb25SZWNvcmQpIHtcbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLnR5cGUgPT09ICdjaGlsZExpc3QnICYmIG11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXMubGVuZ3RoID4gMCAmJiAhaXNXYXRjaGVkKG11dGF0aW9uUmVjb3JkLmFkZGVkTm9kZXNbMF0pKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5zZWFyY2hQc2V1ZG9FbGVtZW50cykge1xuICAgICAgICAgICAgcHNldWRvRWxlbWVudHNDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRyZWVDYWxsYmFjayhtdXRhdGlvblJlY29yZC50YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG11dGF0aW9uUmVjb3JkLnR5cGUgPT09ICdhdHRyaWJ1dGVzJyAmJiBtdXRhdGlvblJlY29yZC50YXJnZXQucGFyZW50Tm9kZSAmJiBjb25maWcuc2VhcmNoUHNldWRvRWxlbWVudHMpIHtcbiAgICAgICAgICBwc2V1ZG9FbGVtZW50c0NhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtdXRhdGlvblJlY29yZC50eXBlID09PSAnYXR0cmlidXRlcycgJiYgaXNXYXRjaGVkKG11dGF0aW9uUmVjb3JkLnRhcmdldCkgJiYgfkFUVFJJQlVURVNfV0FUQ0hFRF9GT1JfTVVUQVRJT04uaW5kZXhPZihtdXRhdGlvblJlY29yZC5hdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgIGlmIChtdXRhdGlvblJlY29yZC5hdHRyaWJ1dGVOYW1lID09PSAnY2xhc3MnICYmIGhhc1ByZWZpeEFuZEljb24obXV0YXRpb25SZWNvcmQudGFyZ2V0KSkge1xuICAgICAgICAgICAgdmFyIF9nZXRDYW5vbmljYWxJY29uID0gZ2V0Q2Fub25pY2FsSWNvbihjbGFzc0FycmF5KG11dGF0aW9uUmVjb3JkLnRhcmdldCkpLFxuICAgICAgICAgICAgICAgIHByZWZpeCA9IF9nZXRDYW5vbmljYWxJY29uLnByZWZpeCxcbiAgICAgICAgICAgICAgICBpY29uTmFtZSA9IF9nZXRDYW5vbmljYWxJY29uLmljb25OYW1lO1xuXG4gICAgICAgICAgICBtdXRhdGlvblJlY29yZC50YXJnZXQuc2V0QXR0cmlidXRlKERBVEFfUFJFRklYLCBwcmVmaXggfHwgZGVmYXVsdFByZWZpeCk7XG4gICAgICAgICAgICBpZiAoaWNvbk5hbWUpIG11dGF0aW9uUmVjb3JkLnRhcmdldC5zZXRBdHRyaWJ1dGUoREFUQV9JQ09OLCBpY29uTmFtZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNCZWVuUmVwbGFjZWQobXV0YXRpb25SZWNvcmQudGFyZ2V0KSkge1xuICAgICAgICAgICAgbm9kZUNhbGxiYWNrKG11dGF0aW9uUmVjb3JkLnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAoIUlTX0RPTSkgcmV0dXJuO1xuICAgIG1vLm9ic2VydmUob2JzZXJ2ZU11dGF0aW9uc1Jvb3QsIHtcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgc3VidHJlZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7XG4gICAgaWYgKCFtbykgcmV0dXJuO1xuICAgIG1vLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlUGFyc2VyIChub2RlKSB7XG4gICAgdmFyIHN0eWxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgdmFyIHZhbCA9IFtdO1xuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICB2YWwgPSBzdHlsZS5zcGxpdCgnOycpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBzdHlsZSkge1xuICAgICAgICB2YXIgc3R5bGVzID0gc3R5bGUuc3BsaXQoJzonKTtcbiAgICAgICAgdmFyIHByb3AgPSBzdHlsZXNbMF07XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlcy5zbGljZSgxKTtcblxuICAgICAgICBpZiAocHJvcCAmJiB2YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWNjW3Byb3BdID0gdmFsdWUuam9pbignOicpLnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNsYXNzUGFyc2VyIChub2RlKSB7XG4gICAgdmFyIGV4aXN0aW5nUHJlZml4ID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcHJlZml4Jyk7XG4gICAgdmFyIGV4aXN0aW5nSWNvbk5hbWUgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1pY29uJyk7XG4gICAgdmFyIGlubmVyVGV4dCA9IG5vZGUuaW5uZXJUZXh0ICE9PSB1bmRlZmluZWQgPyBub2RlLmlubmVyVGV4dC50cmltKCkgOiAnJztcbiAgICB2YXIgdmFsID0gZ2V0Q2Fub25pY2FsSWNvbihjbGFzc0FycmF5KG5vZGUpKTtcblxuICAgIGlmICghdmFsLnByZWZpeCkge1xuICAgICAgdmFsLnByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgICB9XG5cbiAgICBpZiAoZXhpc3RpbmdQcmVmaXggJiYgZXhpc3RpbmdJY29uTmFtZSkge1xuICAgICAgdmFsLnByZWZpeCA9IGV4aXN0aW5nUHJlZml4O1xuICAgICAgdmFsLmljb25OYW1lID0gZXhpc3RpbmdJY29uTmFtZTtcbiAgICB9XG5cbiAgICBpZiAodmFsLmljb25OYW1lICYmIHZhbC5wcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgaWYgKHZhbC5wcmVmaXggJiYgaW5uZXJUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgIHZhbC5pY29uTmFtZSA9IGJ5TGlnYXR1cmUodmFsLnByZWZpeCwgbm9kZS5pbm5lclRleHQpIHx8IGJ5VW5pY29kZSh2YWwucHJlZml4LCB0b0hleChub2RlLmlubmVyVGV4dCkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBhdHRyaWJ1dGVzUGFyc2VyIChub2RlKSB7XG4gICAgdmFyIGV4dHJhQXR0cmlidXRlcyA9IHRvQXJyYXkobm9kZS5hdHRyaWJ1dGVzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgYXR0cikge1xuICAgICAgaWYgKGFjYy5uYW1lICE9PSAnY2xhc3MnICYmIGFjYy5uYW1lICE9PSAnc3R5bGUnKSB7XG4gICAgICAgIGFjY1thdHRyLm5hbWVdID0gYXR0ci52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSk7XG4gICAgdmFyIHRpdGxlID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG4gICAgdmFyIHRpdGxlSWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS10aXRsZS1pZCcpO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQTExeSkge1xuICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1sYWJlbGxlZGJ5J10gPSBcIlwiLmNvbmNhdChjb25maWcucmVwbGFjZW1lbnRDbGFzcywgXCItdGl0bGUtXCIpLmNvbmNhdCh0aXRsZUlkIHx8IG5leHRVbmlxdWVJZCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4dHJhQXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgICAgZXh0cmFBdHRyaWJ1dGVzWydmb2N1c2FibGUnXSA9ICdmYWxzZSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dHJhQXR0cmlidXRlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsYW5rTWV0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWNvbk5hbWU6IG51bGwsXG4gICAgICB0aXRsZTogbnVsbCxcbiAgICAgIHRpdGxlSWQ6IG51bGwsXG4gICAgICBwcmVmaXg6IG51bGwsXG4gICAgICB0cmFuc2Zvcm06IG1lYW5pbmdsZXNzVHJhbnNmb3JtLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIG1hc2s6IHtcbiAgICAgICAgaWNvbk5hbWU6IG51bGwsXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgcmVzdDogW11cbiAgICAgIH0sXG4gICAgICBtYXNrSWQ6IG51bGwsXG4gICAgICBleHRyYToge1xuICAgICAgICBjbGFzc2VzOiBbXSxcbiAgICAgICAgc3R5bGVzOiB7fSxcbiAgICAgICAgYXR0cmlidXRlczoge31cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIHBhcnNlTWV0YShub2RlKSB7XG4gICAgdmFyIHBhcnNlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge1xuICAgICAgc3R5bGVQYXJzZXI6IHRydWVcbiAgICB9O1xuXG4gICAgdmFyIF9jbGFzc1BhcnNlciA9IGNsYXNzUGFyc2VyKG5vZGUpLFxuICAgICAgICBpY29uTmFtZSA9IF9jbGFzc1BhcnNlci5pY29uTmFtZSxcbiAgICAgICAgcHJlZml4ID0gX2NsYXNzUGFyc2VyLnByZWZpeCxcbiAgICAgICAgZXh0cmFDbGFzc2VzID0gX2NsYXNzUGFyc2VyLnJlc3Q7XG5cbiAgICB2YXIgZXh0cmFBdHRyaWJ1dGVzID0gYXR0cmlidXRlc1BhcnNlcihub2RlKTtcbiAgICB2YXIgcGx1Z2luTWV0YSA9IGNoYWluSG9va3MoJ3BhcnNlTm9kZUF0dHJpYnV0ZXMnLCB7fSwgbm9kZSk7XG4gICAgdmFyIGV4dHJhU3R5bGVzID0gcGFyc2VyLnN0eWxlUGFyc2VyID8gc3R5bGVQYXJzZXIobm9kZSkgOiBbXTtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe1xuICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgdGl0bGU6IG5vZGUuZ2V0QXR0cmlidXRlKCd0aXRsZScpLFxuICAgICAgdGl0bGVJZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtdGl0bGUtaWQnKSxcbiAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgdHJhbnNmb3JtOiBtZWFuaW5nbGVzc1RyYW5zZm9ybSxcbiAgICAgIG1hc2s6IHtcbiAgICAgICAgaWNvbk5hbWU6IG51bGwsXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgcmVzdDogW11cbiAgICAgIH0sXG4gICAgICBtYXNrSWQ6IG51bGwsXG4gICAgICBzeW1ib2w6IGZhbHNlLFxuICAgICAgZXh0cmE6IHtcbiAgICAgICAgY2xhc3NlczogZXh0cmFDbGFzc2VzLFxuICAgICAgICBzdHlsZXM6IGV4dHJhU3R5bGVzLFxuICAgICAgICBhdHRyaWJ1dGVzOiBleHRyYUF0dHJpYnV0ZXNcbiAgICAgIH1cbiAgICB9LCBwbHVnaW5NZXRhKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMkMiA9IG5hbWVzcGFjZS5zdHlsZXM7XG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVNdXRhdGlvbihub2RlKSB7XG4gICAgdmFyIG5vZGVNZXRhID0gY29uZmlnLmF1dG9SZXBsYWNlU3ZnID09PSAnbmVzdCcgPyBwYXJzZU1ldGEobm9kZSwge1xuICAgICAgc3R5bGVQYXJzZXI6IGZhbHNlXG4gICAgfSkgOiBwYXJzZU1ldGEobm9kZSk7XG5cbiAgICBpZiAofm5vZGVNZXRhLmV4dHJhLmNsYXNzZXMuaW5kZXhPZihMQVlFUlNfVEVYVF9DTEFTU05BTUUpKSB7XG4gICAgICByZXR1cm4gY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZUxheWVyc1RleHQnLCBub2RlLCBub2RlTWV0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYWxsUHJvdmlkZWQoJ2dlbmVyYXRlU3ZnUmVwbGFjZW1lbnRNdXRhdGlvbicsIG5vZGUsIG5vZGVNZXRhKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblRyZWUocm9vdCkge1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDtcbiAgICBpZiAoIUlTX0RPTSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHZhciBodG1sQ2xhc3NMaXN0ID0gRE9DVU1FTlQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdDtcblxuICAgIHZhciBoY2xBZGQgPSBmdW5jdGlvbiBoY2xBZGQoc3VmZml4KSB7XG4gICAgICByZXR1cm4gaHRtbENsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQoSFRNTF9DTEFTU19JMlNWR19CQVNFX0NMQVNTLCBcIi1cIikuY29uY2F0KHN1ZmZpeCkpO1xuICAgIH07XG5cbiAgICB2YXIgaGNsUmVtb3ZlID0gZnVuY3Rpb24gaGNsUmVtb3ZlKHN1ZmZpeCkge1xuICAgICAgcmV0dXJuIGh0bWxDbGFzc0xpc3QucmVtb3ZlKFwiXCIuY29uY2F0KEhUTUxfQ0xBU1NfSTJTVkdfQkFTRV9DTEFTUywgXCItXCIpLmNvbmNhdChzdWZmaXgpKTtcbiAgICB9O1xuXG4gICAgdmFyIHByZWZpeGVzID0gY29uZmlnLmF1dG9GZXRjaFN2ZyA/IE9iamVjdC5rZXlzKFBSRUZJWF9UT19TVFlMRSkgOiBPYmplY3Qua2V5cyhzdHlsZXMkMik7XG4gICAgdmFyIHByZWZpeGVzRG9tUXVlcnkgPSBbXCIuXCIuY29uY2F0KExBWUVSU19URVhUX0NMQVNTTkFNRSwgXCI6bm90KFtcIikuY29uY2F0KERBVEFfRkFfSTJTVkcsIFwiXSlcIildLmNvbmNhdChwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICAgIHJldHVybiBcIi5cIi5jb25jYXQocCwgXCI6bm90KFtcIikuY29uY2F0KERBVEFfRkFfSTJTVkcsIFwiXSlcIik7XG4gICAgfSkpLmpvaW4oJywgJyk7XG5cbiAgICBpZiAocHJlZml4ZXNEb21RdWVyeS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgY2FuZGlkYXRlcyA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNhbmRpZGF0ZXMgPSB0b0FycmF5KHJvb3QucXVlcnlTZWxlY3RvckFsbChwcmVmaXhlc0RvbVF1ZXJ5KSk7XG4gICAgfSBjYXRjaCAoZSkgey8vIG5vb3BcbiAgICB9XG5cbiAgICBpZiAoY2FuZGlkYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICBoY2xBZGQoJ3BlbmRpbmcnKTtcbiAgICAgIGhjbFJlbW92ZSgnY29tcGxldGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHZhciBtYXJrID0gcGVyZi5iZWdpbignb25UcmVlJyk7XG4gICAgdmFyIG11dGF0aW9ucyA9IGNhbmRpZGF0ZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtdXRhdGlvbiA9IGdlbmVyYXRlTXV0YXRpb24obm9kZSk7XG5cbiAgICAgICAgaWYgKG11dGF0aW9uKSB7XG4gICAgICAgICAgYWNjLnB1c2gobXV0YXRpb24pO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghUFJPRFVDVElPTikge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdNaXNzaW5nSWNvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBQcm9taXNlLmFsbChtdXRhdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkTXV0YXRpb25zKSB7XG4gICAgICAgIHBlcmZvcm0ocmVzb2x2ZWRNdXRhdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBoY2xBZGQoJ2FjdGl2ZScpO1xuICAgICAgICAgIGhjbEFkZCgnY29tcGxldGUnKTtcbiAgICAgICAgICBoY2xSZW1vdmUoJ3BlbmRpbmcnKTtcbiAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgICAgICAgIG1hcmsoKTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgbWFyaygpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTm9kZShub2RlKSB7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICAgIGdlbmVyYXRlTXV0YXRpb24obm9kZSkudGhlbihmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgICBwZXJmb3JtKFttdXRhdGlvbl0sIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVJY29ucyhuZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXliZUljb25EZWZpbml0aW9uKSB7XG4gICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgIHZhciBpY29uRGVmaW5pdGlvbiA9IChtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KS5pY29uID8gbWF5YmVJY29uRGVmaW5pdGlvbiA6IGZpbmRJY29uRGVmaW5pdGlvbihtYXliZUljb25EZWZpbml0aW9uIHx8IHt9KTtcbiAgICAgIHZhciBtYXNrID0gcGFyYW1zLm1hc2s7XG5cbiAgICAgIGlmIChtYXNrKSB7XG4gICAgICAgIG1hc2sgPSAobWFzayB8fCB7fSkuaWNvbiA/IG1hc2sgOiBmaW5kSWNvbkRlZmluaXRpb24obWFzayB8fCB7fSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXh0KGljb25EZWZpbml0aW9uLCBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgcGFyYW1zKSwge30sIHtcbiAgICAgICAgbWFzazogbWFza1xuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICB2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKGljb25EZWZpbml0aW9uKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIF9wYXJhbXMkdHJhbnNmb3JtID0gcGFyYW1zLnRyYW5zZm9ybSxcbiAgICAgICAgdHJhbnNmb3JtID0gX3BhcmFtcyR0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IG1lYW5pbmdsZXNzVHJhbnNmb3JtIDogX3BhcmFtcyR0cmFuc2Zvcm0sXG4gICAgICAgIF9wYXJhbXMkc3ltYm9sID0gcGFyYW1zLnN5bWJvbCxcbiAgICAgICAgc3ltYm9sID0gX3BhcmFtcyRzeW1ib2wgPT09IHZvaWQgMCA/IGZhbHNlIDogX3BhcmFtcyRzeW1ib2wsXG4gICAgICAgIF9wYXJhbXMkbWFzayA9IHBhcmFtcy5tYXNrLFxuICAgICAgICBtYXNrID0gX3BhcmFtcyRtYXNrID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyRtYXNrLFxuICAgICAgICBfcGFyYW1zJG1hc2tJZCA9IHBhcmFtcy5tYXNrSWQsXG4gICAgICAgIG1hc2tJZCA9IF9wYXJhbXMkbWFza0lkID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyRtYXNrSWQsXG4gICAgICAgIF9wYXJhbXMkdGl0bGUgPSBwYXJhbXMudGl0bGUsXG4gICAgICAgIHRpdGxlID0gX3BhcmFtcyR0aXRsZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9wYXJhbXMkdGl0bGUsXG4gICAgICAgIF9wYXJhbXMkdGl0bGVJZCA9IHBhcmFtcy50aXRsZUlkLFxuICAgICAgICB0aXRsZUlkID0gX3BhcmFtcyR0aXRsZUlkID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyR0aXRsZUlkLFxuICAgICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXMsXG4gICAgICAgIF9wYXJhbXMkYXR0cmlidXRlcyA9IHBhcmFtcy5hdHRyaWJ1dGVzLFxuICAgICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgICAgX3BhcmFtcyRzdHlsZXMgPSBwYXJhbXMuc3R5bGVzLFxuICAgICAgICBzdHlsZXMgPSBfcGFyYW1zJHN0eWxlcyA9PT0gdm9pZCAwID8ge30gOiBfcGFyYW1zJHN0eWxlcztcbiAgICBpZiAoIWljb25EZWZpbml0aW9uKSByZXR1cm47XG4gICAgdmFyIHByZWZpeCA9IGljb25EZWZpbml0aW9uLnByZWZpeCxcbiAgICAgICAgaWNvbk5hbWUgPSBpY29uRGVmaW5pdGlvbi5pY29uTmFtZSxcbiAgICAgICAgaWNvbiA9IGljb25EZWZpbml0aW9uLmljb247XG4gICAgcmV0dXJuIGRvbVZhcmlhbnRzKF9vYmplY3RTcHJlYWQyKHtcbiAgICAgIHR5cGU6ICdpY29uJ1xuICAgIH0sIGljb25EZWZpbml0aW9uKSwgZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbEhvb2tzKCdiZWZvcmVET01FbGVtZW50Q3JlYXRpb24nLCB7XG4gICAgICAgIGljb25EZWZpbml0aW9uOiBpY29uRGVmaW5pdGlvbixcbiAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY29uZmlnLmF1dG9BMTF5KSB7XG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNbJ2FyaWEtbGFiZWxsZWRieSddID0gXCJcIi5jb25jYXQoY29uZmlnLnJlcGxhY2VtZW50Q2xhc3MsIFwiLXRpdGxlLVwiKS5jb25jYXQodGl0bGVJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0cmlidXRlc1snYXJpYS1oaWRkZW4nXSA9ICd0cnVlJztcbiAgICAgICAgICBhdHRyaWJ1dGVzWydmb2N1c2FibGUnXSA9ICdmYWxzZSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1ha2VJbmxpbmVTdmdBYnN0cmFjdCh7XG4gICAgICAgIGljb25zOiB7XG4gICAgICAgICAgbWFpbjogYXNGb3VuZEljb24oaWNvbiksXG4gICAgICAgICAgbWFzazogbWFzayA/IGFzRm91bmRJY29uKG1hc2suaWNvbikgOiB7XG4gICAgICAgICAgICBmb3VuZDogZmFsc2UsXG4gICAgICAgICAgICB3aWR0aDogbnVsbCxcbiAgICAgICAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgICAgICAgIGljb246IHt9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwcmVmaXg6IHByZWZpeCxcbiAgICAgICAgaWNvbk5hbWU6IGljb25OYW1lLFxuICAgICAgICB0cmFuc2Zvcm06IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBtZWFuaW5nbGVzc1RyYW5zZm9ybSksIHRyYW5zZm9ybSksXG4gICAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgIG1hc2tJZDogbWFza0lkLFxuICAgICAgICB0aXRsZUlkOiB0aXRsZUlkLFxuICAgICAgICBleHRyYToge1xuICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgdmFyIFJlcGxhY2VFbGVtZW50cyA9IHtcbiAgICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGljb246IHJlc29sdmVJY29ucyhyZW5kZXIpXG4gICAgICB9O1xuICAgIH0sXG4gICAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrczogZnVuY3Rpb24gbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcyhhY2N1bXVsYXRvcikge1xuICAgICAgICAgIGFjY3VtdWxhdG9yLnRyZWVDYWxsYmFjayA9IG9uVHJlZTtcbiAgICAgICAgICBhY2N1bXVsYXRvci5ub2RlQ2FsbGJhY2sgPSBvbk5vZGU7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgcHJvdmlkZXM6IGZ1bmN0aW9uIHByb3ZpZGVzKHByb3ZpZGVycyQkMSkge1xuICAgICAgcHJvdmlkZXJzJCQxLmkyc3ZnID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgX3BhcmFtcyRub2RlID0gcGFyYW1zLm5vZGUsXG4gICAgICAgICAgICBub2RlID0gX3BhcmFtcyRub2RlID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9wYXJhbXMkbm9kZSxcbiAgICAgICAgICAgIF9wYXJhbXMkY2FsbGJhY2sgPSBwYXJhbXMuY2FsbGJhY2ssXG4gICAgICAgICAgICBjYWxsYmFjayA9IF9wYXJhbXMkY2FsbGJhY2sgPT09IHZvaWQgMCA/IGZ1bmN0aW9uICgpIHt9IDogX3BhcmFtcyRjYWxsYmFjaztcbiAgICAgICAgcmV0dXJuIG9uVHJlZShub2RlLCBjYWxsYmFjayk7XG4gICAgICB9O1xuXG4gICAgICBwcm92aWRlcnMkJDEuZ2VuZXJhdGVTdmdSZXBsYWNlbWVudE11dGF0aW9uID0gZnVuY3Rpb24gKG5vZGUsIG5vZGVNZXRhKSB7XG4gICAgICAgIHZhciBpY29uTmFtZSA9IG5vZGVNZXRhLmljb25OYW1lLFxuICAgICAgICAgICAgdGl0bGUgPSBub2RlTWV0YS50aXRsZSxcbiAgICAgICAgICAgIHRpdGxlSWQgPSBub2RlTWV0YS50aXRsZUlkLFxuICAgICAgICAgICAgcHJlZml4ID0gbm9kZU1ldGEucHJlZml4LFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gbm9kZU1ldGEudHJhbnNmb3JtLFxuICAgICAgICAgICAgc3ltYm9sID0gbm9kZU1ldGEuc3ltYm9sLFxuICAgICAgICAgICAgbWFzayA9IG5vZGVNZXRhLm1hc2ssXG4gICAgICAgICAgICBtYXNrSWQgPSBub2RlTWV0YS5tYXNrSWQsXG4gICAgICAgICAgICBleHRyYSA9IG5vZGVNZXRhLmV4dHJhO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIFByb21pc2UuYWxsKFtmaW5kSWNvbihpY29uTmFtZSwgcHJlZml4KSwgbWFzay5pY29uTmFtZSA/IGZpbmRJY29uKG1hc2suaWNvbk5hbWUsIG1hc2sucHJlZml4KSA6IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgICBmb3VuZDogZmFsc2UsXG4gICAgICAgICAgICB3aWR0aDogNTEyLFxuICAgICAgICAgICAgaGVpZ2h0OiA1MTIsXG4gICAgICAgICAgICBpY29uOiB7fVxuICAgICAgICAgIH0pXSkudGhlbihmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICAgICAgICAgICAgbWFpbiA9IF9yZWYyWzBdLFxuICAgICAgICAgICAgICAgIG1hc2sgPSBfcmVmMlsxXTtcblxuICAgICAgICAgICAgcmVzb2x2ZShbbm9kZSwgbWFrZUlubGluZVN2Z0Fic3RyYWN0KHtcbiAgICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgICAgIG1hc2s6IG1hc2tcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcHJlZml4OiBwcmVmaXgsXG4gICAgICAgICAgICAgIGljb25OYW1lOiBpY29uTmFtZSxcbiAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgIHN5bWJvbDogc3ltYm9sLFxuICAgICAgICAgICAgICBtYXNrSWQ6IG1hc2tJZCxcbiAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICB0aXRsZUlkOiB0aXRsZUlkLFxuICAgICAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgICAgIHdhdGNoYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSldKTtcbiAgICAgICAgICB9KS5jYXRjaChyZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHByb3ZpZGVycyQkMS5nZW5lcmF0ZUFic3RyYWN0SWNvbiA9IGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBfcmVmMy5jaGlsZHJlbixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmMy5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgbWFpbiA9IF9yZWYzLm1haW4sXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmMy50cmFuc2Zvcm0sXG4gICAgICAgICAgICBzdHlsZXMgPSBfcmVmMy5zdHlsZXM7XG4gICAgICAgIHZhciBzdHlsZVN0cmluZyA9IGpvaW5TdHlsZXMoc3R5bGVzKTtcblxuICAgICAgICBpZiAoc3R5bGVTdHJpbmcubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGF0dHJpYnV0ZXNbJ3N0eWxlJ10gPSBzdHlsZVN0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXh0Q2hpbGQ7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybUlzTWVhbmluZ2Z1bCh0cmFuc2Zvcm0pKSB7XG4gICAgICAgICAgbmV4dENoaWxkID0gY2FsbFByb3ZpZGVkKCdnZW5lcmF0ZUFic3RyYWN0VHJhbnNmb3JtR3JvdXBpbmcnLCB7XG4gICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2Zvcm0sXG4gICAgICAgICAgICBjb250YWluZXJXaWR0aDogbWFpbi53aWR0aCxcbiAgICAgICAgICAgIGljb25XaWR0aDogbWFpbi53aWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRyZW4ucHVzaChuZXh0Q2hpbGQgfHwgbWFpbi5pY29uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIExheWVycyA9IHtcbiAgICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxheWVyOiBmdW5jdGlvbiBsYXllcihhc3NlbWJsZXIpIHtcbiAgICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgICB2YXIgX3BhcmFtcyRjbGFzc2VzID0gcGFyYW1zLmNsYXNzZXMsXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHZvaWQgMCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzO1xuICAgICAgICAgIHJldHVybiBkb21WYXJpYW50cyh7XG4gICAgICAgICAgICB0eXBlOiAnbGF5ZXInXG4gICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY2FsbEhvb2tzKCdiZWZvcmVET01FbGVtZW50Q3JlYXRpb24nLCB7XG4gICAgICAgICAgICAgIGFzc2VtYmxlcjogYXNzZW1ibGVyLFxuICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGFzc2VtYmxlcihmdW5jdGlvbiAoYXJncykge1xuICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGFyZ3MpID8gYXJncy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChhLmFic3RyYWN0KTtcbiAgICAgICAgICAgICAgfSkgOiBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChhcmdzLmFic3RyYWN0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIFt7XG4gICAgICAgICAgICAgIHRhZzogJ3NwYW4nLFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XG4gICAgICAgICAgICAgICAgY2xhc3M6IFtcIlwiLmNvbmNhdChjb25maWcuZmFtaWx5UHJlZml4LCBcIi1sYXllcnNcIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY2xhc3NlcykpLmpvaW4oJyAnKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgICAgIH1dO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgTGF5ZXJzQ291bnRlciA9IHtcbiAgICBtaXhvdXQ6IGZ1bmN0aW9uIG1peG91dCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50ZXI6IGZ1bmN0aW9uIGNvdW50ZXIoY29udGVudCkge1xuICAgICAgICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgICAgICAgIHZhciBfcGFyYW1zJHRpdGxlID0gcGFyYW1zLnRpdGxlLFxuICAgICAgICAgICAgICB0aXRsZSA9IF9wYXJhbXMkdGl0bGUgPT09IHZvaWQgMCA/IG51bGwgOiBfcGFyYW1zJHRpdGxlLFxuICAgICAgICAgICAgICBfcGFyYW1zJGNsYXNzZXMgPSBwYXJhbXMuY2xhc3NlcyxcbiAgICAgICAgICAgICAgY2xhc3NlcyA9IF9wYXJhbXMkY2xhc3NlcyA9PT0gdm9pZCAwID8gW10gOiBfcGFyYW1zJGNsYXNzZXMsXG4gICAgICAgICAgICAgIF9wYXJhbXMkYXR0cmlidXRlcyA9IHBhcmFtcy5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gX3BhcmFtcyRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB7fSA6IF9wYXJhbXMkYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgX3BhcmFtcyRzdHlsZXMgPSBwYXJhbXMuc3R5bGVzLFxuICAgICAgICAgICAgICBzdHlsZXMgPSBfcGFyYW1zJHN0eWxlcyA9PT0gdm9pZCAwID8ge30gOiBfcGFyYW1zJHN0eWxlcztcbiAgICAgICAgICByZXR1cm4gZG9tVmFyaWFudHMoe1xuICAgICAgICAgICAgdHlwZTogJ2NvdW50ZXInLFxuICAgICAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNhbGxIb29rcygnYmVmb3JlRE9NRWxlbWVudENyZWF0aW9uJywge1xuICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFrZUxheWVyc0NvdW50ZXJBYnN0cmFjdCh7XG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICBleHRyYToge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgICAgc3R5bGVzOiBzdHlsZXMsXG4gICAgICAgICAgICAgICAgY2xhc3NlczogW1wiXCIuY29uY2F0KGNvbmZpZy5mYW1pbHlQcmVmaXgsIFwiLWxheWVycy1jb3VudGVyXCIpXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGNsYXNzZXMpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIExheWVyc1RleHQgPSB7XG4gICAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXh0OiBmdW5jdGlvbiB0ZXh0KGNvbnRlbnQpIHtcbiAgICAgICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICAgICAgICB2YXIgX3BhcmFtcyR0cmFuc2Zvcm0gPSBwYXJhbXMudHJhbnNmb3JtLFxuICAgICAgICAgICAgICB0cmFuc2Zvcm0gPSBfcGFyYW1zJHRyYW5zZm9ybSA9PT0gdm9pZCAwID8gbWVhbmluZ2xlc3NUcmFuc2Zvcm0gOiBfcGFyYW1zJHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgX3BhcmFtcyR0aXRsZSA9IHBhcmFtcy50aXRsZSxcbiAgICAgICAgICAgICAgdGl0bGUgPSBfcGFyYW1zJHRpdGxlID09PSB2b2lkIDAgPyBudWxsIDogX3BhcmFtcyR0aXRsZSxcbiAgICAgICAgICAgICAgX3BhcmFtcyRjbGFzc2VzID0gcGFyYW1zLmNsYXNzZXMsXG4gICAgICAgICAgICAgIGNsYXNzZXMgPSBfcGFyYW1zJGNsYXNzZXMgPT09IHZvaWQgMCA/IFtdIDogX3BhcmFtcyRjbGFzc2VzLFxuICAgICAgICAgICAgICBfcGFyYW1zJGF0dHJpYnV0ZXMgPSBwYXJhbXMuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgYXR0cmlidXRlcyA9IF9wYXJhbXMkYXR0cmlidXRlcyA9PT0gdm9pZCAwID8ge30gOiBfcGFyYW1zJGF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAgIF9wYXJhbXMkc3R5bGVzID0gcGFyYW1zLnN0eWxlcyxcbiAgICAgICAgICAgICAgc3R5bGVzID0gX3BhcmFtcyRzdHlsZXMgPT09IHZvaWQgMCA/IHt9IDogX3BhcmFtcyRzdHlsZXM7XG4gICAgICAgICAgcmV0dXJuIGRvbVZhcmlhbnRzKHtcbiAgICAgICAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRlbnRcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjYWxsSG9va3MoJ2JlZm9yZURPTUVsZW1lbnRDcmVhdGlvbicsIHtcbiAgICAgICAgICAgICAgY29udGVudDogY29udGVudCxcbiAgICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VMYXllcnNUZXh0QWJzdHJhY3Qoe1xuICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LFxuICAgICAgICAgICAgICB0cmFuc2Zvcm06IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBtZWFuaW5nbGVzc1RyYW5zZm9ybSksIHRyYW5zZm9ybSksXG4gICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICAgICAgZXh0cmE6IHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgICAgIGNsYXNzZXM6IFtcIlwiLmNvbmNhdChjb25maWcuZmFtaWx5UHJlZml4LCBcIi1sYXllcnMtdGV4dFwiKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjbGFzc2VzKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzJCQxKSB7XG4gICAgICBwcm92aWRlcnMkJDEuZ2VuZXJhdGVMYXllcnNUZXh0ID0gZnVuY3Rpb24gKG5vZGUsIG5vZGVNZXRhKSB7XG4gICAgICAgIHZhciB0aXRsZSA9IG5vZGVNZXRhLnRpdGxlLFxuICAgICAgICAgICAgdHJhbnNmb3JtID0gbm9kZU1ldGEudHJhbnNmb3JtLFxuICAgICAgICAgICAgZXh0cmEgPSBub2RlTWV0YS5leHRyYTtcbiAgICAgICAgdmFyIHdpZHRoID0gbnVsbDtcbiAgICAgICAgdmFyIGhlaWdodCA9IG51bGw7XG5cbiAgICAgICAgaWYgKElTX0lFKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkRm9udFNpemUgPSBwYXJzZUludChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLmZvbnRTaXplLCAxMCk7XG4gICAgICAgICAgdmFyIGJvdW5kaW5nQ2xpZW50UmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgd2lkdGggPSBib3VuZGluZ0NsaWVudFJlY3Qud2lkdGggLyBjb21wdXRlZEZvbnRTaXplO1xuICAgICAgICAgIGhlaWdodCA9IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgLyBjb21wdXRlZEZvbnRTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5hdXRvQTExeSAmJiAhdGl0bGUpIHtcbiAgICAgICAgICBleHRyYS5hdHRyaWJ1dGVzWydhcmlhLWhpZGRlbiddID0gJ3RydWUnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShbbm9kZSwgbWFrZUxheWVyc1RleHRBYnN0cmFjdCh7XG4gICAgICAgICAgY29udGVudDogbm9kZS5pbm5lckhUTUwsXG4gICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICAgIHRpdGxlOiB0aXRsZSxcbiAgICAgICAgICBleHRyYTogZXh0cmEsXG4gICAgICAgICAgd2F0Y2hhYmxlOiB0cnVlXG4gICAgICAgIH0pXSk7XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgQ0xFQU5fQ09OVEVOVF9QQVRURVJOID0gbmV3IFJlZ0V4cChcIlxcXCJcIiwgJ3VnJyk7XG4gIHZhciBTRUNPTkRBUllfVU5JQ09ERV9SQU5HRSA9IFsxMTA1OTIwLCAxMTEyMzE5XTtcbiAgZnVuY3Rpb24gaGV4VmFsdWVGcm9tQ29udGVudChjb250ZW50KSB7XG4gICAgdmFyIGNsZWFuZWQgPSBjb250ZW50LnJlcGxhY2UoQ0xFQU5fQ09OVEVOVF9QQVRURVJOLCAnJyk7XG4gICAgdmFyIGNvZGVQb2ludCA9IGNvZGVQb2ludEF0KGNsZWFuZWQsIDApO1xuICAgIHZhciBpc1ByZXBlbmRUZW4gPSBjb2RlUG9pbnQgPj0gU0VDT05EQVJZX1VOSUNPREVfUkFOR0VbMF0gJiYgY29kZVBvaW50IDw9IFNFQ09OREFSWV9VTklDT0RFX1JBTkdFWzFdO1xuICAgIHZhciBpc0RvdWJsZWQgPSBjbGVhbmVkLmxlbmd0aCA9PT0gMiA/IGNsZWFuZWRbMF0gPT09IGNsZWFuZWRbMV0gOiBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IGlzRG91YmxlZCA/IHRvSGV4KGNsZWFuZWRbMF0pIDogdG9IZXgoY2xlYW5lZCksXG4gICAgICBpc1NlY29uZGFyeTogaXNQcmVwZW5kVGVuIHx8IGlzRG91YmxlZFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlRm9yUG9zaXRpb24obm9kZSwgcG9zaXRpb24pIHtcbiAgICB2YXIgcGVuZGluZ0F0dHJpYnV0ZSA9IFwiXCIuY29uY2F0KERBVEFfRkFfUFNFVURPX0VMRU1FTlRfUEVORElORykuY29uY2F0KHBvc2l0aW9uLnJlcGxhY2UoJzonLCAnLScpKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKG5vZGUuZ2V0QXR0cmlidXRlKHBlbmRpbmdBdHRyaWJ1dGUpICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoaXMgbm9kZSBpcyBhbHJlYWR5IGJlaW5nIHByb2Nlc3NlZFxuICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hpbGRyZW4gPSB0b0FycmF5KG5vZGUuY2hpbGRyZW4pO1xuICAgICAgdmFyIGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50ID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBjLmdldEF0dHJpYnV0ZShEQVRBX0ZBX1BTRVVET19FTEVNRU5UKSA9PT0gcG9zaXRpb247XG4gICAgICB9KVswXTtcbiAgICAgIHZhciBzdHlsZXMgPSBXSU5ET1cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBwb3NpdGlvbik7XG4gICAgICB2YXIgZm9udEZhbWlseSA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LWZhbWlseScpLm1hdGNoKEZPTlRfRkFNSUxZX1BBVFRFUk4pO1xuICAgICAgdmFyIGZvbnRXZWlnaHQgPSBzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC13ZWlnaHQnKTtcbiAgICAgIHZhciBjb250ZW50ID0gc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2NvbnRlbnQnKTtcblxuICAgICAgaWYgKGFscmVhZHlQcm9jZXNzZWRQc2V1ZG9FbGVtZW50ICYmICFmb250RmFtaWx5KSB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgcHJvY2Vzc2VkIGl0IGJ1dCB0aGUgY3VycmVudCBjb21wdXRlZCBzdHlsZSBkb2VzIG5vdCByZXN1bHQgaW4gYSBmb250LWZhbWlseSxcbiAgICAgICAgLy8gdGhhdCBwcm9iYWJseSBtZWFucyB0aGF0IGEgY2xhc3MgbmFtZSB0aGF0IHdhcyBwcmV2aW91c2x5IHByZXNlbnQgdG8gbWFrZSB0aGUgaWNvbiBoYXMgYmVlblxuICAgICAgICAvLyByZW1vdmVkLiBTbyB3ZSBub3cgc2hvdWxkIGRlbGV0ZSB0aGUgaWNvbi5cbiAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCk7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICB9IGVsc2UgaWYgKGZvbnRGYW1pbHkgJiYgY29udGVudCAhPT0gJ25vbmUnICYmIGNvbnRlbnQgIT09ICcnKSB7XG4gICAgICAgIHZhciBfY29udGVudCA9IHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG5cbiAgICAgICAgdmFyIHByZWZpeCA9IH5bJ1NvbGlkJywgJ1JlZ3VsYXInLCAnTGlnaHQnLCAnVGhpbicsICdEdW90b25lJywgJ0JyYW5kcycsICdLaXQnXS5pbmRleE9mKGZvbnRGYW1pbHlbMl0pID8gU1RZTEVfVE9fUFJFRklYW2ZvbnRGYW1pbHlbMl0udG9Mb3dlckNhc2UoKV0gOiBGT05UX1dFSUdIVF9UT19QUkVGSVhbZm9udFdlaWdodF07XG5cbiAgICAgICAgdmFyIF9oZXhWYWx1ZUZyb21Db250ZW50ID0gaGV4VmFsdWVGcm9tQ29udGVudChfY29udGVudCksXG4gICAgICAgICAgICBoZXhWYWx1ZSA9IF9oZXhWYWx1ZUZyb21Db250ZW50LnZhbHVlLFxuICAgICAgICAgICAgaXNTZWNvbmRhcnkgPSBfaGV4VmFsdWVGcm9tQ29udGVudC5pc1NlY29uZGFyeTtcblxuICAgICAgICB2YXIgaXNWNCA9IGZvbnRGYW1pbHlbMF0uc3RhcnRzV2l0aCgnRm9udEF3ZXNvbWUnKTtcbiAgICAgICAgdmFyIGljb25OYW1lID0gYnlVbmljb2RlKHByZWZpeCwgaGV4VmFsdWUpO1xuICAgICAgICB2YXIgaWNvbklkZW50aWZpZXIgPSBpY29uTmFtZTtcblxuICAgICAgICBpZiAoaXNWNCkge1xuICAgICAgICAgIHZhciBpY29uTmFtZTQgPSBieU9sZFVuaWNvZGUoaGV4VmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGljb25OYW1lNC5pY29uTmFtZSAmJiBpY29uTmFtZTQucHJlZml4KSB7XG4gICAgICAgICAgICBpY29uTmFtZSA9IGljb25OYW1lNC5pY29uTmFtZTtcbiAgICAgICAgICAgIHByZWZpeCA9IGljb25OYW1lNC5wcmVmaXg7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIE9ubHkgY29udmVydCB0aGUgcHNldWRvIGVsZW1lbnQgaW4gdGhpcyA6OmJlZm9yZS86OmFmdGVyIHBvc2l0aW9uIGludG8gYW4gaWNvbiBpZiB3ZSBoYXZlbid0XG4gICAgICAgIC8vIGFscmVhZHkgZG9uZSBzbyB3aXRoIHRoZSBzYW1lIHByZWZpeCBhbmQgaWNvbk5hbWVcblxuXG4gICAgICAgIGlmIChpY29uTmFtZSAmJiAhaXNTZWNvbmRhcnkgJiYgKCFhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCB8fCBhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudC5nZXRBdHRyaWJ1dGUoREFUQV9QUkVGSVgpICE9PSBwcmVmaXggfHwgYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQuZ2V0QXR0cmlidXRlKERBVEFfSUNPTikgIT09IGljb25JZGVudGlmaWVyKSkge1xuICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKHBlbmRpbmdBdHRyaWJ1dGUsIGljb25JZGVudGlmaWVyKTtcblxuICAgICAgICAgIGlmIChhbHJlYWR5UHJvY2Vzc2VkUHNldWRvRWxlbWVudCkge1xuICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSBvbGQgb25lLCBzaW5jZSB3ZSdyZSByZXBsYWNpbmcgaXQgd2l0aCBhIG5ldyBvbmVcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtZXRhID0gYmxhbmtNZXRhKCk7XG4gICAgICAgICAgdmFyIGV4dHJhID0gbWV0YS5leHRyYTtcbiAgICAgICAgICBleHRyYS5hdHRyaWJ1dGVzW0RBVEFfRkFfUFNFVURPX0VMRU1FTlRdID0gcG9zaXRpb247XG4gICAgICAgICAgZmluZEljb24oaWNvbk5hbWUsIHByZWZpeCkudGhlbihmdW5jdGlvbiAobWFpbikge1xuICAgICAgICAgICAgdmFyIGFic3RyYWN0ID0gbWFrZUlubGluZVN2Z0Fic3RyYWN0KF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBtZXRhKSwge30sIHtcbiAgICAgICAgICAgICAgaWNvbnM6IHtcbiAgICAgICAgICAgICAgICBtYWluOiBtYWluLFxuICAgICAgICAgICAgICAgIG1hc2s6IGVtcHR5Q2Fub25pY2FsSWNvbigpXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICAgICAgICBpY29uTmFtZTogaWNvbklkZW50aWZpZXIsXG4gICAgICAgICAgICAgIGV4dHJhOiBleHRyYSxcbiAgICAgICAgICAgICAgd2F0Y2hhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IERPQ1VNRU5ULmNyZWF0ZUVsZW1lbnQoJ3N2ZycpO1xuXG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICc6OmJlZm9yZScpIHtcbiAgICAgICAgICAgICAgbm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgbm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsZW1lbnQub3V0ZXJIVE1MID0gYWJzdHJhY3QubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0b0h0bWwoYSk7XG4gICAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHBlbmRpbmdBdHRyaWJ1dGUpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pLmNhdGNoKHJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKG5vZGUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoW3JlcGxhY2VGb3JQb3NpdGlvbihub2RlLCAnOjpiZWZvcmUnKSwgcmVwbGFjZUZvclBvc2l0aW9uKG5vZGUsICc6OmFmdGVyJyldKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NhYmxlKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlICE9PSBkb2N1bWVudC5oZWFkICYmICF+VEFHTkFNRVNfVE9fU0tJUF9GT1JfUFNFVURPRUxFTUVOVFMuaW5kZXhPZihub2RlLnRhZ05hbWUudG9VcHBlckNhc2UoKSkgJiYgIW5vZGUuZ2V0QXR0cmlidXRlKERBVEFfRkFfUFNFVURPX0VMRU1FTlQpICYmICghbm9kZS5wYXJlbnROb2RlIHx8IG5vZGUucGFyZW50Tm9kZS50YWdOYW1lICE9PSAnc3ZnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZWFyY2hQc2V1ZG9FbGVtZW50cyhyb290KSB7XG4gICAgaWYgKCFJU19ET00pIHJldHVybjtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIG9wZXJhdGlvbnMgPSB0b0FycmF5KHJvb3QucXVlcnlTZWxlY3RvckFsbCgnKicpKS5maWx0ZXIocHJvY2Vzc2FibGUpLm1hcChyZXBsYWNlKTtcbiAgICAgIHZhciBlbmQgPSBwZXJmLmJlZ2luKCdzZWFyY2hQc2V1ZG9FbGVtZW50cycpO1xuICAgICAgZGlzYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICBQcm9taXNlLmFsbChvcGVyYXRpb25zKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICAgIGVuYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICAgIGVuYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICAgIHJlamVjdCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgUHNldWRvRWxlbWVudHMgPSB7XG4gICAgaG9va3M6IGZ1bmN0aW9uIGhvb2tzKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrczogZnVuY3Rpb24gbXV0YXRpb25PYnNlcnZlckNhbGxiYWNrcyhhY2N1bXVsYXRvcikge1xuICAgICAgICAgIGFjY3VtdWxhdG9yLnBzZXVkb0VsZW1lbnRzQ2FsbGJhY2sgPSBzZWFyY2hQc2V1ZG9FbGVtZW50cztcbiAgICAgICAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBwcm92aWRlczogZnVuY3Rpb24gcHJvdmlkZXMocHJvdmlkZXJzJCQxKSB7XG4gICAgICBwcm92aWRlcnMkJDEucHNldWRvRWxlbWVudHMyc3ZnID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICB2YXIgX3BhcmFtcyRub2RlID0gcGFyYW1zLm5vZGUsXG4gICAgICAgICAgICBub2RlID0gX3BhcmFtcyRub2RlID09PSB2b2lkIDAgPyBET0NVTUVOVCA6IF9wYXJhbXMkbm9kZTtcblxuICAgICAgICBpZiAoY29uZmlnLnNlYXJjaFBzZXVkb0VsZW1lbnRzKSB7XG4gICAgICAgICAgc2VhcmNoUHNldWRvRWxlbWVudHMobm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHZhciBfdW53YXRjaGVkID0gZmFsc2U7XG4gIHZhciBNdXRhdGlvbk9ic2VydmVyJDEgPSB7XG4gICAgbWl4b3V0OiBmdW5jdGlvbiBtaXhvdXQoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkb206IHtcbiAgICAgICAgICB1bndhdGNoOiBmdW5jdGlvbiB1bndhdGNoKCkge1xuICAgICAgICAgICAgZGlzYWJsZU9ic2VydmF0aW9uKCk7XG4gICAgICAgICAgICBfdW53YXRjaGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcbiAgICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib290c3RyYXA6IGZ1bmN0aW9uIGJvb3RzdHJhcCgpIHtcbiAgICAgICAgICBvYnNlcnZlKGNoYWluSG9va3MoJ211dGF0aW9uT2JzZXJ2ZXJDYWxsYmFja3MnLCB7fSkpO1xuICAgICAgICB9LFxuICAgICAgICBub0F1dG86IGZ1bmN0aW9uIG5vQXV0bygpIHtcbiAgICAgICAgICBkaXNjb25uZWN0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHdhdGNoOiBmdW5jdGlvbiB3YXRjaChwYXJhbXMpIHtcbiAgICAgICAgICB2YXIgb2JzZXJ2ZU11dGF0aW9uc1Jvb3QgPSBwYXJhbXMub2JzZXJ2ZU11dGF0aW9uc1Jvb3Q7XG5cbiAgICAgICAgICBpZiAoX3Vud2F0Y2hlZCkge1xuICAgICAgICAgICAgZW5hYmxlT2JzZXJ2YXRpb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZShjaGFpbkhvb2tzKCdtdXRhdGlvbk9ic2VydmVyQ2FsbGJhY2tzJywge1xuICAgICAgICAgICAgICBvYnNlcnZlTXV0YXRpb25zUm9vdDogb2JzZXJ2ZU11dGF0aW9uc1Jvb3RcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHZhciBwYXJzZVRyYW5zZm9ybVN0cmluZyA9IGZ1bmN0aW9uIHBhcnNlVHJhbnNmb3JtU3RyaW5nKHRyYW5zZm9ybVN0cmluZykge1xuICAgIHZhciB0cmFuc2Zvcm0gPSB7XG4gICAgICBzaXplOiAxNixcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgICAgZmxpcFg6IGZhbHNlLFxuICAgICAgZmxpcFk6IGZhbHNlLFxuICAgICAgcm90YXRlOiAwXG4gICAgfTtcbiAgICByZXR1cm4gdHJhbnNmb3JtU3RyaW5nLnRvTG93ZXJDYXNlKCkuc3BsaXQoJyAnKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbikge1xuICAgICAgdmFyIHBhcnRzID0gbi50b0xvd2VyQ2FzZSgpLnNwbGl0KCctJyk7XG4gICAgICB2YXIgZmlyc3QgPSBwYXJ0c1swXTtcbiAgICAgIHZhciByZXN0ID0gcGFydHMuc2xpY2UoMSkuam9pbignLScpO1xuXG4gICAgICBpZiAoZmlyc3QgJiYgcmVzdCA9PT0gJ2gnKSB7XG4gICAgICAgIGFjYy5mbGlwWCA9IHRydWU7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaXJzdCAmJiByZXN0ID09PSAndicpIHtcbiAgICAgICAgYWNjLmZsaXBZID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgcmVzdCA9IHBhcnNlRmxvYXQocmVzdCk7XG5cbiAgICAgIGlmIChpc05hTihyZXN0KSkge1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGZpcnN0KSB7XG4gICAgICAgIGNhc2UgJ2dyb3cnOlxuICAgICAgICAgIGFjYy5zaXplID0gYWNjLnNpemUgKyByZXN0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3Nocmluayc6XG4gICAgICAgICAgYWNjLnNpemUgPSBhY2Muc2l6ZSAtIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgYWNjLnggPSBhY2MueCAtIHJlc3Q7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgIGFjYy54ID0gYWNjLnggKyByZXN0O1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICBhY2MueSA9IGFjYy55IC0gcmVzdDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgICBhY2MueSA9IGFjYy55ICsgcmVzdDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyb3RhdGUnOlxuICAgICAgICAgIGFjYy5yb3RhdGUgPSBhY2Mucm90YXRlICsgcmVzdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB0cmFuc2Zvcm0pO1xuICB9O1xuICB2YXIgUG93ZXJUcmFuc2Zvcm1zID0ge1xuICAgIG1peG91dDogZnVuY3Rpb24gbWl4b3V0KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyc2U6IHtcbiAgICAgICAgICB0cmFuc2Zvcm06IGZ1bmN0aW9uIHRyYW5zZm9ybSh0cmFuc2Zvcm1TdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcnNlTm9kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIHBhcnNlTm9kZUF0dHJpYnV0ZXMoYWNjdW11bGF0b3IsIG5vZGUpIHtcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtU3RyaW5nID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtZmEtdHJhbnNmb3JtJyk7XG5cbiAgICAgICAgICBpZiAodHJhbnNmb3JtU3RyaW5nKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRvci50cmFuc2Zvcm0gPSBwYXJzZVRyYW5zZm9ybVN0cmluZyh0cmFuc2Zvcm1TdHJpbmcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuICAgIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMpIHtcbiAgICAgIHByb3ZpZGVycy5nZW5lcmF0ZUFic3RyYWN0VHJhbnNmb3JtR3JvdXBpbmcgPSBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgbWFpbiA9IF9yZWYubWFpbixcbiAgICAgICAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgICAgICAgY29udGFpbmVyV2lkdGggPSBfcmVmLmNvbnRhaW5lcldpZHRoLFxuICAgICAgICAgICAgaWNvbldpZHRoID0gX3JlZi5pY29uV2lkdGg7XG4gICAgICAgIHZhciBvdXRlciA9IHtcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChjb250YWluZXJXaWR0aCAvIDIsIFwiIDI1NilcIilcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGlubmVyVHJhbnNsYXRlID0gXCJ0cmFuc2xhdGUoXCIuY29uY2F0KHRyYW5zZm9ybS54ICogMzIsIFwiLCBcIikuY29uY2F0KHRyYW5zZm9ybS55ICogMzIsIFwiKSBcIik7XG4gICAgICAgIHZhciBpbm5lclNjYWxlID0gXCJzY2FsZShcIi5jb25jYXQodHJhbnNmb3JtLnNpemUgLyAxNiAqICh0cmFuc2Zvcm0uZmxpcFggPyAtMSA6IDEpLCBcIiwgXCIpLmNvbmNhdCh0cmFuc2Zvcm0uc2l6ZSAvIDE2ICogKHRyYW5zZm9ybS5mbGlwWSA/IC0xIDogMSksIFwiKSBcIik7XG4gICAgICAgIHZhciBpbm5lclJvdGF0ZSA9IFwicm90YXRlKFwiLmNvbmNhdCh0cmFuc2Zvcm0ucm90YXRlLCBcIiAwIDApXCIpO1xuICAgICAgICB2YXIgaW5uZXIgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtOiBcIlwiLmNvbmNhdChpbm5lclRyYW5zbGF0ZSwgXCIgXCIpLmNvbmNhdChpbm5lclNjYWxlLCBcIiBcIikuY29uY2F0KGlubmVyUm90YXRlKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgcGF0aCA9IHtcbiAgICAgICAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlKFwiLmNvbmNhdChpY29uV2lkdGggLyAyICogLTEsIFwiIC0yNTYpXCIpXG4gICAgICAgIH07XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0ge1xuICAgICAgICAgIG91dGVyOiBvdXRlcixcbiAgICAgICAgICBpbm5lcjogaW5uZXIsXG4gICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRhZzogJ2cnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKHt9LCBvcGVyYXRpb25zLm91dGVyKSxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIHRhZzogJ2cnLFxuICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe30sIG9wZXJhdGlvbnMuaW5uZXIpLFxuICAgICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICAgIHRhZzogbWFpbi5pY29uLnRhZyxcbiAgICAgICAgICAgICAgY2hpbGRyZW46IG1haW4uaWNvbi5jaGlsZHJlbixcbiAgICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1haW4uaWNvbi5hdHRyaWJ1dGVzKSwgb3BlcmF0aW9ucy5wYXRoKVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIEFMTF9TUEFDRSA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDAsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBoZWlnaHQ6ICcxMDAlJ1xuICB9O1xuXG4gIGZ1bmN0aW9uIGZpbGxCbGFjayhhYnN0cmFjdCkge1xuICAgIHZhciBmb3JjZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcblxuICAgIGlmIChhYnN0cmFjdC5hdHRyaWJ1dGVzICYmIChhYnN0cmFjdC5hdHRyaWJ1dGVzLmZpbGwgfHwgZm9yY2UpKSB7XG4gICAgICBhYnN0cmFjdC5hdHRyaWJ1dGVzLmZpbGwgPSAnYmxhY2snO1xuICAgIH1cblxuICAgIHJldHVybiBhYnN0cmFjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlR3JvdXAoYWJzdHJhY3QpIHtcbiAgICBpZiAoYWJzdHJhY3QudGFnID09PSAnZycpIHtcbiAgICAgIHJldHVybiBhYnN0cmFjdC5jaGlsZHJlbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFthYnN0cmFjdF07XG4gICAgfVxuICB9XG5cbiAgdmFyIE1hc2tzID0ge1xuICAgIGhvb2tzOiBmdW5jdGlvbiBob29rcygpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhcnNlTm9kZUF0dHJpYnV0ZXM6IGZ1bmN0aW9uIHBhcnNlTm9kZUF0dHJpYnV0ZXMoYWNjdW11bGF0b3IsIG5vZGUpIHtcbiAgICAgICAgICB2YXIgbWFza0RhdGEgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS1tYXNrJyk7XG4gICAgICAgICAgdmFyIG1hc2sgPSAhbWFza0RhdGEgPyBlbXB0eUNhbm9uaWNhbEljb24oKSA6IGdldENhbm9uaWNhbEljb24obWFza0RhdGEuc3BsaXQoJyAnKS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHJldHVybiBpLnRyaW0oKTtcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICBpZiAoIW1hc2sucHJlZml4KSB7XG4gICAgICAgICAgICBtYXNrLnByZWZpeCA9IGdldERlZmF1bHRVc2FibGVQcmVmaXgoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhY2N1bXVsYXRvci5tYXNrID0gbWFzaztcbiAgICAgICAgICBhY2N1bXVsYXRvci5tYXNrSWQgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS1tYXNrLWlkJyk7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG4gICAgcHJvdmlkZXM6IGZ1bmN0aW9uIHByb3ZpZGVzKHByb3ZpZGVycykge1xuICAgICAgcHJvdmlkZXJzLmdlbmVyYXRlQWJzdHJhY3RNYXNrID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgICAgIGF0dHJpYnV0ZXMgPSBfcmVmLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBtYWluID0gX3JlZi5tYWluLFxuICAgICAgICAgICAgbWFzayA9IF9yZWYubWFzayxcbiAgICAgICAgICAgIGV4cGxpY2l0TWFza0lkID0gX3JlZi5tYXNrSWQsXG4gICAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybTtcbiAgICAgICAgdmFyIG1haW5XaWR0aCA9IG1haW4ud2lkdGgsXG4gICAgICAgICAgICBtYWluUGF0aCA9IG1haW4uaWNvbjtcbiAgICAgICAgdmFyIG1hc2tXaWR0aCA9IG1hc2sud2lkdGgsXG4gICAgICAgICAgICBtYXNrUGF0aCA9IG1hc2suaWNvbjtcbiAgICAgICAgdmFyIHRyYW5zID0gdHJhbnNmb3JtRm9yU3ZnKHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgICAgICBjb250YWluZXJXaWR0aDogbWFza1dpZHRoLFxuICAgICAgICAgIGljb25XaWR0aDogbWFpbldpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgbWFza1JlY3QgPSB7XG4gICAgICAgICAgdGFnOiAncmVjdCcsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFMTF9TUEFDRSksIHt9LCB7XG4gICAgICAgICAgICBmaWxsOiAnd2hpdGUnXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIG1hc2tJbm5lckdyb3VwQ2hpbGRyZW5NaXhpbiA9IG1haW5QYXRoLmNoaWxkcmVuID8ge1xuICAgICAgICAgIGNoaWxkcmVuOiBtYWluUGF0aC5jaGlsZHJlbi5tYXAoZmlsbEJsYWNrKVxuICAgICAgICB9IDoge307XG4gICAgICAgIHZhciBtYXNrSW5uZXJHcm91cCA9IHtcbiAgICAgICAgICB0YWc6ICdnJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMih7fSwgdHJhbnMuaW5uZXIpLFxuICAgICAgICAgIGNoaWxkcmVuOiBbZmlsbEJsYWNrKF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICAgIHRhZzogbWFpblBhdGgudGFnLFxuICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIG1haW5QYXRoLmF0dHJpYnV0ZXMpLCB0cmFucy5wYXRoKVxuICAgICAgICAgIH0sIG1hc2tJbm5lckdyb3VwQ2hpbGRyZW5NaXhpbikpXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbWFza091dGVyR3JvdXAgPSB7XG4gICAgICAgICAgdGFnOiAnZycsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoe30sIHRyYW5zLm91dGVyKSxcbiAgICAgICAgICBjaGlsZHJlbjogW21hc2tJbm5lckdyb3VwXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgbWFza0lkID0gXCJtYXNrLVwiLmNvbmNhdChleHBsaWNpdE1hc2tJZCB8fCBuZXh0VW5pcXVlSWQoKSk7XG4gICAgICAgIHZhciBjbGlwSWQgPSBcImNsaXAtXCIuY29uY2F0KGV4cGxpY2l0TWFza0lkIHx8IG5leHRVbmlxdWVJZCgpKTtcbiAgICAgICAgdmFyIG1hc2tUYWcgPSB7XG4gICAgICAgICAgdGFnOiAnbWFzaycsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEFMTF9TUEFDRSksIHt9LCB7XG4gICAgICAgICAgICBpZDogbWFza0lkLFxuICAgICAgICAgICAgbWFza1VuaXRzOiAndXNlclNwYWNlT25Vc2UnLFxuICAgICAgICAgICAgbWFza0NvbnRlbnRVbml0czogJ3VzZXJTcGFjZU9uVXNlJ1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBbbWFza1JlY3QsIG1hc2tPdXRlckdyb3VwXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZGVmcyA9IHtcbiAgICAgICAgICB0YWc6ICdkZWZzJyxcbiAgICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICAgIHRhZzogJ2NsaXBQYXRoJyxcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgICAgaWQ6IGNsaXBJZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBkZUdyb3VwKG1hc2tQYXRoKVxuICAgICAgICAgIH0sIG1hc2tUYWddXG4gICAgICAgIH07XG4gICAgICAgIGNoaWxkcmVuLnB1c2goZGVmcywge1xuICAgICAgICAgIHRhZzogJ3JlY3QnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgICAgICAgJ2NsaXAtcGF0aCc6IFwidXJsKCNcIi5jb25jYXQoY2xpcElkLCBcIilcIiksXG4gICAgICAgICAgICBtYXNrOiBcInVybCgjXCIuY29uY2F0KG1hc2tJZCwgXCIpXCIpXG4gICAgICAgICAgfSwgQUxMX1NQQUNFKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIE1pc3NpbmdJY29uSW5kaWNhdG9yID0ge1xuICAgIHByb3ZpZGVzOiBmdW5jdGlvbiBwcm92aWRlcyhwcm92aWRlcnMpIHtcbiAgICAgIHZhciByZWR1Y2VNb3Rpb24gPSBmYWxzZTtcblxuICAgICAgaWYgKFdJTkRPVy5tYXRjaE1lZGlhKSB7XG4gICAgICAgIHJlZHVjZU1vdGlvbiA9IFdJTkRPVy5tYXRjaE1lZGlhKCcocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKScpLm1hdGNoZXM7XG4gICAgICB9XG5cbiAgICAgIHByb3ZpZGVycy5taXNzaW5nSWNvbkFic3RyYWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ0NoaWxkcmVuID0gW107XG4gICAgICAgIHZhciBGSUxMID0ge1xuICAgICAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InXG4gICAgICAgIH07XG4gICAgICAgIHZhciBBTklNQVRJT05fQkFTRSA9IHtcbiAgICAgICAgICBhdHRyaWJ1dGVUeXBlOiAnWE1MJyxcbiAgICAgICAgICByZXBlYXRDb3VudDogJ2luZGVmaW5pdGUnLFxuICAgICAgICAgIGR1cjogJzJzJ1xuICAgICAgICB9OyAvLyBSaW5nXG5cbiAgICAgICAgZ0NoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIHRhZzogJ3BhdGgnLFxuICAgICAgICAgIGF0dHJpYnV0ZXM6IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBGSUxMKSwge30sIHtcbiAgICAgICAgICAgIGQ6ICdNMTU2LjUsNDQ3LjdsLTEyLjYsMjkuNWMtMTguNy05LjUtMzUuOS0yMS4yLTUxLjUtMzQuOWwyMi43LTIyLjdDMTI3LjYsNDMwLjUsMTQxLjUsNDQwLDE1Ni41LDQ0Ny43eiBNNDAuNiwyNzJIOC41IGMxLjQsMjEuMiw1LjQsNDEuNywxMS43LDYxLjFMNTAsMzIxLjJDNDUuMSwzMDUuNSw0MS44LDI4OSw0MC42LDI3MnogTTQwLjYsMjQwYzEuNC0xOC44LDUuMi0zNywxMS4xLTU0LjFsLTI5LjUtMTIuNiBDMTQuNywxOTQuMywxMCwyMTYuNyw4LjUsMjQwSDQwLjZ6IE02NC4zLDE1Ni41YzcuOC0xNC45LDE3LjItMjguOCwyOC4xLTQxLjVMNjkuNyw5Mi4zYy0xMy43LDE1LjYtMjUuNSwzMi44LTM0LjksNTEuNSBMNjQuMywxNTYuNXogTTM5Nyw0MTkuNmMtMTMuOSwxMi0yOS40LDIyLjMtNDYuMSwzMC40bDExLjksMjkuOGMyMC43LTkuOSwzOS44LTIyLjYsNTYuOS0zNy42TDM5Nyw0MTkuNnogTTExNSw5Mi40IGMxMy45LTEyLDI5LjQtMjIuMyw0Ni4xLTMwLjRsLTExLjktMjkuOGMtMjAuNyw5LjktMzkuOCwyMi42LTU2LjgsMzcuNkwxMTUsOTIuNHogTTQ0Ny43LDM1NS41Yy03LjgsMTQuOS0xNy4yLDI4LjgtMjguMSw0MS41IGwyMi43LDIyLjdjMTMuNy0xNS42LDI1LjUtMzIuOSwzNC45LTUxLjVMNDQ3LjcsMzU1LjV6IE00NzEuNCwyNzJjLTEuNCwxOC44LTUuMiwzNy0xMS4xLDU0LjFsMjkuNSwxMi42IGM3LjUtMjEuMSwxMi4yLTQzLjUsMTMuNi02Ni44SDQ3MS40eiBNMzIxLjIsNDYyYy0xNS43LDUtMzIuMiw4LjItNDkuMiw5LjR2MzIuMWMyMS4yLTEuNCw0MS43LTUuNCw2MS4xLTExLjdMMzIxLjIsNDYyeiBNMjQwLDQ3MS40Yy0xOC44LTEuNC0zNy01LjItNTQuMS0xMS4xbC0xMi42LDI5LjVjMjEuMSw3LjUsNDMuNSwxMi4yLDY2LjgsMTMuNlY0NzEuNHogTTQ2MiwxOTAuOGM1LDE1LjcsOC4yLDMyLjIsOS40LDQ5LjJoMzIuMSBjLTEuNC0yMS4yLTUuNC00MS43LTExLjctNjEuMUw0NjIsMTkwLjh6IE05Mi40LDM5N2MtMTItMTMuOS0yMi4zLTI5LjQtMzAuNC00Ni4xbC0yOS44LDExLjljOS45LDIwLjcsMjIuNiwzOS44LDM3LjYsNTYuOSBMOTIuNCwzOTd6IE0yNzIsNDAuNmMxOC44LDEuNCwzNi45LDUuMiw1NC4xLDExLjFsMTIuNi0yOS41QzMxNy43LDE0LjcsMjk1LjMsMTAsMjcyLDguNVY0MC42eiBNMTkwLjgsNTAgYzE1LjctNSwzMi4yLTguMiw0OS4yLTkuNFY4LjVjLTIxLjIsMS40LTQxLjcsNS40LTYxLjEsMTEuN0wxOTAuOCw1MHogTTQ0Mi4zLDkyLjNMNDE5LjYsMTE1YzEyLDEzLjksMjIuMywyOS40LDMwLjUsNDYuMSBsMjkuOC0xMS45QzQ3MCwxMjguNSw0NTcuMywxMDkuNCw0NDIuMyw5Mi4zeiBNMzk3LDkyLjRsMjIuNy0yMi43Yy0xNS42LTEzLjctMzIuOC0yNS41LTUxLjUtMzQuOWwtMTIuNiwyOS41IEMzNzAuNCw3Mi4xLDM4NC40LDgxLjUsMzk3LDkyLjR6J1xuICAgICAgICAgIH0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBPUEFDSVRZX0FOSU1BVEUgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgQU5JTUFUSU9OX0JBU0UpLCB7fSwge1xuICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6ICdvcGFjaXR5J1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZG90ID0ge1xuICAgICAgICAgIHRhZzogJ2NpcmNsZScsXG4gICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIEZJTEwpLCB7fSwge1xuICAgICAgICAgICAgY3g6ICcyNTYnLFxuICAgICAgICAgICAgY3k6ICczNjQnLFxuICAgICAgICAgICAgcjogJzI4J1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghcmVkdWNlTW90aW9uKSB7XG4gICAgICAgICAgZG90LmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgQU5JTUFUSU9OX0JBU0UpLCB7fSwge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lOiAncicsXG4gICAgICAgICAgICAgIHZhbHVlczogJzI4OzE0OzI4OzI4OzE0OzI4OydcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgT1BBQ0lUWV9BTklNQVRFKSwge30sIHtcbiAgICAgICAgICAgICAgdmFsdWVzOiAnMTswOzE7MTswOzE7J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdDaGlsZHJlbi5wdXNoKGRvdCk7XG4gICAgICAgIGdDaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICB0YWc6ICdwYXRoJyxcbiAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgRklMTCksIHt9LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiAnMScsXG4gICAgICAgICAgICBkOiAnTTI2My43LDMxMmgtMTZjLTYuNiwwLTEyLTUuNC0xMi0xMmMwLTcxLDc3LjQtNjMuOSw3Ny40LTEwNy44YzAtMjAtMTcuOC00MC4yLTU3LjQtNDAuMmMtMjkuMSwwLTQ0LjMsOS42LTU5LjIsMjguNyBjLTMuOSw1LTExLjEsNi0xNi4yLDIuNGwtMTMuMS05LjJjLTUuNi0zLjktNi45LTExLjgtMi42LTE3LjJjMjEuMi0yNy4yLDQ2LjQtNDQuNyw5MS4yLTQ0LjdjNTIuMywwLDk3LjQsMjkuOCw5Ny40LDgwLjIgYzAsNjcuNi03Ny40LDYzLjUtNzcuNCwxMDcuOEMyNzUuNywzMDYuNiwyNzAuMywzMTIsMjYzLjcsMzEyeidcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjaGlsZHJlbjogcmVkdWNlTW90aW9uID8gW10gOiBbe1xuICAgICAgICAgICAgdGFnOiAnYW5pbWF0ZScsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgT1BBQ0lUWV9BTklNQVRFKSwge30sIHtcbiAgICAgICAgICAgICAgdmFsdWVzOiAnMTswOzA7MDswOzE7J1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXJlZHVjZU1vdGlvbikge1xuICAgICAgICAgIC8vIEV4Y2xhbWF0aW9uXG4gICAgICAgICAgZ0NoaWxkcmVuLnB1c2goe1xuICAgICAgICAgICAgdGFnOiAncGF0aCcsXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgRklMTCksIHt9LCB7XG4gICAgICAgICAgICAgIG9wYWNpdHk6ICcwJyxcbiAgICAgICAgICAgICAgZDogJ00yMzIuNSwxMzQuNWw3LDE2OGMwLjMsNi40LDUuNiwxMS41LDEyLDExLjVoOWM2LjQsMCwxMS43LTUuMSwxMi0xMS41bDctMTY4YzAuMy02LjgtNS4yLTEyLjUtMTItMTIuNWgtMjMgQzIzNy43LDEyMiwyMzIuMiwxMjcuNywyMzIuNSwxMzQuNXonXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICB0YWc6ICdhbmltYXRlJyxcbiAgICAgICAgICAgICAgYXR0cmlidXRlczogX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIE9QQUNJVFlfQU5JTUFURSksIHt9LCB7XG4gICAgICAgICAgICAgICAgdmFsdWVzOiAnMDswOzE7MTswOzA7J1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfV1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGFnOiAnZycsXG4gICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgJ2NsYXNzJzogJ21pc3NpbmcnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlbjogZ0NoaWxkcmVuXG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgU3ZnU3ltYm9scyA9IHtcbiAgICBob29rczogZnVuY3Rpb24gaG9va3MoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJzZU5vZGVBdHRyaWJ1dGVzOiBmdW5jdGlvbiBwYXJzZU5vZGVBdHRyaWJ1dGVzKGFjY3VtdWxhdG9yLCBub2RlKSB7XG4gICAgICAgICAgdmFyIHN5bWJvbERhdGEgPSBub2RlLmdldEF0dHJpYnV0ZSgnZGF0YS1mYS1zeW1ib2wnKTtcbiAgICAgICAgICB2YXIgc3ltYm9sID0gc3ltYm9sRGF0YSA9PT0gbnVsbCA/IGZhbHNlIDogc3ltYm9sRGF0YSA9PT0gJycgPyB0cnVlIDogc3ltYm9sRGF0YTtcbiAgICAgICAgICBhY2N1bXVsYXRvclsnc3ltYm9sJ10gPSBzeW1ib2w7XG4gICAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgcGx1Z2lucyA9IFtJbmplY3RDU1MsIFJlcGxhY2VFbGVtZW50cywgTGF5ZXJzLCBMYXllcnNDb3VudGVyLCBMYXllcnNUZXh0LCBQc2V1ZG9FbGVtZW50cywgTXV0YXRpb25PYnNlcnZlciQxLCBQb3dlclRyYW5zZm9ybXMsIE1hc2tzLCBNaXNzaW5nSWNvbkluZGljYXRvciwgU3ZnU3ltYm9sc107XG5cbiAgcmVnaXN0ZXJQbHVnaW5zKHBsdWdpbnMsIHtcbiAgICBtaXhvdXRzVG86IGFwaVxuICB9KTtcbiAgYnVua2VyKGJvb3RzdHJhcCk7XG5cbn0oKSk7XG4iLCJleHBvcnQgdmFyIHRvcCA9ICd0b3AnO1xuZXhwb3J0IHZhciBib3R0b20gPSAnYm90dG9tJztcbmV4cG9ydCB2YXIgcmlnaHQgPSAncmlnaHQnO1xuZXhwb3J0IHZhciBsZWZ0ID0gJ2xlZnQnO1xuZXhwb3J0IHZhciBhdXRvID0gJ2F1dG8nO1xuZXhwb3J0IHZhciBiYXNlUGxhY2VtZW50cyA9IFt0b3AsIGJvdHRvbSwgcmlnaHQsIGxlZnRdO1xuZXhwb3J0IHZhciBzdGFydCA9ICdzdGFydCc7XG5leHBvcnQgdmFyIGVuZCA9ICdlbmQnO1xuZXhwb3J0IHZhciBjbGlwcGluZ1BhcmVudHMgPSAnY2xpcHBpbmdQYXJlbnRzJztcbmV4cG9ydCB2YXIgdmlld3BvcnQgPSAndmlld3BvcnQnO1xuZXhwb3J0IHZhciBwb3BwZXIgPSAncG9wcGVyJztcbmV4cG9ydCB2YXIgcmVmZXJlbmNlID0gJ3JlZmVyZW5jZSc7XG5leHBvcnQgdmFyIHZhcmlhdGlvblBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovYmFzZVBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTtcbmV4cG9ydCB2YXIgcGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9bXS5jb25jYXQoYmFzZVBsYWNlbWVudHMsIFthdXRvXSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICByZXR1cm4gYWNjLmNvbmNhdChbcGxhY2VtZW50LCBwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pOyAvLyBtb2RpZmllcnMgdGhhdCBuZWVkIHRvIHJlYWQgdGhlIERPTVxuXG5leHBvcnQgdmFyIGJlZm9yZVJlYWQgPSAnYmVmb3JlUmVhZCc7XG5leHBvcnQgdmFyIHJlYWQgPSAncmVhZCc7XG5leHBvcnQgdmFyIGFmdGVyUmVhZCA9ICdhZnRlclJlYWQnOyAvLyBwdXJlLWxvZ2ljIG1vZGlmaWVyc1xuXG5leHBvcnQgdmFyIGJlZm9yZU1haW4gPSAnYmVmb3JlTWFpbic7XG5leHBvcnQgdmFyIG1haW4gPSAnbWFpbic7XG5leHBvcnQgdmFyIGFmdGVyTWFpbiA9ICdhZnRlck1haW4nOyAvLyBtb2RpZmllciB3aXRoIHRoZSBwdXJwb3NlIHRvIHdyaXRlIHRvIHRoZSBET00gKG9yIHdyaXRlIGludG8gYSBmcmFtZXdvcmsgc3RhdGUpXG5cbmV4cG9ydCB2YXIgYmVmb3JlV3JpdGUgPSAnYmVmb3JlV3JpdGUnO1xuZXhwb3J0IHZhciB3cml0ZSA9ICd3cml0ZSc7XG5leHBvcnQgdmFyIGFmdGVyV3JpdGUgPSAnYWZ0ZXJXcml0ZSc7XG5leHBvcnQgdmFyIG1vZGlmaWVyUGhhc2VzID0gW2JlZm9yZVJlYWQsIHJlYWQsIGFmdGVyUmVhZCwgYmVmb3JlTWFpbiwgbWFpbiwgYWZ0ZXJNYWluLCBiZWZvcmVXcml0ZSwgd3JpdGUsIGFmdGVyV3JpdGVdOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5FbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQobm9kZSkge1xuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5IVE1MRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNTaGFkb3dSb290KG5vZGUpIHtcbiAgLy8gSUUgMTEgaGFzIG5vIFNoYWRvd1Jvb3RcbiAgaWYgKHR5cGVvZiBTaGFkb3dSb290ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLlNoYWRvd1Jvb3Q7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgU2hhZG93Um9vdDtcbn1cblxuZXhwb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfTsiLCJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsImV4cG9ydCB2YXIgbWF4ID0gTWF0aC5tYXg7XG5leHBvcnQgdmFyIG1pbiA9IE1hdGgubWluO1xuZXhwb3J0IHZhciByb3VuZCA9IE1hdGgucm91bmQ7IiwiaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cblxuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaXNIVE1MRWxlbWVudChlbGVtZW50KSAmJiBpbmNsdWRlU2NhbGUpIHtcbiAgICB2YXIgb2Zmc2V0SGVpZ2h0ID0gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgdmFyIG9mZnNldFdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDsgLy8gRG8gbm90IGF0dGVtcHQgdG8gZGl2aWRlIGJ5IDAsIG90aGVyd2lzZSB3ZSBnZXQgYEluZmluaXR5YCBhcyBzY2FsZVxuICAgIC8vIEZhbGxiYWNrIHRvIDEgaW4gY2FzZSBib3RoIHZhbHVlcyBhcmUgYDBgXG5cbiAgICBpZiAob2Zmc2V0V2lkdGggPiAwKSB7XG4gICAgICBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIG9mZnNldFdpZHRoIHx8IDE7XG4gICAgfVxuXG4gICAgaWYgKG9mZnNldEhlaWdodCA+IDApIHtcbiAgICAgIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIG9mZnNldEhlaWdodCB8fCAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHJlY3Qud2lkdGggLyBzY2FsZVgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCAvIHNjYWxlWSxcbiAgICB0b3A6IHJlY3QudG9wIC8gc2NhbGVZLFxuICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC8gc2NhbGVYLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLyBzY2FsZVksXG4gICAgbGVmdDogcmVjdC5sZWZ0IC8gc2NhbGVYLFxuICAgIHg6IHJlY3QubGVmdCAvIHNjYWxlWCxcbiAgICB5OiByZWN0LnRvcCAvIHNjYWxlWVxuICB9O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufSIsImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChnZXROb2RlTmFtZShlbGVtZW50KSA9PT0gJ2h0bWwnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gKC8vIHRoaXMgaXMgYSBxdWlja2VyIChidXQgbGVzcyB0eXBlIHNhZmUpIHdheSB0byBzYXZlIHF1aXRlIHNvbWUgYnl0ZXMgZnJvbSB0aGUgYnVuZGxlXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgIGVsZW1lbnQuYXNzaWduZWRTbG90IHx8IC8vIHN0ZXAgaW50byB0aGUgc2hhZG93IERPTSBvZiB0aGUgcGFyZW50IG9mIGEgc2xvdHRlZCBub2RlXG4gICAgZWxlbWVudC5wYXJlbnROb2RlIHx8ICggLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWRcbiAgICBpc1NoYWRvd1Jvb3QoZWxlbWVudCkgPyBlbGVtZW50Lmhvc3QgOiBudWxsKSB8fCAvLyBTaGFkb3dSb290IGRldGVjdGVkXG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IEhUTUxFbGVtZW50IGlzIGEgTm9kZVxuICAgIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSAvLyBmYWxsYmFja1xuXG4gICk7XG59IiwiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdmaXJlZm94JykgIT09IC0xO1xuICB2YXIgaXNJRSA9IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpICE9PSAtMTtcblxuICBpZiAoaXNJRSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgLy8gSW4gSUUgOSwgMTAgYW5kIDExIGZpeGVkIGVsZW1lbnRzIGNvbnRhaW5pbmcgYmxvY2sgaXMgYWx3YXlzIGVzdGFibGlzaGVkIGJ5IHRoZSB2aWV3cG9ydFxuICAgIHZhciBlbGVtZW50Q3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcblxuICAgIGlmIChlbGVtZW50Q3NzLnBvc2l0aW9uID09PSAnZml4ZWQnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKGVsZW1lbnQpO1xuXG4gIGlmIChpc1NoYWRvd1Jvb3QoY3VycmVudE5vZGUpKSB7XG4gICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5ob3N0O1xuICB9XG5cbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmIFsnaHRtbCcsICdib2R5J10uaW5kZXhPZihnZXROb2RlTmFtZShjdXJyZW50Tm9kZSkpIDwgMCkge1xuICAgIHZhciBjc3MgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTsgLy8gVGhpcyBpcyBub24tZXhoYXVzdGl2ZSBidXQgY292ZXJzIHRoZSBtb3N0IGNvbW1vbiBDU1MgcHJvcGVydGllcyB0aGF0XG4gICAgLy8gY3JlYXRlIGEgY29udGFpbmluZyBibG9jay5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQ29udGFpbmluZ19ibG9jayNpZGVudGlmeWluZ190aGVfY29udGFpbmluZ19ibG9ja1xuXG4gICAgaWYgKGNzcy50cmFuc2Zvcm0gIT09ICdub25lJyB8fCBjc3MucGVyc3BlY3RpdmUgIT09ICdub25lJyB8fCBjc3MuY29udGFpbiA9PT0gJ3BhaW50JyB8fCBbJ3RyYW5zZm9ybScsICdwZXJzcGVjdGl2ZSddLmluZGV4T2YoY3NzLndpbGxDaGFuZ2UpICE9PSAtMSB8fCBpc0ZpcmVmb3ggJiYgY3NzLndpbGxDaGFuZ2UgPT09ICdmaWx0ZXInIHx8IGlzRmlyZWZveCAmJiBjc3MuZmlsdGVyICYmIGNzcy5maWx0ZXIgIT09ICdub25lJykge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIEdldHMgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgcG9zaXRpb25lZCBlbGVtZW50LiBIYW5kbGVzIHNvbWUgZWRnZSBjYXNlcyxcbi8vIHN1Y2ggYXMgdGFibGUgYW5jZXN0b3JzIGFuZCBjcm9zcyBicm93c2VyIGJ1Z3MuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCk7XG5cbiAgd2hpbGUgKG9mZnNldFBhcmVudCAmJiBpc1RhYmxlRWxlbWVudChvZmZzZXRQYXJlbnQpICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCk7XG4gIH1cblxuICBpZiAob2Zmc2V0UGFyZW50ICYmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnaHRtbCcgfHwgZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2JvZHknICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHx8IHdpbmRvdztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbk1heENsYW1wKG1pbiwgdmFsdWUsIG1heCkge1xuICB2YXIgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59IiwiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RnJlc2hTaWRlT2JqZWN0KCkge1xuICByZXR1cm4ge1xuICAgIHRvcDogMCxcbiAgICByaWdodDogMCxcbiAgICBib3R0b206IDAsXG4gICAgbGVmdDogMFxuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuLi9kb20tdXRpbHMvY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE1haW5BeGlzRnJvbVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgd2l0aGluIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi4vdXRpbHMvbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuLi91dGlscy9leHBhbmRUb0hhc2hNYXAuanNcIjtcbmltcG9ydCB7IGxlZnQsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdG9wLCBib3R0b20gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdG9QYWRkaW5nT2JqZWN0ID0gZnVuY3Rpb24gdG9QYWRkaW5nT2JqZWN0KHBhZGRpbmcsIHN0YXRlKSB7XG4gIHBhZGRpbmcgPSB0eXBlb2YgcGFkZGluZyA9PT0gJ2Z1bmN0aW9uJyA/IHBhZGRpbmcoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiBwYWRkaW5nO1xuICByZXR1cm4gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbn07XG5cbmZ1bmN0aW9uIGFycm93KF9yZWYpIHtcbiAgdmFyIF9zdGF0ZSRtb2RpZmllcnNEYXRhJDtcblxuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHM7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgYXhpcyA9IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChiYXNlUGxhY2VtZW50KTtcbiAgdmFyIGlzVmVydGljYWwgPSBbbGVmdCwgcmlnaHRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgaWYgKCFhcnJvd0VsZW1lbnQgfHwgIXBvcHBlck9mZnNldHMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcGFkZGluZ09iamVjdCA9IHRvUGFkZGluZ09iamVjdChvcHRpb25zLnBhZGRpbmcsIHN0YXRlKTtcbiAgdmFyIGFycm93UmVjdCA9IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KTtcbiAgdmFyIG1pblByb3AgPSBheGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICB2YXIgbWF4UHJvcCA9IGF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICB2YXIgZW5kRGlmZiA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtsZW5dICsgc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdIC0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnBvcHBlcltsZW5dO1xuICB2YXIgc3RhcnREaWZmID0gcG9wcGVyT2Zmc2V0c1theGlzXSAtIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXTtcbiAgdmFyIGFycm93T2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGFycm93RWxlbWVudCk7XG4gIHZhciBjbGllbnRTaXplID0gYXJyb3dPZmZzZXRQYXJlbnQgPyBheGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRIZWlnaHQgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFdpZHRoIHx8IDAgOiAwO1xuICB2YXIgY2VudGVyVG9SZWZlcmVuY2UgPSBlbmREaWZmIC8gMiAtIHN0YXJ0RGlmZiAvIDI7IC8vIE1ha2Ugc3VyZSB0aGUgYXJyb3cgZG9lc24ndCBvdmVyZmxvdyB0aGUgcG9wcGVyIGlmIHRoZSBjZW50ZXIgcG9pbnQgaXNcbiAgLy8gb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGJvdW5kc1xuXG4gIHZhciBtaW4gPSBwYWRkaW5nT2JqZWN0W21pblByb3BdO1xuICB2YXIgbWF4ID0gY2xpZW50U2l6ZSAtIGFycm93UmVjdFtsZW5dIC0gcGFkZGluZ09iamVjdFttYXhQcm9wXTtcbiAgdmFyIGNlbnRlciA9IGNsaWVudFNpemUgLyAyIC0gYXJyb3dSZWN0W2xlbl0gLyAyICsgY2VudGVyVG9SZWZlcmVuY2U7XG4gIHZhciBvZmZzZXQgPSB3aXRoaW4obWluLCBjZW50ZXIsIG1heCk7IC8vIFByZXZlbnRzIGJyZWFraW5nIHN5bnRheCBoaWdobGlnaHRpbmcuLi5cblxuICB2YXIgYXhpc1Byb3AgPSBheGlzO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gKF9zdGF0ZSRtb2RpZmllcnNEYXRhJCA9IHt9LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSRbYXhpc1Byb3BdID0gb2Zmc2V0LCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQuY2VudGVyT2Zmc2V0ID0gb2Zmc2V0IC0gY2VudGVyLCBfc3RhdGUkbW9kaWZpZXJzRGF0YSQpO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGVsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQsXG4gICAgICBhcnJvd0VsZW1lbnQgPSBfb3B0aW9ucyRlbGVtZW50ID09PSB2b2lkIDAgPyAnW2RhdGEtcG9wcGVyLWFycm93XScgOiBfb3B0aW9ucyRlbGVtZW50O1xuXG4gIGlmIChhcnJvd0VsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBDU1Mgc2VsZWN0b3JcblxuXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLnBvcHBlci5xdWVyeVNlbGVjdG9yKGFycm93RWxlbWVudCk7XG5cbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBpZiAoIWlzSFRNTEVsZW1lbnQoYXJyb3dFbGVtZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIGVsZW1lbnQgbXVzdCBiZSBhbiBIVE1MRWxlbWVudCAobm90IGFuIFNWR0VsZW1lbnQpLicsICdUbyB1c2UgYW4gU1ZHIGFycm93LCB3cmFwIGl0IGluIGFuIEhUTUxFbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIGFzJywgJ3RoZSBhcnJvdy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29udGFpbnMoc3RhdGUuZWxlbWVudHMucG9wcGVyLCBhcnJvd0VsZW1lbnQpKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhcnJvd1wiIG1vZGlmaWVyXFwncyBgZWxlbWVudGAgbXVzdCBiZSBhIGNoaWxkIG9mIHRoZSBwb3BwZXInLCAnZWxlbWVudC4nXS5qb2luKCcgJykpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHN0YXRlLmVsZW1lbnRzLmFycm93ID0gYXJyb3dFbGVtZW50O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnYXJyb3cnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogYXJyb3csXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydwb3BwZXJPZmZzZXRzJ10sXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogcm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzLFxuICAgICAgaXNGaXhlZCA9IF9yZWYyLmlzRml4ZWQ7XG4gIHZhciBfb2Zmc2V0cyR4ID0gb2Zmc2V0cy54LFxuICAgICAgeCA9IF9vZmZzZXRzJHggPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR4LFxuICAgICAgX29mZnNldHMkeSA9IG9mZnNldHMueSxcbiAgICAgIHkgPSBfb2Zmc2V0cyR5ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeTtcblxuICB2YXIgX3JlZjMgPSB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWYzLng7XG4gIHkgPSBfcmVmMy55O1xuICB2YXIgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgdmFyIGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG4gIHZhciBzaWRlWCA9IGxlZnQ7XG4gIHZhciBzaWRlWSA9IHRvcDtcbiAgdmFyIHdpbiA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgdmFyIGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICB2YXIgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiYgcG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cblxuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCB8fCAocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIHZhciBvZmZzZXRZID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQuaGVpZ2h0IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF07XG4gICAgICB5IC09IG9mZnNldFkgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQgfHwgKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIHZhciBvZmZzZXRYID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFt3aWR0aFByb3BdO1xuICAgICAgeCAtPSBvZmZzZXRYIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgdmFyIF9yZWY0ID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KSA6IHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcblxuICB4ID0gX3JlZjQueDtcbiAgeSA9IF9yZWY0Lnk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDEgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjUpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjUuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjUub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlLFxuICAgICAgX29wdGlvbnMkcm91bmRPZmZzZXRzID0gb3B0aW9ucy5yb3VuZE9mZnNldHMsXG4gICAgICByb3VuZE9mZnNldHMgPSBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyb3VuZE9mZnNldHM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgdmFyaWF0aW9uOiBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiBncHVBY2NlbGVyYXRpb24sXG4gICAgaXNGaXhlZDogc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJ1xuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMucG9wcGVyLCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgYWRhcHRpdmU6IGFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5hcnJvdywgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBhZGFwdGl2ZTogZmFsc2UsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCc6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59OyIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgcGFzc2l2ZSA9IHtcbiAgcGFzc2l2ZTogdHJ1ZVxufTtcblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIGluc3RhbmNlID0gX3JlZi5pbnN0YW5jZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRzY3JvbGwgPSBvcHRpb25zLnNjcm9sbCxcbiAgICAgIHNjcm9sbCA9IF9vcHRpb25zJHNjcm9sbCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHNjcm9sbCxcbiAgICAgIF9vcHRpb25zJHJlc2l6ZSA9IG9wdGlvbnMucmVzaXplLFxuICAgICAgcmVzaXplID0gX29wdGlvbnMkcmVzaXplID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcmVzaXplO1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KHN0YXRlLmVsZW1lbnRzLnBvcHBlcik7XG4gIHZhciBzY3JvbGxQYXJlbnRzID0gW10uY29uY2F0KHN0YXRlLnNjcm9sbFBhcmVudHMucmVmZXJlbmNlLCBzdGF0ZS5zY3JvbGxQYXJlbnRzLnBvcHBlcik7XG5cbiAgaWYgKHNjcm9sbCkge1xuICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICBzY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChyZXNpemUpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHNjcm9sbCkge1xuICAgICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgICAgc2Nyb2xsUGFyZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVzaXplKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICB9XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdldmVudExpc3RlbmVycycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogZnVuY3Rpb24gZm4oKSB7fSxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIGRhdGE6IHt9XG59OyIsInZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsInZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsKG5vZGUpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhub2RlKTtcbiAgdmFyIHNjcm9sbExlZnQgPSB3aW4ucGFnZVhPZmZzZXQ7XG4gIHZhciBzY3JvbGxUb3AgPSB3aW4ucGFnZVlPZmZzZXQ7XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsTGVmdDogc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IHNjcm9sbFRvcFxuICB9O1xufSIsImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn0iLCJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCJpbXBvcnQgZ2V0U2Nyb2xsUGFyZW50IGZyb20gXCIuL2dldFNjcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuLypcbmdpdmVuIGEgRE9NIGVsZW1lbnQsIHJldHVybiB0aGUgbGlzdCBvZiBhbGwgc2Nyb2xsIHBhcmVudHMsIHVwIHRoZSBsaXN0IG9mIGFuY2Vzb3JzXG51bnRpbCB3ZSBnZXQgdG8gdGhlIHRvcCB3aW5kb3cgb2JqZWN0LiBUaGlzIGxpc3QgaXMgd2hhdCB3ZSBhdHRhY2ggc2Nyb2xsIGxpc3RlbmVyc1xudG8sIGJlY2F1c2UgaWYgYW55IG9mIHRoZXNlIHBhcmVudCBlbGVtZW50cyBzY3JvbGwsIHdlJ2xsIG5lZWQgdG8gcmUtY2FsY3VsYXRlIHRoZVxucmVmZXJlbmNlIGVsZW1lbnQncyBwb3NpdGlvbi5cbiovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpc3RTY3JvbGxQYXJlbnRzKGVsZW1lbnQsIGxpc3QpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICBpZiAobGlzdCA9PT0gdm9pZCAwKSB7XG4gICAgbGlzdCA9IFtdO1xuICB9XG5cbiAgdmFyIHNjcm9sbFBhcmVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50KTtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudCA9PT0gKChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keSk7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3coc2Nyb2xsUGFyZW50KTtcbiAgdmFyIHRhcmdldCA9IGlzQm9keSA/IFt3aW5dLmNvbmNhdCh3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzU2Nyb2xsUGFyZW50KHNjcm9sbFBhcmVudCkgPyBzY3JvbGxQYXJlbnQgOiBbXSkgOiBzY3JvbGxQYXJlbnQ7XG4gIHZhciB1cGRhdGVkTGlzdCA9IGxpc3QuY29uY2F0KHRhcmdldCk7XG4gIHJldHVybiBpc0JvZHkgPyB1cGRhdGVkTGlzdCA6IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBpc0JvZHkgdGVsbHMgdXMgdGFyZ2V0IHdpbGwgYmUgYW4gSFRNTEVsZW1lbnQgaGVyZVxuICB1cGRhdGVkTGlzdC5jb25jYXQobGlzdFNjcm9sbFBhcmVudHMoZ2V0UGFyZW50Tm9kZSh0YXJnZXQpKSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59IiwiaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWaWV3cG9ydFJlY3QgZnJvbSBcIi4vZ2V0Vmlld3BvcnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRSZWN0IGZyb20gXCIuL2dldERvY3VtZW50UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4uL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IG1heCwgbWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTtcbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgcmV0dXJuIGNsaXBwaW5nUGFyZW50ID09PSB2aWV3cG9ydCA/IHJlY3RUb0NsaWVudFJlY3QoZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnkpIHtcbiAgdmFyIG1haW5DbGlwcGluZ1BhcmVudHMgPSBib3VuZGFyeSA9PT0gJ2NsaXBwaW5nUGFyZW50cycgPyBnZXRDbGlwcGluZ1BhcmVudHMoZWxlbWVudCkgOiBbXS5jb25jYXQoYm91bmRhcnkpO1xuICB2YXIgY2xpcHBpbmdQYXJlbnRzID0gW10uY29uY2F0KG1haW5DbGlwcGluZ1BhcmVudHMsIFtyb290Qm91bmRhcnldKTtcbiAgdmFyIGZpcnN0Q2xpcHBpbmdQYXJlbnQgPSBjbGlwcGluZ1BhcmVudHNbMF07XG4gIHZhciBjbGlwcGluZ1JlY3QgPSBjbGlwcGluZ1BhcmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2NSZWN0LCBjbGlwcGluZ1BhcmVudCkge1xuICAgIHZhciByZWN0ID0gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQpKTtcbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufSIsImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDsgLy8gTkI6IFRoaXMgaXNuJ3Qgc3VwcG9ydGVkIG9uIGlPUyA8PSAxMi4gSWYgdGhlIGtleWJvYXJkIGlzIG9wZW4sIHRoZSBwb3BwZXJcbiAgLy8gY2FuIGJlIG9ic2N1cmVkIHVuZGVybmVhdGggaXQuXG4gIC8vIEFsc28sIGBodG1sLmNsaWVudEhlaWdodGAgYWRkcyB0aGUgYm90dG9tIGJhciBoZWlnaHQgaW4gU2FmYXJpIGlPUywgZXZlblxuICAvLyBpZiBpdCBpc24ndCBvcGVuLCBzbyBpZiB0aGlzIGlzbid0IGF2YWlsYWJsZSwgdGhlIHBvcHBlciB3aWxsIGJlIGRldGVjdGVkXG4gIC8vIHRvIG92ZXJmbG93IHRoZSBib3R0b20gb2YgdGhlIHNjcmVlbiB0b28gZWFybHkuXG5cbiAgaWYgKHZpc3VhbFZpZXdwb3J0KSB7XG4gICAgd2lkdGggPSB2aXN1YWxWaWV3cG9ydC53aWR0aDtcbiAgICBoZWlnaHQgPSB2aXN1YWxWaWV3cG9ydC5oZWlnaHQ7IC8vIFVzZXMgTGF5b3V0IFZpZXdwb3J0IChsaWtlIENocm9tZTsgU2FmYXJpIGRvZXMgbm90IGN1cnJlbnRseSlcbiAgICAvLyBJbiBDaHJvbWUsIGl0IHJldHVybnMgYSB2YWx1ZSB2ZXJ5IGNsb3NlIHRvIDAgKCsvLSkgYnV0IGNvbnRhaW5zIHJvdW5kaW5nXG4gICAgLy8gZXJyb3JzIGR1ZSB0byBmbG9hdGluZyBwb2ludCBudW1iZXJzLCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHByZWNpc2lvbi5cbiAgICAvLyBTYWZhcmkgcmV0dXJucyBhIG51bWJlciA8PSAwLCB1c3VhbGx5IDwgLTEgd2hlbiBwaW5jaC16b29tZWRcbiAgICAvLyBGZWF0dXJlIGRldGVjdGlvbiBmYWlscyBpbiBtb2JpbGUgZW11bGF0aW9uIG1vZGUgaW4gQ2hyb21lLlxuICAgIC8vIE1hdGguYWJzKHdpbi5pbm5lcldpZHRoIC8gdmlzdWFsVmlld3BvcnQuc2NhbGUgLSB2aXN1YWxWaWV3cG9ydC53aWR0aCkgPFxuICAgIC8vIDAuMDAxXG4gICAgLy8gRmFsbGJhY2sgaGVyZTogXCJOb3QgU2FmYXJpXCIgdXNlckFnZW50XG5cbiAgICBpZiAoIS9eKCg/IWNocm9tZXxhbmRyb2lkKS4pKnNhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwiaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgeyBtYXggfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBHZXRzIHRoZSBlbnRpcmUgc2l6ZSBvZiB0aGUgc2Nyb2xsYWJsZSBkb2N1bWVudCBhcmVhLCBldmVuIGV4dGVuZGluZyBvdXRzaWRlXG4vLyBvZiB0aGUgYDxodG1sPmAgYW5kIGA8Ym9keT5gIHJlY3QgYm91bmRzIGlmIGhvcml6b250YWxseSBzY3JvbGxhYmxlXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB3aW5TY3JvbGwgPSBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCk7XG4gIHZhciBib2R5ID0gKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5O1xuICB2YXIgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuc2Nyb2xsV2lkdGggOiAwLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApO1xuICB2YXIgaGVpZ2h0ID0gbWF4KGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgYm9keSA/IGJvZHkuc2Nyb2xsSGVpZ2h0IDogMCwgYm9keSA/IGJvZHkuY2xpZW50SGVpZ2h0IDogMCk7XG4gIHZhciB4ID0gLXdpblNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgdmFyIHkgPSAtd2luU2Nyb2xsLnNjcm9sbFRvcDtcblxuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5IHx8IGh0bWwpLmRpcmVjdGlvbiA9PT0gJ3J0bCcpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5jbGllbnRXaWR0aCA6IDApIC0gd2lkdGg7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCJpbXBvcnQgZ2V0Q2xpcHBpbmdSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4vY29tcHV0ZU9mZnNldHMuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IGNsaXBwaW5nUGFyZW50cywgcmVmZXJlbmNlLCBwb3BwZXIsIGJvdHRvbSwgdG9wLCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4vbWVyZ2VQYWRkaW5nT2JqZWN0LmpzXCI7XG5pbXBvcnQgZXhwYW5kVG9IYXNoTWFwIGZyb20gXCIuL2V4cGFuZFRvSGFzaE1hcC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldGVjdE92ZXJmbG93KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMkcGxhY2VtZW50ID09PSB2b2lkIDAgPyBzdGF0ZS5wbGFjZW1lbnQgOiBfb3B0aW9ucyRwbGFjZW1lbnQsXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSk7XG4gIHZhciByZWZlcmVuY2VDbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHN0YXRlLmVsZW1lbnRzLnJlZmVyZW5jZSk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlQ2xpZW50UmVjdCxcbiAgICBlbGVtZW50OiBwb3BwZXJSZWN0LFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogcGxhY2VtZW50XG4gIH0pO1xuICB2YXIgcG9wcGVyQ2xpZW50UmVjdCA9IHJlY3RUb0NsaWVudFJlY3QoT2JqZWN0LmFzc2lnbih7fSwgcG9wcGVyUmVjdCwgcG9wcGVyT2Zmc2V0cykpO1xuICB2YXIgZWxlbWVudENsaWVudFJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcG9wcGVyQ2xpZW50UmVjdCA6IHJlZmVyZW5jZUNsaWVudFJlY3Q7IC8vIHBvc2l0aXZlID0gb3ZlcmZsb3dpbmcgdGhlIGNsaXBwaW5nIHJlY3RcbiAgLy8gMCBvciBuZWdhdGl2ZSA9IHdpdGhpbiB0aGUgY2xpcHBpbmcgcmVjdFxuXG4gIHZhciBvdmVyZmxvd09mZnNldHMgPSB7XG4gICAgdG9wOiBjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3AsXG4gICAgYm90dG9tOiBlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20sXG4gICAgbGVmdDogY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0LFxuICAgIHJpZ2h0OiBlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHRcbiAgfTtcbiAgdmFyIG9mZnNldERhdGEgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldDsgLy8gT2Zmc2V0cyBjYW4gYmUgYXBwbGllZCBvbmx5IHRvIHRoZSBwb3BwZXIgZWxlbWVudFxuXG4gIGlmIChlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyICYmIG9mZnNldERhdGEpIHtcbiAgICB2YXIgb2Zmc2V0ID0gb2Zmc2V0RGF0YVtwbGFjZW1lbnRdO1xuICAgIE9iamVjdC5rZXlzKG92ZXJmbG93T2Zmc2V0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgbXVsdGlwbHkgPSBbcmlnaHQsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAxIDogLTE7XG4gICAgICB2YXIgYXhpcyA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihrZXkpID49IDAgPyAneScgOiAneCc7XG4gICAgICBvdmVyZmxvd09mZnNldHNba2V5XSArPSBvZmZzZXRbYXhpc10gKiBtdWx0aXBseTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBvdmVyZmxvd09mZnNldHM7XG59IiwiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIOKAkyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsImltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4vZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgeyB2YXJpYXRpb25QbGFjZW1lbnRzLCBiYXNlUGxhY2VtZW50cywgcGxhY2VtZW50cyBhcyBhbGxQbGFjZW1lbnRzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgcGxhY2VtZW50ID0gX29wdGlvbnMucGxhY2VtZW50LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IF9vcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnMgPSBfb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9IF9vcHRpb25zLmFsbG93ZWRBdXRvUGxhY2VtZW50cyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IF9vcHRpb25zJGFsbG93ZWRBdXRvUCA9PT0gdm9pZCAwID8gYWxsUGxhY2VtZW50cyA6IF9vcHRpb25zJGFsbG93ZWRBdXRvUDtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpO1xuICB2YXIgcGxhY2VtZW50cyA9IHZhcmlhdGlvbiA/IGZsaXBWYXJpYXRpb25zID8gdmFyaWF0aW9uUGxhY2VtZW50cyA6IHZhcmlhdGlvblBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkgPT09IHZhcmlhdGlvbjtcbiAgfSkgOiBiYXNlUGxhY2VtZW50cztcbiAgdmFyIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhbGxvd2VkQXV0b1BsYWNlbWVudHMuaW5kZXhPZihwbGFjZW1lbnQpID49IDA7XG4gIH0pO1xuXG4gIGlmIChhbGxvd2VkUGxhY2VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBUaGUgYGFsbG93ZWRBdXRvUGxhY2VtZW50c2Agb3B0aW9uIGRpZCBub3QgYWxsb3cgYW55JywgJ3BsYWNlbWVudHMuIEVuc3VyZSB0aGUgYHBsYWNlbWVudGAgb3B0aW9uIG1hdGNoZXMgdGhlIHZhcmlhdGlvbicsICdvZiB0aGUgYWxsb3dlZCBwbGFjZW1lbnRzLicsICdGb3IgZXhhbXBsZSwgXCJhdXRvXCIgY2Fubm90IGJlIHVzZWQgdG8gYWxsb3cgXCJib3R0b20tc3RhcnRcIi4nLCAnVXNlIFwiYXV0by1zdGFydFwiIGluc3RlYWQuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdHlwZV06IEZsb3cgc2VlbXMgdG8gaGF2ZSBwcm9ibGVtcyB3aXRoIHR3byBhcnJheSB1bmlvbnMuLi5cblxuXG4gIHZhciBvdmVyZmxvd3MgPSBhbGxvd2VkUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KVtnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCldO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG92ZXJmbG93cykuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBvdmVyZmxvd3NbYV0gLSBvdmVyZmxvd3NbYl07XG4gIH0pO1xufSIsImltcG9ydCB7IHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuXG5mdW5jdGlvbiBnZXRTaWRlT2Zmc2V0cyhvdmVyZmxvdywgcmVjdCwgcHJldmVudGVkT2Zmc2V0cykge1xuICBpZiAocHJldmVudGVkT2Zmc2V0cyA9PT0gdm9pZCAwKSB7XG4gICAgcHJldmVudGVkT2Zmc2V0cyA9IHtcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdG9wOiBvdmVyZmxvdy50b3AgLSByZWN0LmhlaWdodCAtIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICByaWdodDogb3ZlcmZsb3cucmlnaHQgLSByZWN0LndpZHRoICsgcHJldmVudGVkT2Zmc2V0cy54LFxuICAgIGJvdHRvbTogb3ZlcmZsb3cuYm90dG9tIC0gcmVjdC5oZWlnaHQgKyBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgbGVmdDogb3ZlcmZsb3cubGVmdCAtIHJlY3Qud2lkdGggLSBwcmV2ZW50ZWRPZmZzZXRzLnhcbiAgfTtcbn1cblxuZnVuY3Rpb24gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKG92ZXJmbG93KSB7XG4gIHJldHVybiBbdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0XS5zb21lKGZ1bmN0aW9uIChzaWRlKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93W3NpZGVdID49IDA7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoaWRlKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIHByZXZlbnRlZE9mZnNldHMgPSBzdGF0ZS5tb2RpZmllcnNEYXRhLnByZXZlbnRPdmVyZmxvdztcbiAgdmFyIHJlZmVyZW5jZU92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBlbGVtZW50Q29udGV4dDogJ3JlZmVyZW5jZSdcbiAgfSk7XG4gIHZhciBwb3BwZXJBbHRPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYWx0Qm91bmRhcnk6IHRydWVcbiAgfSk7XG4gIHZhciByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhyZWZlcmVuY2VPdmVyZmxvdywgcmVmZXJlbmNlUmVjdCk7XG4gIHZhciBwb3BwZXJFc2NhcGVPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocG9wcGVyQWx0T3ZlcmZsb3csIHBvcHBlclJlY3QsIHByZXZlbnRlZE9mZnNldHMpO1xuICB2YXIgaXNSZWZlcmVuY2VIaWRkZW4gPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzKTtcbiAgdmFyIGhhc1BvcHBlckVzY2FwZWQgPSBpc0FueVNpZGVGdWxseUNsaXBwZWQocG9wcGVyRXNjYXBlT2Zmc2V0cyk7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSB7XG4gICAgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzOiByZWZlcmVuY2VDbGlwcGluZ09mZnNldHMsXG4gICAgcG9wcGVyRXNjYXBlT2Zmc2V0czogcG9wcGVyRXNjYXBlT2Zmc2V0cyxcbiAgICBpc1JlZmVyZW5jZUhpZGRlbjogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgaGFzUG9wcGVyRXNjYXBlZDogaGFzUG9wcGVyRXNjYXBlZFxuICB9O1xuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXJlZmVyZW5jZS1oaWRkZW4nOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICAnZGF0YS1wb3BwZXItZXNjYXBlZCc6IGhhc1BvcHBlckVzY2FwZWRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdoaWRlJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXSxcbiAgZm46IGhpZGVcbn07IiwiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwiaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldEhUTUxFbGVtZW50U2Nyb2xsIGZyb20gXCIuL2dldEhUTUxFbGVtZW50U2Nyb2xsLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROb2RlU2Nyb2xsKG5vZGUpIHtcbiAgaWYgKG5vZGUgPT09IGdldFdpbmRvdyhub2RlKSB8fCAhaXNIVE1MRWxlbWVudChub2RlKSkge1xuICAgIHJldHVybiBnZXRXaW5kb3dTY3JvbGwobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldEhUTUxFbGVtZW50U2Nyb2xsKG5vZGUpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsImltcG9ydCBnZXRDb21wb3NpdGVSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wb3NpdGVSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2RvbS11dGlscy9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IG9yZGVyTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL29yZGVyTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgZGVib3VuY2UgZnJvbSBcIi4vdXRpbHMvZGVib3VuY2UuanNcIjtcbmltcG9ydCB2YWxpZGF0ZU1vZGlmaWVycyBmcm9tIFwiLi91dGlscy92YWxpZGF0ZU1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IHVuaXF1ZUJ5IGZyb20gXCIuL3V0aWxzL3VuaXF1ZUJ5LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgbWVyZ2VCeU5hbWUgZnJvbSBcIi4vdXRpbHMvbWVyZ2VCeU5hbWUuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vZG9tLXV0aWxzL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi9lbnVtcy5qc1wiO1xudmFyIElOVkFMSURfRUxFTUVOVF9FUlJPUiA9ICdQb3BwZXI6IEludmFsaWQgcmVmZXJlbmNlIG9yIHBvcHBlciBhcmd1bWVudCBwcm92aWRlZC4gVGhleSBtdXN0IGJlIGVpdGhlciBhIERPTSBlbGVtZW50IG9yIHZpcnR1YWwgZWxlbWVudC4nO1xudmFyIElORklOSVRFX0xPT1BfRVJST1IgPSAnUG9wcGVyOiBBbiBpbmZpbml0ZSBsb29wIGluIHRoZSBtb2RpZmllcnMgY3ljbGUgaGFzIGJlZW4gZGV0ZWN0ZWQhIFRoZSBjeWNsZSBoYXMgYmVlbiBpbnRlcnJ1cHRlZCB0byBwcmV2ZW50IGEgYnJvd3NlciBjcmFzaC4nO1xudmFyIERFRkFVTFRfT1BUSU9OUyA9IHtcbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgbW9kaWZpZXJzOiBbXSxcbiAgc3RyYXRlZ3k6ICdhYnNvbHV0ZSdcbn07XG5cbmZ1bmN0aW9uIGFyZVZhbGlkRWxlbWVudHMoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gIWFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHJldHVybiAhKGVsZW1lbnQgJiYgdHlwZW9mIGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwb3BwZXJHZW5lcmF0b3IoZ2VuZXJhdG9yT3B0aW9ucykge1xuICBpZiAoZ2VuZXJhdG9yT3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgZ2VuZXJhdG9yT3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9nZW5lcmF0b3JPcHRpb25zID0gZ2VuZXJhdG9yT3B0aW9ucyxcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRNb2RpZmllcnMsXG4gICAgICBkZWZhdWx0TW9kaWZpZXJzID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmID09PSB2b2lkIDAgPyBbXSA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZixcbiAgICAgIF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyxcbiAgICAgIGRlZmF1bHRPcHRpb25zID0gX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9PT0gdm9pZCAwID8gREVGQVVMVF9PUFRJT05TIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmMjtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVBvcHBlcihyZWZlcmVuY2UsIHBvcHBlciwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbiAgICB9XG5cbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICAgICAgb3JkZXJlZE1vZGlmaWVyczogW10sXG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX09QVElPTlMsIGRlZmF1bHRPcHRpb25zKSxcbiAgICAgIG1vZGlmaWVyc0RhdGE6IHt9LFxuICAgICAgZWxlbWVudHM6IHtcbiAgICAgICAgcmVmZXJlbmNlOiByZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlcjogcG9wcGVyXG4gICAgICB9LFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBzdHlsZXM6IHt9XG4gICAgfTtcbiAgICB2YXIgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIHZhciBpc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHZhciBpbnN0YW5jZSA9IHtcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uIHNldE9wdGlvbnMoc2V0T3B0aW9uc0FjdGlvbikge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzZXRPcHRpb25zQWN0aW9uID09PSAnZnVuY3Rpb24nID8gc2V0T3B0aW9uc0FjdGlvbihzdGF0ZS5vcHRpb25zKSA6IHNldE9wdGlvbnNBY3Rpb247XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgc3RhdGUub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBzdGF0ZS5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc3RhdGUuc2Nyb2xsUGFyZW50cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGlzRWxlbWVudChyZWZlcmVuY2UpID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlKSA6IHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZS5jb250ZXh0RWxlbWVudCkgOiBbXSxcbiAgICAgICAgICBwb3BwZXI6IGxpc3RTY3JvbGxQYXJlbnRzKHBvcHBlcilcbiAgICAgICAgfTsgLy8gT3JkZXJzIHRoZSBtb2RpZmllcnMgYmFzZWQgb24gdGhlaXIgZGVwZW5kZW5jaWVzIGFuZCBgcGhhc2VgXG4gICAgICAgIC8vIHByb3BlcnRpZXNcblxuICAgICAgICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyTW9kaWZpZXJzKG1lcmdlQnlOYW1lKFtdLmNvbmNhdChkZWZhdWx0TW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycykpKTsgLy8gU3RyaXAgb3V0IGRpc2FibGVkIG1vZGlmaWVyc1xuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMgPSBvcmRlcmVkTW9kaWZpZXJzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgICAgIHJldHVybiBtLmVuYWJsZWQ7XG4gICAgICAgIH0pOyAvLyBWYWxpZGF0ZSB0aGUgcHJvdmlkZWQgbW9kaWZpZXJzIHNvIHRoYXQgdGhlIGNvbnN1bWVyIHdpbGwgZ2V0IHdhcm5lZFxuICAgICAgICAvLyBpZiBvbmUgb2YgdGhlIG1vZGlmaWVycyBpcyBpbnZhbGlkIGZvciBhbnkgcmVhc29uXG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgIHZhciBtb2RpZmllcnMgPSB1bmlxdWVCeShbXS5jb25jYXQob3JkZXJlZE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpLCBmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmLm5hbWU7XG4gICAgICAgICAgICByZXR1cm4gbmFtZTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpO1xuXG4gICAgICAgICAgaWYgKGdldEJhc2VQbGFjZW1lbnQoc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgICAgICAgICB2YXIgZmxpcE1vZGlmaWVyID0gc3RhdGUub3JkZXJlZE1vZGlmaWVycy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgICAgICAgICAgIHJldHVybiBuYW1lID09PSAnZmxpcCc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKCFmbGlwTW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogXCJhdXRvXCIgcGxhY2VtZW50cyByZXF1aXJlIHRoZSBcImZsaXBcIiBtb2RpZmllciBiZScsICdwcmVzZW50IGFuZCBlbmFibGVkIHRvIHdvcmsuJ10uam9pbignICcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKHBvcHBlciksXG4gICAgICAgICAgICAgIG1hcmdpblRvcCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblRvcCxcbiAgICAgICAgICAgICAgbWFyZ2luUmlnaHQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5SaWdodCxcbiAgICAgICAgICAgICAgbWFyZ2luQm90dG9tID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luQm90dG9tLFxuICAgICAgICAgICAgICBtYXJnaW5MZWZ0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luTGVmdDsgLy8gV2Ugbm8gbG9uZ2VyIHRha2UgaW50byBhY2NvdW50IGBtYXJnaW5zYCBvbiB0aGUgcG9wcGVyLCBhbmQgaXQgY2FuXG4gICAgICAgICAgLy8gY2F1c2UgYnVncyB3aXRoIHBvc2l0aW9uaW5nLCBzbyB3ZSdsbCB3YXJuIHRoZSBjb25zdW1lclxuXG5cbiAgICAgICAgICBpZiAoW21hcmdpblRvcCwgbWFyZ2luUmlnaHQsIG1hcmdpbkJvdHRvbSwgbWFyZ2luTGVmdF0uc29tZShmdW5jdGlvbiAobWFyZ2luKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXJnaW4pO1xuICAgICAgICAgIH0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IENTUyBcIm1hcmdpblwiIHN0eWxlcyBjYW5ub3QgYmUgdXNlZCB0byBhcHBseSBwYWRkaW5nJywgJ2JldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50IG9yIGJvdW5kYXJ5LicsICdUbyByZXBsaWNhdGUgbWFyZ2luLCB1c2UgdGhlIGBvZmZzZXRgIG1vZGlmaWVyLCBhcyB3ZWxsIGFzJywgJ3RoZSBgcGFkZGluZ2Agb3B0aW9uIGluIHRoZSBgcHJldmVudE92ZXJmbG93YCBhbmQgYGZsaXBgJywgJ21vZGlmaWVycy4nXS5qb2luKCcgJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJ1bk1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgLy8gU3luYyB1cGRhdGUg4oCTIGl0IHdpbGwgYWx3YXlzIGJlIGV4ZWN1dGVkLCBldmVuIGlmIG5vdCBuZWNlc3NhcnkuIFRoaXNcbiAgICAgIC8vIGlzIHVzZWZ1bCBmb3IgbG93IGZyZXF1ZW5jeSB1cGRhdGVzIHdoZXJlIHN5bmMgYmVoYXZpb3Igc2ltcGxpZmllcyB0aGVcbiAgICAgIC8vIGxvZ2ljLlxuICAgICAgLy8gRm9yIGhpZ2ggZnJlcXVlbmN5IHVwZGF0ZXMgKGUuZy4gYHJlc2l6ZWAgYW5kIGBzY3JvbGxgIGV2ZW50cyksIGFsd2F5c1xuICAgICAgLy8gcHJlZmVyIHRoZSBhc3luYyBQb3BwZXIjdXBkYXRlIG1ldGhvZFxuICAgICAgZm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGZvcmNlVXBkYXRlKCkge1xuICAgICAgICBpZiAoaXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX3N0YXRlJGVsZW1lbnRzID0gc3RhdGUuZWxlbWVudHMsXG4gICAgICAgICAgICByZWZlcmVuY2UgPSBfc3RhdGUkZWxlbWVudHMucmVmZXJlbmNlLFxuICAgICAgICAgICAgcG9wcGVyID0gX3N0YXRlJGVsZW1lbnRzLnBvcHBlcjsgLy8gRG9uJ3QgcHJvY2VlZCBpZiBgcmVmZXJlbmNlYCBvciBgcG9wcGVyYCBhcmUgbm90IHZhbGlkIGVsZW1lbnRzXG4gICAgICAgIC8vIGFueW1vcmVcblxuICAgICAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBTdG9yZSB0aGUgcmVmZXJlbmNlIGFuZCBwb3BwZXIgcmVjdHMgdG8gYmUgcmVhZCBieSBtb2RpZmllcnNcblxuXG4gICAgICAgIHN0YXRlLnJlY3RzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogZ2V0Q29tcG9zaXRlUmVjdChyZWZlcmVuY2UsIGdldE9mZnNldFBhcmVudChwb3BwZXIpLCBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5ID09PSAnZml4ZWQnKSxcbiAgICAgICAgICBwb3BwZXI6IGdldExheW91dFJlY3QocG9wcGVyKVxuICAgICAgICB9OyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXNldCB0aGUgY3VycmVudCB1cGRhdGUgY3ljbGUuIFRoZVxuICAgICAgICAvLyBtb3N0IGNvbW1vbiB1c2UgY2FzZSBmb3IgdGhpcyBpcyB0aGUgYGZsaXBgIG1vZGlmaWVyIGNoYW5naW5nIHRoZVxuICAgICAgICAvLyBwbGFjZW1lbnQsIHdoaWNoIHRoZW4gbmVlZHMgdG8gcmUtcnVuIGFsbCB0aGUgbW9kaWZpZXJzLCBiZWNhdXNlIHRoZVxuICAgICAgICAvLyBsb2dpYyB3YXMgcHJldmlvdXNseSByYW4gZm9yIHRoZSBwcmV2aW91cyBwbGFjZW1lbnQgYW5kIGlzIHRoZXJlZm9yZVxuICAgICAgICAvLyBzdGFsZS9pbmNvcnJlY3RcblxuICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5wbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDsgLy8gT24gZWFjaCB1cGRhdGUgY3ljbGUsIHRoZSBgbW9kaWZpZXJzRGF0YWAgcHJvcGVydHkgZm9yIGVhY2ggbW9kaWZpZXJcbiAgICAgICAgLy8gaXMgZmlsbGVkIHdpdGggdGhlIGluaXRpYWwgZGF0YSBzcGVjaWZpZWQgYnkgdGhlIG1vZGlmaWVyLiBUaGlzIG1lYW5zXG4gICAgICAgIC8vIGl0IGRvZXNuJ3QgcGVyc2lzdCBhbmQgaXMgZnJlc2ggb24gZWFjaCB1cGRhdGUuXG4gICAgICAgIC8vIFRvIGVuc3VyZSBwZXJzaXN0ZW50IGRhdGEsIHVzZSBgJHtuYW1lfSNwZXJzaXN0ZW50YFxuXG4gICAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgICAgICByZXR1cm4gc3RhdGUubW9kaWZpZXJzRGF0YVttb2RpZmllci5uYW1lXSA9IE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVyLmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIF9fZGVidWdfbG9vcHNfXyA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICAgICAgX19kZWJ1Z19sb29wc19fICs9IDE7XG5cbiAgICAgICAgICAgIGlmIChfX2RlYnVnX2xvb3BzX18gPiAxMDApIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihJTkZJTklURV9MT09QX0VSUk9SKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHN0YXRlLnJlc2V0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzdGF0ZS5yZXNldCA9IGZhbHNlO1xuICAgICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfc3RhdGUkb3JkZXJlZE1vZGlmaWUgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzW2luZGV4XSxcbiAgICAgICAgICAgICAgZm4gPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUuZm4sXG4gICAgICAgICAgICAgIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUub3B0aW9ucyxcbiAgICAgICAgICAgICAgX29wdGlvbnMgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID09PSB2b2lkIDAgPyB7fSA6IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIsXG4gICAgICAgICAgICAgIG5hbWUgPSBfc3RhdGUkb3JkZXJlZE1vZGlmaWUubmFtZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHN0YXRlID0gZm4oe1xuICAgICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICAgIG9wdGlvbnM6IF9vcHRpb25zLFxuICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2VcbiAgICAgICAgICAgIH0pIHx8IHN0YXRlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIEFzeW5jIGFuZCBvcHRpbWlzdGljYWxseSBvcHRpbWl6ZWQgdXBkYXRlIOKAkyBpdCB3aWxsIG5vdCBiZSBleGVjdXRlZCBpZlxuICAgICAgLy8gbm90IG5lY2Vzc2FyeSAoZGVib3VuY2VkIHRvIHJ1biBhdCBtb3N0IG9uY2UtcGVyLXRpY2spXG4gICAgICB1cGRhdGU6IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgaW5zdGFuY2UuZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgICByZXNvbHZlKHN0YXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgaXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIWFyZVZhbGlkRWxlbWVudHMocmVmZXJlbmNlLCBwb3BwZXIpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIGluc3RhbmNlLnNldE9wdGlvbnMob3B0aW9ucykudGhlbihmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgIGlmICghaXNEZXN0cm95ZWQgJiYgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKSB7XG4gICAgICAgIG9wdGlvbnMub25GaXJzdFVwZGF0ZShzdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgYmVmb3JlIHRoZSBmaXJzdFxuICAgIC8vIHVwZGF0ZSBjeWNsZSBydW5zLiBUaGV5IHdpbGwgYmUgZXhlY3V0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIHVwZGF0ZVxuICAgIC8vIGN5Y2xlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGEgbW9kaWZpZXIgYWRkcyBzb21lIHBlcnNpc3RlbnQgZGF0YSB0aGF0XG4gICAgLy8gb3RoZXIgbW9kaWZpZXJzIG5lZWQgdG8gdXNlLCBidXQgdGhlIG1vZGlmaWVyIGlzIHJ1biBhZnRlciB0aGUgZGVwZW5kZW50XG4gICAgLy8gb25lLlxuXG4gICAgZnVuY3Rpb24gcnVuTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICB2YXIgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgICAgICBfcmVmMyRvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfcmVmMyRvcHRpb25zID09PSB2b2lkIDAgPyB7fSA6IF9yZWYzJG9wdGlvbnMsXG4gICAgICAgICAgICBlZmZlY3QgPSBfcmVmMy5lZmZlY3Q7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlZmZlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2xlYW51cEZuID0gZWZmZWN0KHtcbiAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgbm9vcEZuID0gZnVuY3Rpb24gbm9vcEZuKCkge307XG5cbiAgICAgICAgICBlZmZlY3RDbGVhbnVwRm5zLnB1c2goY2xlYW51cEZuIHx8IG5vb3BGbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXBNb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHJldHVybiBmbigpO1xuICAgICAgfSk7XG4gICAgICBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9O1xufVxuZXhwb3J0IHZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKCk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgZGV0ZWN0T3ZlcmZsb3cgfTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VCeU5hbWUobW9kaWZpZXJzKSB7XG4gIHZhciBtZXJnZWQgPSBtb2RpZmllcnMucmVkdWNlKGZ1bmN0aW9uIChtZXJnZWQsIGN1cnJlbnQpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBtZXJnZWRbY3VycmVudC5uYW1lXTtcbiAgICBtZXJnZWRbY3VycmVudC5uYW1lXSA9IGV4aXN0aW5nID8gT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcsIGN1cnJlbnQsIHtcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLm9wdGlvbnMsIGN1cnJlbnQub3B0aW9ucyksXG4gICAgICBkYXRhOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5kYXRhLCBjdXJyZW50LmRhdGEpXG4gICAgfSkgOiBjdXJyZW50O1xuICAgIHJldHVybiBtZXJnZWQ7XG4gIH0sIHt9KTsgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IE9iamVjdC52YWx1ZXNcblxuICByZXR1cm4gT2JqZWN0LmtleXMobWVyZ2VkKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBtZXJnZWRba2V5XTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgcG9wcGVyR2VuZXJhdG9yLCBkZXRlY3RPdmVyZmxvdyB9IGZyb20gXCIuL2NyZWF0ZVBvcHBlci5qc1wiO1xuaW1wb3J0IGV2ZW50TGlzdGVuZXJzIGZyb20gXCIuL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qc1wiO1xuaW1wb3J0IHBvcHBlck9mZnNldHMgZnJvbSBcIi4vbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanNcIjtcbmltcG9ydCBjb21wdXRlU3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzXCI7XG5pbXBvcnQgYXBwbHlTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2FwcGx5U3R5bGVzLmpzXCI7XG5pbXBvcnQgb2Zmc2V0IGZyb20gXCIuL21vZGlmaWVycy9vZmZzZXQuanNcIjtcbmltcG9ydCBmbGlwIGZyb20gXCIuL21vZGlmaWVycy9mbGlwLmpzXCI7XG5pbXBvcnQgcHJldmVudE92ZXJmbG93IGZyb20gXCIuL21vZGlmaWVycy9wcmV2ZW50T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBhcnJvdyBmcm9tIFwiLi9tb2RpZmllcnMvYXJyb3cuanNcIjtcbmltcG9ydCBoaWRlIGZyb20gXCIuL21vZGlmaWVycy9oaWRlLmpzXCI7XG52YXIgZGVmYXVsdE1vZGlmaWVycyA9IFtldmVudExpc3RlbmVycywgcG9wcGVyT2Zmc2V0cywgY29tcHV0ZVN0eWxlcywgYXBwbHlTdHlsZXMsIG9mZnNldCwgZmxpcCwgcHJldmVudE92ZXJmbG93LCBhcnJvdywgaGlkZV07XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciBhcyBjcmVhdGVQb3BwZXJMaXRlIH0gZnJvbSBcIi4vcG9wcGVyLWxpdGUuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgKiBmcm9tIFwiLi9tb2RpZmllcnMvaW5kZXguanNcIjsiLCJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlc107XG52YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcih7XG4gIGRlZmF1bHRNb2RpZmllcnM6IGRlZmF1bHRNb2RpZmllcnNcbn0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGNyZWF0ZVBvcHBlciwgcG9wcGVyR2VuZXJhdG9yLCBkZWZhdWx0TW9kaWZpZXJzLCBkZXRlY3RPdmVyZmxvdyB9OyIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NS4xLjMgKGh0dHBzOi8vZ2V0Ym9vdHN0cmFwLmNvbS8pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAyMSBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAqL1xuaW1wb3J0ICogYXMgUG9wcGVyIGZyb20gJ0Bwb3BwZXJqcy9jb3JlJztcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL2luZGV4LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmNvbnN0IE1BWF9VSUQgPSAxMDAwMDAwO1xuY29uc3QgTUlMTElTRUNPTkRTX01VTFRJUExJRVIgPSAxMDAwO1xuY29uc3QgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuY29uc3QgdG9UeXBlID0gb2JqID0+IHtcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBgJHtvYmp9YDtcbiAgfVxuXG4gIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG59O1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogUHVibGljIFV0aWwgQXBpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuY29uc3QgZ2V0VUlEID0gcHJlZml4ID0+IHtcbiAgZG8ge1xuICAgIHByZWZpeCArPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBNQVhfVUlEKTtcbiAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgcmV0dXJuIHByZWZpeDtcbn07XG5cbmNvbnN0IGdldFNlbGVjdG9yID0gZWxlbWVudCA9PiB7XG4gIGxldCBzZWxlY3RvciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLXRhcmdldCcpO1xuXG4gIGlmICghc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09ICcjJykge1xuICAgIGxldCBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7IC8vIFRoZSBvbmx5IHZhbGlkIGNvbnRlbnQgdGhhdCBjb3VsZCBkb3VibGUgYXMgYSBzZWxlY3RvciBhcmUgSURzIG9yIGNsYXNzZXMsXG4gICAgLy8gc28gZXZlcnl0aGluZyBzdGFydGluZyB3aXRoIGAjYCBvciBgLmAuIElmIGEgXCJyZWFsXCIgVVJMIGlzIHVzZWQgYXMgdGhlIHNlbGVjdG9yLFxuICAgIC8vIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yYCB3aWxsIHJpZ2h0ZnVsbHkgY29tcGxhaW4gaXQgaXMgaW52YWxpZC5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2lzc3Vlcy8zMjI3M1xuXG4gICAgaWYgKCFocmVmQXR0ciB8fCAhaHJlZkF0dHIuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHIuc3RhcnRzV2l0aCgnLicpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIEp1c3QgaW4gY2FzZSBzb21lIENNUyBwdXRzIG91dCBhIGZ1bGwgVVJMIHdpdGggdGhlIGFuY2hvciBhcHBlbmRlZFxuXG5cbiAgICBpZiAoaHJlZkF0dHIuaW5jbHVkZXMoJyMnKSAmJiAhaHJlZkF0dHIuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICBocmVmQXR0ciA9IGAjJHtocmVmQXR0ci5zcGxpdCgnIycpWzFdfWA7XG4gICAgfVxuXG4gICAgc2VsZWN0b3IgPSBocmVmQXR0ciAmJiBocmVmQXR0ciAhPT0gJyMnID8gaHJlZkF0dHIudHJpbSgpIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBzZWxlY3Rvcjtcbn07XG5cbmNvbnN0IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcblxuICBpZiAoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IgPSBlbGVtZW50ID0+IHtcbiAgY29uc3Qgc2VsZWN0b3IgPSBnZXRTZWxlY3RvcihlbGVtZW50KTtcbiAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xufTtcblxuY29uc3QgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQgPSBlbGVtZW50ID0+IHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIDA7XG4gIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcblxuXG4gIGxldCB7XG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIHRyYW5zaXRpb25EZWxheVxuICB9ID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIGNvbnN0IGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgY29uc3QgZmxvYXRUcmFuc2l0aW9uRGVsYXkgPSBOdW1iZXIucGFyc2VGbG9hdCh0cmFuc2l0aW9uRGVsYXkpOyAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG5cbiAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiAmJiAhZmxvYXRUcmFuc2l0aW9uRGVsYXkpIHtcbiAgICByZXR1cm4gMDtcbiAgfSAvLyBJZiBtdWx0aXBsZSBkdXJhdGlvbnMgYXJlIGRlZmluZWQsIHRha2UgdGhlIGZpcnN0XG5cblxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb24uc3BsaXQoJywnKVswXTtcbiAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gIHJldHVybiAoTnVtYmVyLnBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIE51bWJlci5wYXJzZUZsb2F0KHRyYW5zaXRpb25EZWxheSkpICogTUlMTElTRUNPTkRTX01VTFRJUExJRVI7XG59O1xuXG5jb25zdCB0cmlnZ2VyVHJhbnNpdGlvbkVuZCA9IGVsZW1lbnQgPT4ge1xuICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFRSQU5TSVRJT05fRU5EKSk7XG59O1xuXG5jb25zdCBpc0VsZW1lbnQgPSBvYmogPT4ge1xuICBpZiAoIW9iaiB8fCB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBvYmogPSBvYmpbMF07XG4gIH1cblxuICByZXR1cm4gdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5jb25zdCBnZXRFbGVtZW50ID0gb2JqID0+IHtcbiAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgLy8gaXQncyBhIGpRdWVyeSBvYmplY3Qgb3IgYSBub2RlIGVsZW1lbnRcbiAgICByZXR1cm4gb2JqLmpxdWVyeSA/IG9ialswXSA6IG9iajtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyAmJiBvYmoubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9iaik7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn07XG5cbmNvbnN0IHR5cGVDaGVja0NvbmZpZyA9IChjb21wb25lbnROYW1lLCBjb25maWcsIGNvbmZpZ1R5cGVzKSA9PiB7XG4gIE9iamVjdC5rZXlzKGNvbmZpZ1R5cGVzKS5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICBjb25zdCBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xuICAgIGNvbnN0IHZhbHVlID0gY29uZmlnW3Byb3BlcnR5XTtcbiAgICBjb25zdCB2YWx1ZVR5cGUgPSB2YWx1ZSAmJiBpc0VsZW1lbnQodmFsdWUpID8gJ2VsZW1lbnQnIDogdG9UeXBlKHZhbHVlKTtcblxuICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7Y29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpfTogT3B0aW9uIFwiJHtwcm9wZXJ0eX1cIiBwcm92aWRlZCB0eXBlIFwiJHt2YWx1ZVR5cGV9XCIgYnV0IGV4cGVjdGVkIHR5cGUgXCIke2V4cGVjdGVkVHlwZXN9XCIuYCk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IGlzVmlzaWJsZSA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWlzRWxlbWVudChlbGVtZW50KSB8fCBlbGVtZW50LmdldENsaWVudFJlY3RzKCkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZSgndmlzaWJpbGl0eScpID09PSAndmlzaWJsZSc7XG59O1xuXG5jb25zdCBpc0Rpc2FibGVkID0gZWxlbWVudCA9PiB7XG4gIGlmICghZWxlbWVudCB8fCBlbGVtZW50Lm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIGVsZW1lbnQuZGlzYWJsZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQuZGlzYWJsZWQ7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgIT09ICdmYWxzZSc7XG59O1xuXG5jb25zdCBmaW5kU2hhZG93Um9vdCA9IGVsZW1lbnQgPT4ge1xuICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBDYW4gZmluZCB0aGUgc2hhZG93IHJvb3Qgb3RoZXJ3aXNlIGl0J2xsIHJldHVybiB0aGUgZG9jdW1lbnRcblxuXG4gIGlmICh0eXBlb2YgZWxlbWVudC5nZXRSb290Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IHJvb3QgPSBlbGVtZW50LmdldFJvb3ROb2RlKCk7XG4gICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gIH1cblxuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIFNoYWRvd1Jvb3QpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfSAvLyB3aGVuIHdlIGRvbid0IGZpbmQgYSBzaGFkb3cgcm9vdFxuXG5cbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBmaW5kU2hhZG93Um9vdChlbGVtZW50LnBhcmVudE5vZGUpO1xufTtcblxuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuLyoqXG4gKiBUcmljayB0byByZXN0YXJ0IGFuIGVsZW1lbnQncyBhbmltYXRpb25cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHZvaWRcbiAqXG4gKiBAc2VlIGh0dHBzOi8vd3d3LmNoYXJpc3RoZW8uaW8vYmxvZy8yMDIxLzAyL3Jlc3RhcnQtYS1jc3MtYW5pbWF0aW9uLXdpdGgtamF2YXNjcmlwdC8jcmVzdGFydGluZy1hLWNzcy1hbmltYXRpb25cbiAqL1xuXG5cbmNvbnN0IHJlZmxvdyA9IGVsZW1lbnQgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG4gIGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xufTtcblxuY29uc3QgZ2V0alF1ZXJ5ID0gKCkgPT4ge1xuICBjb25zdCB7XG4gICAgalF1ZXJ5XG4gIH0gPSB3aW5kb3c7XG5cbiAgaWYgKGpRdWVyeSAmJiAhZG9jdW1lbnQuYm9keS5oYXNBdHRyaWJ1dGUoJ2RhdGEtYnMtbm8tanF1ZXJ5JykpIHtcbiAgICByZXR1cm4galF1ZXJ5O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzID0gW107XG5cbmNvbnN0IG9uRE9NQ29udGVudExvYWRlZCA9IGNhbGxiYWNrID0+IHtcbiAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgIC8vIGFkZCBsaXN0ZW5lciBvbiB0aGUgZmlyc3QgY2FsbCB3aGVuIHRoZSBkb2N1bWVudCBpcyBpbiBsb2FkaW5nIHN0YXRlXG4gICAgaWYgKCFET01Db250ZW50TG9hZGVkQ2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IHtcbiAgICAgICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgRE9NQ29udGVudExvYWRlZENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjaygpO1xuICB9XG59O1xuXG5jb25zdCBpc1JUTCA9ICgpID0+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kaXIgPT09ICdydGwnO1xuXG5jb25zdCBkZWZpbmVKUXVlcnlQbHVnaW4gPSBwbHVnaW4gPT4ge1xuICBvbkRPTUNvbnRlbnRMb2FkZWQoKCkgPT4ge1xuICAgIGNvbnN0ICQgPSBnZXRqUXVlcnkoKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuICAgIGlmICgkKSB7XG4gICAgICBjb25zdCBuYW1lID0gcGx1Z2luLk5BTUU7XG4gICAgICBjb25zdCBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkLmZuW25hbWVdO1xuICAgICAgJC5mbltuYW1lXSA9IHBsdWdpbi5qUXVlcnlJbnRlcmZhY2U7XG4gICAgICAkLmZuW25hbWVdLkNvbnN0cnVjdG9yID0gcGx1Z2luO1xuXG4gICAgICAkLmZuW25hbWVdLm5vQ29uZmxpY3QgPSAoKSA9PiB7XG4gICAgICAgICQuZm5bbmFtZV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICAgIHJldHVybiBwbHVnaW4ualF1ZXJ5SW50ZXJmYWNlO1xuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufTtcblxuY29uc3QgZXhlY3V0ZSA9IGNhbGxiYWNrID0+IHtcbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cbn07XG5cbmNvbnN0IGV4ZWN1dGVBZnRlclRyYW5zaXRpb24gPSAoY2FsbGJhY2ssIHRyYW5zaXRpb25FbGVtZW50LCB3YWl0Rm9yVHJhbnNpdGlvbiA9IHRydWUpID0+IHtcbiAgaWYgKCF3YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgIGV4ZWN1dGUoY2FsbGJhY2spO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGR1cmF0aW9uUGFkZGluZyA9IDU7XG4gIGNvbnN0IGVtdWxhdGVkRHVyYXRpb24gPSBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0cmFuc2l0aW9uRWxlbWVudCkgKyBkdXJhdGlvblBhZGRpbmc7XG4gIGxldCBjYWxsZWQgPSBmYWxzZTtcblxuICBjb25zdCBoYW5kbGVyID0gKHtcbiAgICB0YXJnZXRcbiAgfSkgPT4ge1xuICAgIGlmICh0YXJnZXQgIT09IHRyYW5zaXRpb25FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGVkID0gdHJ1ZTtcbiAgICB0cmFuc2l0aW9uRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKTtcbiAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgfTtcblxuICB0cmFuc2l0aW9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFRSQU5TSVRJT05fRU5ELCBoYW5kbGVyKTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25FbGVtZW50KTtcbiAgICB9XG4gIH0sIGVtdWxhdGVkRHVyYXRpb24pO1xufTtcbi8qKlxuICogUmV0dXJuIHRoZSBwcmV2aW91cy9uZXh0IGVsZW1lbnQgb2YgYSBsaXN0LlxuICpcbiAqIEBwYXJhbSB7YXJyYXl9IGxpc3QgICAgVGhlIGxpc3Qgb2YgZWxlbWVudHNcbiAqIEBwYXJhbSBhY3RpdmVFbGVtZW50ICAgVGhlIGFjdGl2ZSBlbGVtZW50XG4gKiBAcGFyYW0gc2hvdWxkR2V0TmV4dCAgIENob29zZSB0byBnZXQgbmV4dCBvciBwcmV2aW91cyBlbGVtZW50XG4gKiBAcGFyYW0gaXNDeWNsZUFsbG93ZWRcbiAqIEByZXR1cm4ge0VsZW1lbnR8ZWxlbX0gVGhlIHByb3BlciBlbGVtZW50XG4gKi9cblxuXG5jb25zdCBnZXROZXh0QWN0aXZlRWxlbWVudCA9IChsaXN0LCBhY3RpdmVFbGVtZW50LCBzaG91bGRHZXROZXh0LCBpc0N5Y2xlQWxsb3dlZCkgPT4ge1xuICBsZXQgaW5kZXggPSBsaXN0LmluZGV4T2YoYWN0aXZlRWxlbWVudCk7IC8vIGlmIHRoZSBlbGVtZW50IGRvZXMgbm90IGV4aXN0IGluIHRoZSBsaXN0IHJldHVybiBhbiBlbGVtZW50IGRlcGVuZGluZyBvbiB0aGUgZGlyZWN0aW9uIGFuZCBpZiBjeWNsZSBpcyBhbGxvd2VkXG5cbiAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgIHJldHVybiBsaXN0WyFzaG91bGRHZXROZXh0ICYmIGlzQ3ljbGVBbGxvd2VkID8gbGlzdC5sZW5ndGggLSAxIDogMF07XG4gIH1cblxuICBjb25zdCBsaXN0TGVuZ3RoID0gbGlzdC5sZW5ndGg7XG4gIGluZGV4ICs9IHNob3VsZEdldE5leHQgPyAxIDogLTE7XG5cbiAgaWYgKGlzQ3ljbGVBbGxvd2VkKSB7XG4gICAgaW5kZXggPSAoaW5kZXggKyBsaXN0TGVuZ3RoKSAlIGxpc3RMZW5ndGg7XG4gIH1cblxuICByZXR1cm4gbGlzdFtNYXRoLm1heCgwLCBNYXRoLm1pbihpbmRleCwgbGlzdExlbmd0aCAtIDEpKV07XG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGRvbS9ldmVudC1oYW5kbGVyLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IG5hbWVzcGFjZVJlZ2V4ID0gL1teLl0qKD89XFwuLiopXFwufC4qLztcbmNvbnN0IHN0cmlwTmFtZVJlZ2V4ID0gL1xcLi4qLztcbmNvbnN0IHN0cmlwVWlkUmVnZXggPSAvOjpcXGQrJC87XG5jb25zdCBldmVudFJlZ2lzdHJ5ID0ge307IC8vIEV2ZW50cyBzdG9yYWdlXG5cbmxldCB1aWRFdmVudCA9IDE7XG5jb25zdCBjdXN0b21FdmVudHMgPSB7XG4gIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInLFxuICBtb3VzZWxlYXZlOiAnbW91c2VvdXQnXG59O1xuY29uc3QgY3VzdG9tRXZlbnRzUmVnZXggPSAvXihtb3VzZWVudGVyfG1vdXNlbGVhdmUpL2k7XG5jb25zdCBuYXRpdmVFdmVudHMgPSBuZXcgU2V0KFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2V1cCcsICdtb3VzZWRvd24nLCAnY29udGV4dG1lbnUnLCAnbW91c2V3aGVlbCcsICdET01Nb3VzZVNjcm9sbCcsICdtb3VzZW92ZXInLCAnbW91c2VvdXQnLCAnbW91c2Vtb3ZlJywgJ3NlbGVjdHN0YXJ0JywgJ3NlbGVjdGVuZCcsICdrZXlkb3duJywgJ2tleXByZXNzJywgJ2tleXVwJywgJ29yaWVudGF0aW9uY2hhbmdlJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJywgJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCcsICdwb2ludGVybGVhdmUnLCAncG9pbnRlcmNhbmNlbCcsICdnZXN0dXJlc3RhcnQnLCAnZ2VzdHVyZWNoYW5nZScsICdnZXN0dXJlZW5kJywgJ2ZvY3VzJywgJ2JsdXInLCAnY2hhbmdlJywgJ3Jlc2V0JywgJ3NlbGVjdCcsICdzdWJtaXQnLCAnZm9jdXNpbicsICdmb2N1c291dCcsICdsb2FkJywgJ3VubG9hZCcsICdiZWZvcmV1bmxvYWQnLCAncmVzaXplJywgJ21vdmUnLCAnRE9NQ29udGVudExvYWRlZCcsICdyZWFkeXN0YXRlY2hhbmdlJywgJ2Vycm9yJywgJ2Fib3J0JywgJ3Njcm9sbCddKTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBQcml2YXRlIG1ldGhvZHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmZ1bmN0aW9uIGdldFVpZEV2ZW50KGVsZW1lbnQsIHVpZCkge1xuICByZXR1cm4gdWlkICYmIGAke3VpZH06OiR7dWlkRXZlbnQrK31gIHx8IGVsZW1lbnQudWlkRXZlbnQgfHwgdWlkRXZlbnQrKztcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnQoZWxlbWVudCkge1xuICBjb25zdCB1aWQgPSBnZXRVaWRFdmVudChlbGVtZW50KTtcbiAgZWxlbWVudC51aWRFdmVudCA9IHVpZDtcbiAgZXZlbnRSZWdpc3RyeVt1aWRdID0gZXZlbnRSZWdpc3RyeVt1aWRdIHx8IHt9O1xuICByZXR1cm4gZXZlbnRSZWdpc3RyeVt1aWRdO1xufVxuXG5mdW5jdGlvbiBib290c3RyYXBIYW5kbGVyKGVsZW1lbnQsIGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSBlbGVtZW50O1xuXG4gICAgaWYgKGhhbmRsZXIub25lT2ZmKSB7XG4gICAgICBFdmVudEhhbmRsZXIub2ZmKGVsZW1lbnQsIGV2ZW50LnR5cGUsIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZm4uYXBwbHkoZWxlbWVudCwgW2V2ZW50XSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJvb3RzdHJhcERlbGVnYXRpb25IYW5kbGVyKGVsZW1lbnQsIHNlbGVjdG9yLCBmbikge1xuICByZXR1cm4gZnVuY3Rpb24gaGFuZGxlcihldmVudCkge1xuICAgIGNvbnN0IGRvbUVsZW1lbnRzID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcblxuICAgIGZvciAobGV0IHtcbiAgICAgIHRhcmdldFxuICAgIH0gPSBldmVudDsgdGFyZ2V0ICYmIHRhcmdldCAhPT0gdGhpczsgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGUpIHtcbiAgICAgIGZvciAobGV0IGkgPSBkb21FbGVtZW50cy5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgaWYgKGRvbUVsZW1lbnRzW2ldID09PSB0YXJnZXQpIHtcbiAgICAgICAgICBldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRhcmdldDtcblxuICAgICAgICAgIGlmIChoYW5kbGVyLm9uZU9mZikge1xuICAgICAgICAgICAgRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCBldmVudC50eXBlLCBzZWxlY3RvciwgZm4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0YXJnZXQsIFtldmVudF0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUbyBwbGVhc2UgRVNMaW50XG5cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmaW5kSGFuZGxlcihldmVudHMsIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3RvciA9IG51bGwpIHtcbiAgY29uc3QgdWlkRXZlbnRMaXN0ID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdWlkRXZlbnRMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbdWlkRXZlbnRMaXN0W2ldXTtcblxuICAgIGlmIChldmVudC5vcmlnaW5hbEhhbmRsZXIgPT09IGhhbmRsZXIgJiYgZXZlbnQuZGVsZWdhdGlvblNlbGVjdG9yID09PSBkZWxlZ2F0aW9uU2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgY29uc3QgZGVsZWdhdGlvbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJztcbiAgY29uc3Qgb3JpZ2luYWxIYW5kbGVyID0gZGVsZWdhdGlvbiA/IGRlbGVnYXRpb25GbiA6IGhhbmRsZXI7XG4gIGxldCB0eXBlRXZlbnQgPSBnZXRUeXBlRXZlbnQob3JpZ2luYWxUeXBlRXZlbnQpO1xuICBjb25zdCBpc05hdGl2ZSA9IG5hdGl2ZUV2ZW50cy5oYXModHlwZUV2ZW50KTtcblxuICBpZiAoIWlzTmF0aXZlKSB7XG4gICAgdHlwZUV2ZW50ID0gb3JpZ2luYWxUeXBlRXZlbnQ7XG4gIH1cblxuICByZXR1cm4gW2RlbGVnYXRpb24sIG9yaWdpbmFsSGFuZGxlciwgdHlwZUV2ZW50XTtcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlcihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCBvbmVPZmYpIHtcbiAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIWhhbmRsZXIpIHtcbiAgICBoYW5kbGVyID0gZGVsZWdhdGlvbkZuO1xuICAgIGRlbGVnYXRpb25GbiA9IG51bGw7XG4gIH0gLy8gaW4gY2FzZSBvZiBtb3VzZWVudGVyIG9yIG1vdXNlbGVhdmUgd3JhcCB0aGUgaGFuZGxlciB3aXRoaW4gYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBmb3IgaXRzIERPTSBwb3NpdGlvblxuICAvLyB0aGlzIHByZXZlbnRzIHRoZSBoYW5kbGVyIGZyb20gYmVpbmcgZGlzcGF0Y2hlZCB0aGUgc2FtZSB3YXkgYXMgbW91c2VvdmVyIG9yIG1vdXNlb3V0IGRvZXNcblxuXG4gIGlmIChjdXN0b21FdmVudHNSZWdleC50ZXN0KG9yaWdpbmFsVHlwZUV2ZW50KSkge1xuICAgIGNvbnN0IHdyYXBGbiA9IGZuID0+IHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnJlbGF0ZWRUYXJnZXQgIT09IGV2ZW50LmRlbGVnYXRlVGFyZ2V0ICYmICFldmVudC5kZWxlZ2F0ZVRhcmdldC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KSkge1xuICAgICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgaWYgKGRlbGVnYXRpb25Gbikge1xuICAgICAgZGVsZWdhdGlvbkZuID0gd3JhcEZuKGRlbGVnYXRpb25Gbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhhbmRsZXIgPSB3cmFwRm4oaGFuZGxlcik7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgW2RlbGVnYXRpb24sIG9yaWdpbmFsSGFuZGxlciwgdHlwZUV2ZW50XSA9IG5vcm1hbGl6ZVBhcmFtcyhvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKTtcbiAgY29uc3QgZXZlbnRzID0gZ2V0RXZlbnQoZWxlbWVudCk7XG4gIGNvbnN0IGhhbmRsZXJzID0gZXZlbnRzW3R5cGVFdmVudF0gfHwgKGV2ZW50c1t0eXBlRXZlbnRdID0ge30pO1xuICBjb25zdCBwcmV2aW91c0ZuID0gZmluZEhhbmRsZXIoaGFuZGxlcnMsIG9yaWdpbmFsSGFuZGxlciwgZGVsZWdhdGlvbiA/IGhhbmRsZXIgOiBudWxsKTtcblxuICBpZiAocHJldmlvdXNGbikge1xuICAgIHByZXZpb3VzRm4ub25lT2ZmID0gcHJldmlvdXNGbi5vbmVPZmYgJiYgb25lT2ZmO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHVpZCA9IGdldFVpZEV2ZW50KG9yaWdpbmFsSGFuZGxlciwgb3JpZ2luYWxUeXBlRXZlbnQucmVwbGFjZShuYW1lc3BhY2VSZWdleCwgJycpKTtcbiAgY29uc3QgZm4gPSBkZWxlZ2F0aW9uID8gYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIoZWxlbWVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSA6IGJvb3RzdHJhcEhhbmRsZXIoZWxlbWVudCwgaGFuZGxlcik7XG4gIGZuLmRlbGVnYXRpb25TZWxlY3RvciA9IGRlbGVnYXRpb24gPyBoYW5kbGVyIDogbnVsbDtcbiAgZm4ub3JpZ2luYWxIYW5kbGVyID0gb3JpZ2luYWxIYW5kbGVyO1xuICBmbi5vbmVPZmYgPSBvbmVPZmY7XG4gIGZuLnVpZEV2ZW50ID0gdWlkO1xuICBoYW5kbGVyc1t1aWRdID0gZm47XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlRXZlbnQsIGZuLCBkZWxlZ2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvblNlbGVjdG9yKSB7XG4gIGNvbnN0IGZuID0gZmluZEhhbmRsZXIoZXZlbnRzW3R5cGVFdmVudF0sIGhhbmRsZXIsIGRlbGVnYXRpb25TZWxlY3Rvcik7XG5cbiAgaWYgKCFmbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlRXZlbnQsIGZuLCBCb29sZWFuKGRlbGVnYXRpb25TZWxlY3RvcikpO1xuICBkZWxldGUgZXZlbnRzW3R5cGVFdmVudF1bZm4udWlkRXZlbnRdO1xufVxuXG5mdW5jdGlvbiByZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMoZWxlbWVudCwgZXZlbnRzLCB0eXBlRXZlbnQsIG5hbWVzcGFjZSkge1xuICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xuICBPYmplY3Qua2V5cyhzdG9yZUVsZW1lbnRFdmVudCkuZm9yRWFjaChoYW5kbGVyS2V5ID0+IHtcbiAgICBpZiAoaGFuZGxlcktleS5pbmNsdWRlcyhuYW1lc3BhY2UpKSB7XG4gICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2hhbmRsZXJLZXldO1xuICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgZXZlbnQub3JpZ2luYWxIYW5kbGVyLCBldmVudC5kZWxlZ2F0aW9uU2VsZWN0b3IpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVFdmVudChldmVudCkge1xuICAvLyBhbGxvdyB0byBnZXQgdGhlIG5hdGl2ZSBldmVudHMgZnJvbSBuYW1lc3BhY2VkIGV2ZW50cyAoJ2NsaWNrLmJzLmJ1dHRvbicgLS0+ICdjbGljaycpXG4gIGV2ZW50ID0gZXZlbnQucmVwbGFjZShzdHJpcE5hbWVSZWdleCwgJycpO1xuICByZXR1cm4gY3VzdG9tRXZlbnRzW2V2ZW50XSB8fCBldmVudDtcbn1cblxuY29uc3QgRXZlbnRIYW5kbGVyID0ge1xuICBvbihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gICAgYWRkSGFuZGxlcihlbGVtZW50LCBldmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuLCBmYWxzZSk7XG4gIH0sXG5cbiAgb25lKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pIHtcbiAgICBhZGRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4sIHRydWUpO1xuICB9LFxuXG4gIG9mZihlbGVtZW50LCBvcmlnaW5hbFR5cGVFdmVudCwgaGFuZGxlciwgZGVsZWdhdGlvbkZuKSB7XG4gICAgaWYgKHR5cGVvZiBvcmlnaW5hbFR5cGVFdmVudCAhPT0gJ3N0cmluZycgfHwgIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBbZGVsZWdhdGlvbiwgb3JpZ2luYWxIYW5kbGVyLCB0eXBlRXZlbnRdID0gbm9ybWFsaXplUGFyYW1zKG9yaWdpbmFsVHlwZUV2ZW50LCBoYW5kbGVyLCBkZWxlZ2F0aW9uRm4pO1xuICAgIGNvbnN0IGluTmFtZXNwYWNlID0gdHlwZUV2ZW50ICE9PSBvcmlnaW5hbFR5cGVFdmVudDtcbiAgICBjb25zdCBldmVudHMgPSBnZXRFdmVudChlbGVtZW50KTtcbiAgICBjb25zdCBpc05hbWVzcGFjZSA9IG9yaWdpbmFsVHlwZUV2ZW50LnN0YXJ0c1dpdGgoJy4nKTtcblxuICAgIGlmICh0eXBlb2Ygb3JpZ2luYWxIYW5kbGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gU2ltcGxlc3QgY2FzZTogaGFuZGxlciBpcyBwYXNzZWQsIHJlbW92ZSB0aGF0IGxpc3RlbmVyIE9OTFkuXG4gICAgICBpZiAoIWV2ZW50cyB8fCAhZXZlbnRzW3R5cGVFdmVudF0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZW1vdmVIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cywgdHlwZUV2ZW50LCBvcmlnaW5hbEhhbmRsZXIsIGRlbGVnYXRpb24gPyBoYW5kbGVyIDogbnVsbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzTmFtZXNwYWNlKSB7XG4gICAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goZWxlbWVudEV2ZW50ID0+IHtcbiAgICAgICAgcmVtb3ZlTmFtZXNwYWNlZEhhbmRsZXJzKGVsZW1lbnQsIGV2ZW50cywgZWxlbWVudEV2ZW50LCBvcmlnaW5hbFR5cGVFdmVudC5zbGljZSgxKSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBzdG9yZUVsZW1lbnRFdmVudCA9IGV2ZW50c1t0eXBlRXZlbnRdIHx8IHt9O1xuICAgIE9iamVjdC5rZXlzKHN0b3JlRWxlbWVudEV2ZW50KS5mb3JFYWNoKGtleUhhbmRsZXJzID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZXJLZXkgPSBrZXlIYW5kbGVycy5yZXBsYWNlKHN0cmlwVWlkUmVnZXgsICcnKTtcblxuICAgICAgaWYgKCFpbk5hbWVzcGFjZSB8fCBvcmlnaW5hbFR5cGVFdmVudC5pbmNsdWRlcyhoYW5kbGVyS2V5KSkge1xuICAgICAgICBjb25zdCBldmVudCA9IHN0b3JlRWxlbWVudEV2ZW50W2tleUhhbmRsZXJzXTtcbiAgICAgICAgcmVtb3ZlSGFuZGxlcihlbGVtZW50LCBldmVudHMsIHR5cGVFdmVudCwgZXZlbnQub3JpZ2luYWxIYW5kbGVyLCBldmVudC5kZWxlZ2F0aW9uU2VsZWN0b3IpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIHRyaWdnZXIoZWxlbWVudCwgZXZlbnQsIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJyB8fCAhZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgJCA9IGdldGpRdWVyeSgpO1xuICAgIGNvbnN0IHR5cGVFdmVudCA9IGdldFR5cGVFdmVudChldmVudCk7XG4gICAgY29uc3QgaW5OYW1lc3BhY2UgPSBldmVudCAhPT0gdHlwZUV2ZW50O1xuICAgIGNvbnN0IGlzTmF0aXZlID0gbmF0aXZlRXZlbnRzLmhhcyh0eXBlRXZlbnQpO1xuICAgIGxldCBqUXVlcnlFdmVudDtcbiAgICBsZXQgYnViYmxlcyA9IHRydWU7XG4gICAgbGV0IG5hdGl2ZURpc3BhdGNoID0gdHJ1ZTtcbiAgICBsZXQgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuICAgIGxldCBldnQgPSBudWxsO1xuXG4gICAgaWYgKGluTmFtZXNwYWNlICYmICQpIHtcbiAgICAgIGpRdWVyeUV2ZW50ID0gJC5FdmVudChldmVudCwgYXJncyk7XG4gICAgICAkKGVsZW1lbnQpLnRyaWdnZXIoalF1ZXJ5RXZlbnQpO1xuICAgICAgYnViYmxlcyA9ICFqUXVlcnlFdmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO1xuICAgICAgbmF0aXZlRGlzcGF0Y2ggPSAhalF1ZXJ5RXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTtcbiAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSBqUXVlcnlFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOYXRpdmUpIHtcbiAgICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdIVE1MRXZlbnRzJyk7XG4gICAgICBldnQuaW5pdEV2ZW50KHR5cGVFdmVudCwgYnViYmxlcywgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChldmVudCwge1xuICAgICAgICBidWJibGVzLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IC8vIG1lcmdlIGN1c3RvbSBpbmZvcm1hdGlvbiBpbiBvdXIgZXZlbnRcblxuXG4gICAgaWYgKHR5cGVvZiBhcmdzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgT2JqZWN0LmtleXMoYXJncykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZ0LCBrZXksIHtcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1trZXldO1xuICAgICAgICAgIH1cblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAobmF0aXZlRGlzcGF0Y2gpIHtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH1cblxuICAgIGlmIChldnQuZGVmYXVsdFByZXZlbnRlZCAmJiB0eXBlb2YgalF1ZXJ5RXZlbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBqUXVlcnlFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBldnQ7XG4gIH1cblxufTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBkb20vZGF0YS5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBlbGVtZW50TWFwID0gbmV3IE1hcCgpO1xuY29uc3QgRGF0YSA9IHtcbiAgc2V0KGVsZW1lbnQsIGtleSwgaW5zdGFuY2UpIHtcbiAgICBpZiAoIWVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICBlbGVtZW50TWFwLnNldChlbGVtZW50LCBuZXcgTWFwKCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlTWFwID0gZWxlbWVudE1hcC5nZXQoZWxlbWVudCk7IC8vIG1ha2UgaXQgY2xlYXIgd2Ugb25seSB3YW50IG9uZSBpbnN0YW5jZSBwZXIgZWxlbWVudFxuICAgIC8vIGNhbiBiZSByZW1vdmVkIGxhdGVyIHdoZW4gbXVsdGlwbGUga2V5L2luc3RhbmNlcyBhcmUgZmluZSB0byBiZSB1c2VkXG5cbiAgICBpZiAoIWluc3RhbmNlTWFwLmhhcyhrZXkpICYmIGluc3RhbmNlTWFwLnNpemUgIT09IDApIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLmVycm9yKGBCb290c3RyYXAgZG9lc24ndCBhbGxvdyBtb3JlIHRoYW4gb25lIGluc3RhbmNlIHBlciBlbGVtZW50LiBCb3VuZCBpbnN0YW5jZTogJHtBcnJheS5mcm9tKGluc3RhbmNlTWFwLmtleXMoKSlbMF19LmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGluc3RhbmNlTWFwLnNldChrZXksIGluc3RhbmNlKTtcbiAgfSxcblxuICBnZXQoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKGVsZW1lbnRNYXAuaGFzKGVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudE1hcC5nZXQoZWxlbWVudCkuZ2V0KGtleSkgfHwgbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcblxuICByZW1vdmUoZWxlbWVudCwga2V5KSB7XG4gICAgaWYgKCFlbGVtZW50TWFwLmhhcyhlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGluc3RhbmNlTWFwID0gZWxlbWVudE1hcC5nZXQoZWxlbWVudCk7XG4gICAgaW5zdGFuY2VNYXAuZGVsZXRlKGtleSk7IC8vIGZyZWUgdXAgZWxlbWVudCByZWZlcmVuY2VzIGlmIHRoZXJlIGFyZSBubyBpbnN0YW5jZXMgbGVmdCBmb3IgYW4gZWxlbWVudFxuXG4gICAgaWYgKGluc3RhbmNlTWFwLnNpemUgPT09IDApIHtcbiAgICAgIGVsZW1lbnRNYXAuZGVsZXRlKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGJhc2UtY29tcG9uZW50LmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IFZFUlNJT04gPSAnNS4xLjMnO1xuXG5jbGFzcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgIGVsZW1lbnQgPSBnZXRFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgRGF0YS5zZXQodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIERhdGEucmVtb3ZlKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpO1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpO1xuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpLmZvckVhY2gocHJvcGVydHlOYW1lID0+IHtcbiAgICAgIHRoaXNbcHJvcGVydHlOYW1lXSA9IG51bGw7XG4gICAgfSk7XG4gIH1cblxuICBfcXVldWVDYWxsYmFjayhjYWxsYmFjaywgZWxlbWVudCwgaXNBbmltYXRlZCA9IHRydWUpIHtcbiAgICBleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uKGNhbGxiYWNrLCBlbGVtZW50LCBpc0FuaW1hdGVkKTtcbiAgfVxuICAvKiogU3RhdGljICovXG5cblxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoZWxlbWVudCkge1xuICAgIHJldHVybiBEYXRhLmdldChnZXRFbGVtZW50KGVsZW1lbnQpLCB0aGlzLkRBVEFfS0VZKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIGNvbmZpZyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0SW5zdGFuY2UoZWxlbWVudCkgfHwgbmV3IHRoaXMoZWxlbWVudCwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgPyBjb25maWcgOiBudWxsKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgVkVSU0lPTigpIHtcbiAgICByZXR1cm4gVkVSU0lPTjtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBoYXZlIHRvIGltcGxlbWVudCB0aGUgc3RhdGljIG1ldGhvZCBcIk5BTUVcIiwgZm9yIGVhY2ggY29tcG9uZW50IScpO1xuICB9XG5cbiAgc3RhdGljIGdldCBEQVRBX0tFWSgpIHtcbiAgICByZXR1cm4gYGJzLiR7dGhpcy5OQU1FfWA7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEVWRU5UX0tFWSgpIHtcbiAgICByZXR1cm4gYC4ke3RoaXMuREFUQV9LRVl9YDtcbiAgfVxuXG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdXRpbC9jb21wb25lbnQtZnVuY3Rpb25zLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgZW5hYmxlRGlzbWlzc1RyaWdnZXIgPSAoY29tcG9uZW50LCBtZXRob2QgPSAnaGlkZScpID0+IHtcbiAgY29uc3QgY2xpY2tFdmVudCA9IGBjbGljay5kaXNtaXNzJHtjb21wb25lbnQuRVZFTlRfS0VZfWA7XG4gIGNvbnN0IG5hbWUgPSBjb21wb25lbnQuTkFNRTtcbiAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBjbGlja0V2ZW50LCBgW2RhdGEtYnMtZGlzbWlzcz1cIiR7bmFtZX1cIl1gLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoWydBJywgJ0FSRUEnXS5pbmNsdWRlcyh0aGlzLnRhZ05hbWUpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGFyZ2V0ID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0aGlzKSB8fCB0aGlzLmNsb3Nlc3QoYC4ke25hbWV9YCk7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBjb21wb25lbnQuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0YXJnZXQpOyAvLyBNZXRob2QgYXJndW1lbnQgaXMgbGVmdCwgZm9yIEFsZXJ0IGFuZCBvbmx5LCBhcyBpdCBkb2Vzbid0IGltcGxlbWVudCB0aGUgJ2hpZGUnIG1ldGhvZFxuXG4gICAgaW5zdGFuY2VbbWV0aG9kXSgpO1xuICB9KTtcbn07XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogYWxlcnQuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSRkID0gJ2FsZXJ0JztcbmNvbnN0IERBVEFfS0VZJGMgPSAnYnMuYWxlcnQnO1xuY29uc3QgRVZFTlRfS0VZJGMgPSBgLiR7REFUQV9LRVkkY31gO1xuY29uc3QgRVZFTlRfQ0xPU0UgPSBgY2xvc2Uke0VWRU5UX0tFWSRjfWA7XG5jb25zdCBFVkVOVF9DTE9TRUQgPSBgY2xvc2VkJHtFVkVOVF9LRVkkY31gO1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFJDUgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX1NIT1ckOCA9ICdzaG93Jztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBBbGVydCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSRkO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgY2xvc2UoKSB7XG4gICAgY29uc3QgY2xvc2VFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0NMT1NFKTtcblxuICAgIGlmIChjbG9zZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDgpO1xuXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQ1KTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soKCkgPT4gdGhpcy5fZGVzdHJveUVsZW1lbnQoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZCk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2Rlc3Ryb3lFbGVtZW50KCkge1xuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTE9TRUQpO1xuICAgIHRoaXMuZGlzcG9zZSgpO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBBbGVydC5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5lbmFibGVEaXNtaXNzVHJpZ2dlcihBbGVydCwgJ2Nsb3NlJyk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQWxlcnQgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQWxlcnQpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGJ1dHRvbi5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJGMgPSAnYnV0dG9uJztcbmNvbnN0IERBVEFfS0VZJGIgPSAnYnMuYnV0dG9uJztcbmNvbnN0IEVWRU5UX0tFWSRiID0gYC4ke0RBVEFfS0VZJGJ9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ3ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSQzID0gJ2FjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1ID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvblwiXSc7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQ2ID0gYGNsaWNrJHtFVkVOVF9LRVkkYn0ke0RBVEFfQVBJX0tFWSQ3fWA7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgQnV0dG9uIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIC8vIEdldHRlcnNcbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGM7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUoKSB7XG4gICAgLy8gVG9nZ2xlIGNsYXNzIGFuZCBzeW5jIHRoZSBgYXJpYS1wcmVzc2VkYCBhdHRyaWJ1dGUgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBgLnRvZ2dsZSgpYCBtZXRob2RcbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKENMQVNTX05BTUVfQUNUSVZFJDMpKTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gQnV0dG9uLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG5cbiAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDYsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDUsIGV2ZW50ID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgY29uc3QgYnV0dG9uID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoU0VMRUNUT1JfREFUQV9UT0dHTEUkNSk7XG4gIGNvbnN0IGRhdGEgPSBCdXR0b24uZ2V0T3JDcmVhdGVJbnN0YW5jZShidXR0b24pO1xuICBkYXRhLnRvZ2dsZSgpO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQnV0dG9uIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKEJ1dHRvbik7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogZG9tL21hbmlwdWxhdG9yLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURhdGEodmFsKSB7XG4gIGlmICh2YWwgPT09ICd0cnVlJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHZhbCA9PT0gJ2ZhbHNlJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmICh2YWwgPT09IE51bWJlcih2YWwpLnRvU3RyaW5nKCkpIHtcbiAgICByZXR1cm4gTnVtYmVyKHZhbCk7XG4gIH1cblxuICBpZiAodmFsID09PSAnJyB8fCB2YWwgPT09ICdudWxsJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplRGF0YUtleShrZXkpIHtcbiAgcmV0dXJuIGtleS5yZXBsYWNlKC9bQS1aXS9nLCBjaHIgPT4gYC0ke2Noci50b0xvd2VyQ2FzZSgpfWApO1xufVxuXG5jb25zdCBNYW5pcHVsYXRvciA9IHtcbiAgc2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXksIHZhbHVlKSB7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoYGRhdGEtYnMtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCwgdmFsdWUpO1xuICB9LFxuXG4gIHJlbW92ZURhdGFBdHRyaWJ1dGUoZWxlbWVudCwga2V5KSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYGRhdGEtYnMtJHtub3JtYWxpemVEYXRhS2V5KGtleSl9YCk7XG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZXMoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyhlbGVtZW50LmRhdGFzZXQpLmZpbHRlcihrZXkgPT4ga2V5LnN0YXJ0c1dpdGgoJ2JzJykpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGxldCBwdXJlS2V5ID0ga2V5LnJlcGxhY2UoL15icy8sICcnKTtcbiAgICAgIHB1cmVLZXkgPSBwdXJlS2V5LmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgcHVyZUtleS5zbGljZSgxLCBwdXJlS2V5Lmxlbmd0aCk7XG4gICAgICBhdHRyaWJ1dGVzW3B1cmVLZXldID0gbm9ybWFsaXplRGF0YShlbGVtZW50LmRhdGFzZXRba2V5XSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGF0dHJpYnV0ZXM7XG4gIH0sXG5cbiAgZ2V0RGF0YUF0dHJpYnV0ZShlbGVtZW50LCBrZXkpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplRGF0YShlbGVtZW50LmdldEF0dHJpYnV0ZShgZGF0YS1icy0ke25vcm1hbGl6ZURhdGFLZXkoa2V5KX1gKSk7XG4gIH0sXG5cbiAgb2Zmc2V0KGVsZW1lbnQpIHtcbiAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldFxuICAgIH07XG4gIH0sXG5cbiAgcG9zaXRpb24oZWxlbWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgICAgbGVmdDogZWxlbWVudC5vZmZzZXRMZWZ0XG4gICAgfTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGRvbS9zZWxlY3Rvci1lbmdpbmUuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgTk9ERV9URVhUID0gMztcbmNvbnN0IFNlbGVjdG9yRW5naW5lID0ge1xuICBmaW5kKHNlbGVjdG9yLCBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCguLi5FbGVtZW50LnByb3RvdHlwZS5xdWVyeVNlbGVjdG9yQWxsLmNhbGwoZWxlbWVudCwgc2VsZWN0b3IpKTtcbiAgfSxcblxuICBmaW5kT25lKHNlbGVjdG9yLCBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLnF1ZXJ5U2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG4gIH0sXG5cbiAgY2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gW10uY29uY2F0KC4uLmVsZW1lbnQuY2hpbGRyZW4pLmZpbHRlcihjaGlsZCA9PiBjaGlsZC5tYXRjaGVzKHNlbGVjdG9yKSk7XG4gIH0sXG5cbiAgcGFyZW50cyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGNvbnN0IHBhcmVudHMgPSBbXTtcbiAgICBsZXQgYW5jZXN0b3IgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICB3aGlsZSAoYW5jZXN0b3IgJiYgYW5jZXN0b3Iubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGFuY2VzdG9yLm5vZGVUeXBlICE9PSBOT0RFX1RFWFQpIHtcbiAgICAgIGlmIChhbmNlc3Rvci5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICBwYXJlbnRzLnB1c2goYW5jZXN0b3IpO1xuICAgICAgfVxuXG4gICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudE5vZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmVudHM7XG4gIH0sXG5cbiAgcHJldihlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIGxldCBwcmV2aW91cyA9IGVsZW1lbnQucHJldmlvdXNFbGVtZW50U2libGluZztcblxuICAgIHdoaWxlIChwcmV2aW91cykge1xuICAgICAgaWYgKHByZXZpb3VzLm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBbcHJldmlvdXNdO1xuICAgICAgfVxuXG4gICAgICBwcmV2aW91cyA9IHByZXZpb3VzLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9LFxuXG4gIG5leHQoZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgICBsZXQgbmV4dCA9IGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKG5leHQpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBbbmV4dF07XG4gICAgICB9XG5cbiAgICAgIG5leHQgPSBuZXh0Lm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH0sXG5cbiAgZm9jdXNhYmxlQ2hpbGRyZW4oZWxlbWVudCkge1xuICAgIGNvbnN0IGZvY3VzYWJsZXMgPSBbJ2EnLCAnYnV0dG9uJywgJ2lucHV0JywgJ3RleHRhcmVhJywgJ3NlbGVjdCcsICdkZXRhaWxzJywgJ1t0YWJpbmRleF0nLCAnW2NvbnRlbnRlZGl0YWJsZT1cInRydWVcIl0nXS5tYXAoc2VsZWN0b3IgPT4gYCR7c2VsZWN0b3J9Om5vdChbdGFiaW5kZXhePVwiLVwiXSlgKS5qb2luKCcsICcpO1xuICAgIHJldHVybiB0aGlzLmZpbmQoZm9jdXNhYmxlcywgZWxlbWVudCkuZmlsdGVyKGVsID0+ICFpc0Rpc2FibGVkKGVsKSAmJiBpc1Zpc2libGUoZWwpKTtcbiAgfVxuXG59O1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGNhcm91c2VsLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkYiA9ICdjYXJvdXNlbCc7XG5jb25zdCBEQVRBX0tFWSRhID0gJ2JzLmNhcm91c2VsJztcbmNvbnN0IEVWRU5UX0tFWSRhID0gYC4ke0RBVEFfS0VZJGF9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ2ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBBUlJPV19MRUZUX0tFWSA9ICdBcnJvd0xlZnQnO1xuY29uc3QgQVJST1dfUklHSFRfS0VZID0gJ0Fycm93UmlnaHQnO1xuY29uc3QgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbmNvbnN0IFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xuY29uc3QgRGVmYXVsdCRhID0ge1xuICBpbnRlcnZhbDogNTAwMCxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHNsaWRlOiBmYWxzZSxcbiAgcGF1c2U6ICdob3ZlcicsXG4gIHdyYXA6IHRydWUsXG4gIHRvdWNoOiB0cnVlXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkYSA9IHtcbiAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAga2V5Ym9hcmQ6ICdib29sZWFuJyxcbiAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgd3JhcDogJ2Jvb2xlYW4nLFxuICB0b3VjaDogJ2Jvb2xlYW4nXG59O1xuY29uc3QgT1JERVJfTkVYVCA9ICduZXh0JztcbmNvbnN0IE9SREVSX1BSRVYgPSAncHJldic7XG5jb25zdCBESVJFQ1RJT05fTEVGVCA9ICdsZWZ0JztcbmNvbnN0IERJUkVDVElPTl9SSUdIVCA9ICdyaWdodCc7XG5jb25zdCBLRVlfVE9fRElSRUNUSU9OID0ge1xuICBbQVJST1dfTEVGVF9LRVldOiBESVJFQ1RJT05fUklHSFQsXG4gIFtBUlJPV19SSUdIVF9LRVldOiBESVJFQ1RJT05fTEVGVFxufTtcbmNvbnN0IEVWRU5UX1NMSURFID0gYHNsaWRlJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfU0xJRCA9IGBzbGlkJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfS0VZRE9XTiA9IGBrZXlkb3duJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfTU9VU0VFTlRFUiA9IGBtb3VzZWVudGVyJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfTU9VU0VMRUFWRSA9IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfVE9VQ0hTVEFSVCA9IGB0b3VjaHN0YXJ0JHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfVE9VQ0hNT1ZFID0gYHRvdWNobW92ZSR7RVZFTlRfS0VZJGF9YDtcbmNvbnN0IEVWRU5UX1RPVUNIRU5EID0gYHRvdWNoZW5kJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfUE9JTlRFUkRPV04gPSBgcG9pbnRlcmRvd24ke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9QT0lOVEVSVVAgPSBgcG9pbnRlcnVwJHtFVkVOVF9LRVkkYX1gO1xuY29uc3QgRVZFTlRfRFJBR19TVEFSVCA9IGBkcmFnc3RhcnQke0VWRU5UX0tFWSRhfWA7XG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJJDIgPSBgbG9hZCR7RVZFTlRfS0VZJGF9JHtEQVRBX0FQSV9LRVkkNn1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNSA9IGBjbGljayR7RVZFTlRfS0VZJGF9JHtEQVRBX0FQSV9LRVkkNn1gO1xuY29uc3QgQ0xBU1NfTkFNRV9DQVJPVVNFTCA9ICdjYXJvdXNlbCc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSQyID0gJ2FjdGl2ZSc7XG5jb25zdCBDTEFTU19OQU1FX1NMSURFID0gJ3NsaWRlJztcbmNvbnN0IENMQVNTX05BTUVfRU5EID0gJ2Nhcm91c2VsLWl0ZW0tZW5kJztcbmNvbnN0IENMQVNTX05BTUVfU1RBUlQgPSAnY2Fyb3VzZWwtaXRlbS1zdGFydCc7XG5jb25zdCBDTEFTU19OQU1FX05FWFQgPSAnY2Fyb3VzZWwtaXRlbS1uZXh0JztcbmNvbnN0IENMQVNTX05BTUVfUFJFViA9ICdjYXJvdXNlbC1pdGVtLXByZXYnO1xuY29uc3QgQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UID0gJ3BvaW50ZXItZXZlbnQnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFJDEgPSAnLmFjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVfSVRFTSA9ICcuYWN0aXZlLmNhcm91c2VsLWl0ZW0nO1xuY29uc3QgU0VMRUNUT1JfSVRFTSA9ICcuY2Fyb3VzZWwtaXRlbSc7XG5jb25zdCBTRUxFQ1RPUl9JVEVNX0lNRyA9ICcuY2Fyb3VzZWwtaXRlbSBpbWcnO1xuY29uc3QgU0VMRUNUT1JfTkVYVF9QUkVWID0gJy5jYXJvdXNlbC1pdGVtLW5leHQsIC5jYXJvdXNlbC1pdGVtLXByZXYnO1xuY29uc3QgU0VMRUNUT1JfSU5ESUNBVE9SUyA9ICcuY2Fyb3VzZWwtaW5kaWNhdG9ycyc7XG5jb25zdCBTRUxFQ1RPUl9JTkRJQ0FUT1IgPSAnW2RhdGEtYnMtdGFyZ2V0XSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NMSURFID0gJ1tkYXRhLWJzLXNsaWRlXSwgW2RhdGEtYnMtc2xpZGUtdG9dJztcbmNvbnN0IFNFTEVDVE9SX0RBVEFfUklERSA9ICdbZGF0YS1icy1yaWRlPVwiY2Fyb3VzZWxcIl0nO1xuY29uc3QgUE9JTlRFUl9UWVBFX1RPVUNIID0gJ3RvdWNoJztcbmNvbnN0IFBPSU5URVJfVFlQRV9QRU4gPSAncGVuJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDYXJvdXNlbCBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgdGhpcy50b3VjaFRpbWVvdXQgPSBudWxsO1xuICAgIHRoaXMudG91Y2hTdGFydFggPSAwO1xuICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9JTkRJQ0FUT1JTLCB0aGlzLl9lbGVtZW50KTtcbiAgICB0aGlzLl90b3VjaFN1cHBvcnRlZCA9ICdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuICAgIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCRhO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJGI7XG4gIH0gLy8gUHVibGljXG5cblxuICBuZXh0KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX05FWFQpO1xuICB9XG5cbiAgbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgIC8vIERvbid0IGNhbGwgbmV4dCB3aGVuIHRoZSBwYWdlIGlzbid0IHZpc2libGVcbiAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgaWYgKCFkb2N1bWVudC5oaWRkZW4gJiYgaXNWaXNpYmxlKHRoaXMuX2VsZW1lbnQpKSB7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICB9XG4gIH1cblxuICBwcmV2KCkge1xuICAgIHRoaXMuX3NsaWRlKE9SREVSX1BSRVYpO1xuICB9XG5cbiAgcGF1c2UoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSB7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfTkVYVF9QUkVWLCB0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XG4gICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgIH1cblxuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgfVxuXG4gIGN5Y2xlKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcgJiYgdGhpcy5fY29uZmlnLmludGVydmFsICYmICF0aGlzLl9pc1BhdXNlZCkge1xuICAgICAgdGhpcy5fdXBkYXRlSW50ZXJ2YWwoKTtcblxuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgfVxuICB9XG5cbiAgdG8oaW5kZXgpIHtcbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG5cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uZSh0aGlzLl9lbGVtZW50LCBFVkVOVF9TTElELCAoKSA9PiB0aGlzLnRvKGluZGV4KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG9yZGVyID0gaW5kZXggPiBhY3RpdmVJbmRleCA/IE9SREVSX05FWFQgOiBPUkRFUl9QUkVWO1xuXG4gICAgdGhpcy5fc2xpZGUob3JkZXIsIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkYSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSRiLCBjb25maWcsIERlZmF1bHRUeXBlJGEpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfaGFuZGxlU3dpcGUoKSB7XG4gICAgY29uc3QgYWJzRGVsdGF4ID0gTWF0aC5hYnModGhpcy50b3VjaERlbHRhWCk7XG5cbiAgICBpZiAoYWJzRGVsdGF4IDw9IFNXSVBFX1RIUkVTSE9MRCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGFic0RlbHRheCAvIHRoaXMudG91Y2hEZWx0YVg7XG4gICAgdGhpcy50b3VjaERlbHRhWCA9IDA7XG5cbiAgICBpZiAoIWRpcmVjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiA+IDAgPyBESVJFQ1RJT05fUklHSFQgOiBESVJFQ1RJT05fTEVGVCk7XG4gIH1cblxuICBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV04sIGV2ZW50ID0+IHRoaXMuX2tleWRvd24oZXZlbnQpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VFTlRFUiwgZXZlbnQgPT4gdGhpcy5wYXVzZShldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX01PVVNFTEVBVkUsIGV2ZW50ID0+IHRoaXMuY3ljbGUoZXZlbnQpKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnRvdWNoICYmIHRoaXMuX3RvdWNoU3VwcG9ydGVkKSB7XG4gICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuICB9XG5cbiAgX2FkZFRvdWNoRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgaGFzUG9pbnRlclBlblRvdWNoID0gZXZlbnQgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuX3BvaW50ZXJFdmVudCAmJiAoZXZlbnQucG9pbnRlclR5cGUgPT09IFBPSU5URVJfVFlQRV9QRU4gfHwgZXZlbnQucG9pbnRlclR5cGUgPT09IFBPSU5URVJfVFlQRV9UT1VDSCk7XG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXJ0ID0gZXZlbnQgPT4ge1xuICAgICAgaWYgKGhhc1BvaW50ZXJQZW5Ub3VjaChldmVudCkpIHtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50LmNsaWVudFg7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgdGhpcy50b3VjaFN0YXJ0WCA9IGV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgbW92ZSA9IGV2ZW50ID0+IHtcbiAgICAgIC8vIGVuc3VyZSBzd2lwaW5nIHdpdGggb25lIHRvdWNoIGFuZCBub3QgcGluY2hpbmdcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSBldmVudC50b3VjaGVzICYmIGV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSA/IDAgOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFggLSB0aGlzLnRvdWNoU3RhcnRYO1xuICAgIH07XG5cbiAgICBjb25zdCBlbmQgPSBldmVudCA9PiB7XG4gICAgICBpZiAoaGFzUG9pbnRlclBlblRvdWNoKGV2ZW50KSkge1xuICAgICAgICB0aGlzLnRvdWNoRGVsdGFYID0gZXZlbnQuY2xpZW50WCAtIHRoaXMudG91Y2hTdGFydFg7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hhbmRsZVN3aXBlKCk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcucGF1c2UgPT09ICdob3ZlcicpIHtcbiAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gd291bGQgc3RvcCBjeWNsaW5nIHVudGlsIHVzZXIgdGFwcGVkIG91dCBvZiBpdDtcbiAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgLy8gaXMgTk9UIGZpcmVkKSBhbmQgYWZ0ZXIgYSB0aW1lb3V0ICh0byBhbGxvdyBmb3IgbW91c2UgY29tcGF0aWJpbGl0eVxuICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuXG4gICAgICAgIGlmICh0aGlzLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoVGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZXZlbnQgPT4gdGhpcy5jeWNsZShldmVudCksIFRPVUNIRVZFTlRfQ09NUEFUX1dBSVQgKyB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU1fSU1HLCB0aGlzLl9lbGVtZW50KS5mb3JFYWNoKGl0ZW1JbWcgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKGl0ZW1JbWcsIEVWRU5UX0RSQUdfU1RBUlQsIGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX3BvaW50ZXJFdmVudCkge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJET1dOLCBldmVudCA9PiBzdGFydChldmVudCkpO1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1BPSU5URVJVUCwgZXZlbnQgPT4gZW5kKGV2ZW50KSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1BPSU5URVJfRVZFTlQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfVE9VQ0hTVEFSVCwgZXZlbnQgPT4gc3RhcnQoZXZlbnQpKTtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSE1PVkUsIGV2ZW50ID0+IG1vdmUoZXZlbnQpKTtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9UT1VDSEVORCwgZXZlbnQgPT4gZW5kKGV2ZW50KSk7XG4gICAgfVxuICB9XG5cbiAgX2tleWRvd24oZXZlbnQpIHtcbiAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBLRVlfVE9fRElSRUNUSU9OW2V2ZW50LmtleV07XG5cbiAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRJdGVtSW5kZXgoZWxlbWVudCkge1xuICAgIHRoaXMuX2l0ZW1zID0gZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUgPyBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0lURU0sIGVsZW1lbnQucGFyZW50Tm9kZSkgOiBbXTtcbiAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgfVxuXG4gIF9nZXRJdGVtQnlPcmRlcihvcmRlciwgYWN0aXZlRWxlbWVudCkge1xuICAgIGNvbnN0IGlzTmV4dCA9IG9yZGVyID09PSBPUkRFUl9ORVhUO1xuICAgIHJldHVybiBnZXROZXh0QWN0aXZlRWxlbWVudCh0aGlzLl9pdGVtcywgYWN0aXZlRWxlbWVudCwgaXNOZXh0LCB0aGlzLl9jb25maWcud3JhcCk7XG4gIH1cblxuICBfdHJpZ2dlclNsaWRlRXZlbnQocmVsYXRlZFRhcmdldCwgZXZlbnREaXJlY3Rpb25OYW1lKSB7XG4gICAgY29uc3QgdGFyZ2V0SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgocmVsYXRlZFRhcmdldCk7XG5cbiAgICBjb25zdCBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCkpO1xuXG4gICAgcmV0dXJuIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NMSURFLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIF9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGVsZW1lbnQpIHtcbiAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGFjdGl2ZUluZGljYXRvciA9IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfQUNUSVZFJDEsIHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtcbiAgICAgIGFjdGl2ZUluZGljYXRvci5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgYWN0aXZlSW5kaWNhdG9yLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gICAgICBjb25zdCBpbmRpY2F0b3JzID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9JTkRJQ0FUT1IsIHRoaXMuX2luZGljYXRvcnNFbGVtZW50KTtcblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2F0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChOdW1iZXIucGFyc2VJbnQoaW5kaWNhdG9yc1tpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKSwgMTApID09PSB0aGlzLl9nZXRJdGVtSW5kZXgoZWxlbWVudCkpIHtcbiAgICAgICAgICBpbmRpY2F0b3JzW2ldLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICAgICAgaW5kaWNhdG9yc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfdXBkYXRlSW50ZXJ2YWwoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX2FjdGl2ZUVsZW1lbnQgfHwgU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9BQ1RJVkVfSVRFTSwgdGhpcy5fZWxlbWVudCk7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50SW50ZXJ2YWwgPSBOdW1iZXIucGFyc2VJbnQoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgaWYgKGVsZW1lbnRJbnRlcnZhbCkge1xuICAgICAgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gZWxlbWVudEludGVydmFsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jb25maWcuaW50ZXJ2YWwgPSB0aGlzLl9jb25maWcuZGVmYXVsdEludGVydmFsIHx8IHRoaXMuX2NvbmZpZy5pbnRlcnZhbDtcbiAgICB9XG4gIH1cblxuICBfc2xpZGUoZGlyZWN0aW9uT3JPcmRlciwgZWxlbWVudCkge1xuICAgIGNvbnN0IG9yZGVyID0gdGhpcy5fZGlyZWN0aW9uVG9PcmRlcihkaXJlY3Rpb25Pck9yZGVyKTtcblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0FDVElWRV9JVEVNLCB0aGlzLl9lbGVtZW50KTtcblxuICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLl9nZXRJdGVtQnlPcmRlcihvcmRlciwgYWN0aXZlRWxlbWVudCk7XG5cbiAgICBjb25zdCBuZXh0RWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KG5leHRFbGVtZW50KTtcblxuICAgIGNvbnN0IGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgIGNvbnN0IGlzTmV4dCA9IG9yZGVyID09PSBPUkRFUl9ORVhUO1xuICAgIGNvbnN0IGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9TVEFSVCA6IENMQVNTX05BTUVfRU5EO1xuICAgIGNvbnN0IG9yZGVyQ2xhc3NOYW1lID0gaXNOZXh0ID8gQ0xBU1NfTkFNRV9ORVhUIDogQ0xBU1NfTkFNRV9QUkVWO1xuXG4gICAgY29uc3QgZXZlbnREaXJlY3Rpb25OYW1lID0gdGhpcy5fb3JkZXJUb0RpcmVjdGlvbihvcmRlcik7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgJiYgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFJDIpKSB7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuXG4gICAgaWYgKHNsaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgIC8vIFNvbWUgd2VpcmRuZXNzIGlzIGhhcHBlbmluZywgc28gd2UgYmFpbFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2xpZGluZyA9IHRydWU7XG5cbiAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICB0aGlzLl9hY3RpdmVFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG5cbiAgICBjb25zdCB0cmlnZ2VyU2xpZEV2ZW50ID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0xJRCwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBuZXh0RWxlbWVudCxcbiAgICAgICAgZGlyZWN0aW9uOiBldmVudERpcmVjdGlvbk5hbWUsXG4gICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgdG86IG5leHRFbGVtZW50SW5kZXhcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TTElERSkpIHtcbiAgICAgIG5leHRFbGVtZW50LmNsYXNzTGlzdC5hZGQob3JkZXJDbGFzc05hbWUpO1xuICAgICAgcmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcblxuICAgICAgY29uc3QgY29tcGxldGVDYWxsQmFjayA9ICgpID0+IHtcbiAgICAgICAgbmV4dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShkaXJlY3Rpb25hbENsYXNzTmFtZSwgb3JkZXJDbGFzc05hbWUpO1xuICAgICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMiwgb3JkZXJDbGFzc05hbWUsIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHNldFRpbWVvdXQodHJpZ2dlclNsaWRFdmVudCwgMCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlQ2FsbEJhY2ssIGFjdGl2ZUVsZW1lbnQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICBuZXh0RWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0cmlnZ2VyU2xpZEV2ZW50KCk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgdGhpcy5jeWNsZSgpO1xuICAgIH1cbiAgfVxuXG4gIF9kaXJlY3Rpb25Ub09yZGVyKGRpcmVjdGlvbikge1xuICAgIGlmICghW0RJUkVDVElPTl9SSUdIVCwgRElSRUNUSU9OX0xFRlRdLmluY2x1ZGVzKGRpcmVjdGlvbikpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9MRUZUID8gT1JERVJfUFJFViA6IE9SREVSX05FWFQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gRElSRUNUSU9OX0xFRlQgPyBPUkRFUl9ORVhUIDogT1JERVJfUFJFVjtcbiAgfVxuXG4gIF9vcmRlclRvRGlyZWN0aW9uKG9yZGVyKSB7XG4gICAgaWYgKCFbT1JERVJfTkVYVCwgT1JERVJfUFJFVl0uaW5jbHVkZXMob3JkZXIpKSB7XG4gICAgICByZXR1cm4gb3JkZXI7XG4gICAgfVxuXG4gICAgaWYgKGlzUlRMKCkpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgIH1cblxuICAgIHJldHVybiBvcmRlciA9PT0gT1JERVJfUFJFViA/IERJUkVDVElPTl9SSUdIVCA6IERJUkVDVElPTl9MRUZUO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGNhcm91c2VsSW50ZXJmYWNlKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIGNvbnN0IGRhdGEgPSBDYXJvdXNlbC5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1lbnQsIGNvbmZpZyk7XG4gICAgbGV0IHtcbiAgICAgIF9jb25maWdcbiAgICB9ID0gZGF0YTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgX2NvbmZpZyA9IHsgLi4uX2NvbmZpZyxcbiAgICAgICAgLi4uY29uZmlnXG4gICAgICB9O1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnID8gY29uZmlnIDogX2NvbmZpZy5zbGlkZTtcblxuICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgZGF0YS50byhjb25maWcpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2FjdGlvbn1cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2FjdGlvbl0oKTtcbiAgICB9IGVsc2UgaWYgKF9jb25maWcuaW50ZXJ2YWwgJiYgX2NvbmZpZy5yaWRlKSB7XG4gICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIENhcm91c2VsLmNhcm91c2VsSW50ZXJmYWNlKHRoaXMsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcyk7XG5cbiAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0NBUk9VU0VMKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHsgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGFyZ2V0KSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMpXG4gICAgfTtcbiAgICBjb25zdCBzbGlkZUluZGV4ID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtc2xpZGUtdG8nKTtcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBDYXJvdXNlbC5jYXJvdXNlbEludGVyZmFjZSh0YXJnZXQsIGNvbmZpZyk7XG5cbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgQ2Fyb3VzZWwuZ2V0SW5zdGFuY2UodGFyZ2V0KS50byhzbGlkZUluZGV4KTtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDUsIFNFTEVDVE9SX0RBVEFfU0xJREUsIENhcm91c2VsLmRhdGFBcGlDbGlja0hhbmRsZXIpO1xuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSQyLCAoKSA9PiB7XG4gIGNvbnN0IGNhcm91c2VscyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9SSURFKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY2Fyb3VzZWxzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgQ2Fyb3VzZWwuY2Fyb3VzZWxJbnRlcmZhY2UoY2Fyb3VzZWxzW2ldLCBDYXJvdXNlbC5nZXRJbnN0YW5jZShjYXJvdXNlbHNbaV0pKTtcbiAgfVxufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQ2Fyb3VzZWwgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ2Fyb3VzZWwpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGNvbGxhcHNlLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkYSA9ICdjb2xsYXBzZSc7XG5jb25zdCBEQVRBX0tFWSQ5ID0gJ2JzLmNvbGxhcHNlJztcbmNvbnN0IEVWRU5UX0tFWSQ5ID0gYC4ke0RBVEFfS0VZJDl9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ1ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBEZWZhdWx0JDkgPSB7XG4gIHRvZ2dsZTogdHJ1ZSxcbiAgcGFyZW50OiBudWxsXG59O1xuY29uc3QgRGVmYXVsdFR5cGUkOSA9IHtcbiAgdG9nZ2xlOiAnYm9vbGVhbicsXG4gIHBhcmVudDogJyhudWxsfGVsZW1lbnQpJ1xufTtcbmNvbnN0IEVWRU5UX1NIT1ckNSA9IGBzaG93JHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfU0hPV04kNSA9IGBzaG93biR7RVZFTlRfS0VZJDl9YDtcbmNvbnN0IEVWRU5UX0hJREUkNSA9IGBoaWRlJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfSElEREVOJDUgPSBgaGlkZGVuJHtFVkVOVF9LRVkkOX1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCA9IGBjbGljayR7RVZFTlRfS0VZJDl9JHtEQVRBX0FQSV9LRVkkNX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDcgPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX0NPTExBUFNFID0gJ2NvbGxhcHNlJztcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0lORyA9ICdjb2xsYXBzaW5nJztcbmNvbnN0IENMQVNTX05BTUVfQ09MTEFQU0VEID0gJ2NvbGxhcHNlZCc7XG5jb25zdCBDTEFTU19OQU1FX0RFRVBFUl9DSElMRFJFTiA9IGA6c2NvcGUgLiR7Q0xBU1NfTkFNRV9DT0xMQVBTRX0gLiR7Q0xBU1NfTkFNRV9DT0xMQVBTRX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9IT1JJWk9OVEFMID0gJ2NvbGxhcHNlLWhvcml6b250YWwnO1xuY29uc3QgV0lEVEggPSAnd2lkdGgnO1xuY29uc3QgSEVJR0hUID0gJ2hlaWdodCc7XG5jb25zdCBTRUxFQ1RPUl9BQ1RJVkVTID0gJy5jb2xsYXBzZS5zaG93LCAuY29sbGFwc2UuY29sbGFwc2luZyc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0ID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImNvbGxhcHNlXCJdJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBDb2xsYXBzZSBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXTtcbiAgICBjb25zdCB0b2dnbGVMaXN0ID0gU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0KTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjb25zdCBlbGVtID0gdG9nZ2xlTGlzdFtpXTtcbiAgICAgIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcbiAgICAgIGNvbnN0IGZpbHRlckVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kKHNlbGVjdG9yKS5maWx0ZXIoZm91bmRFbGVtID0+IGZvdW5kRWxlbSA9PT0gdGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiBmaWx0ZXJFbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuXG4gICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGVsZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2luaXRpYWxpemVDaGlsZHJlbigpO1xuXG4gICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fdHJpZ2dlckFycmF5LCB0aGlzLl9pc1Nob3duKCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH1cbiAgfSAvLyBHZXR0ZXJzXG5cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQkOTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSRhO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgdG9nZ2xlKCkge1xuICAgIGlmICh0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGFjdGl2ZXMgPSBbXTtcbiAgICBsZXQgYWN0aXZlc0RhdGE7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnBhcmVudCkge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kKENMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOLCB0aGlzLl9jb25maWcucGFyZW50KTtcbiAgICAgIGFjdGl2ZXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRVMsIHRoaXMuX2NvbmZpZy5wYXJlbnQpLmZpbHRlcihlbGVtID0+ICFjaGlsZHJlbi5pbmNsdWRlcyhlbGVtKSk7IC8vIHJlbW92ZSBjaGlsZHJlbiBpZiBncmVhdGVyIGRlcHRoXG4gICAgfVxuXG4gICAgY29uc3QgY29udGFpbmVyID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZSh0aGlzLl9zZWxlY3Rvcik7XG5cbiAgICBpZiAoYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IHRlbXBBY3RpdmVEYXRhID0gYWN0aXZlcy5maW5kKGVsZW0gPT4gY29udGFpbmVyICE9PSBlbGVtKTtcbiAgICAgIGFjdGl2ZXNEYXRhID0gdGVtcEFjdGl2ZURhdGEgPyBDb2xsYXBzZS5nZXRJbnN0YW5jZSh0ZW1wQWN0aXZlRGF0YSkgOiBudWxsO1xuXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhcnRFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1ckNSk7XG5cbiAgICBpZiAoc3RhcnRFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYWN0aXZlcy5mb3JFYWNoKGVsZW1BY3RpdmUgPT4ge1xuICAgICAgaWYgKGNvbnRhaW5lciAhPT0gZWxlbUFjdGl2ZSkge1xuICAgICAgICBDb2xsYXBzZS5nZXRPckNyZWF0ZUluc3RhbmNlKGVsZW1BY3RpdmUsIHtcbiAgICAgICAgICB0b2dnbGU6IGZhbHNlXG4gICAgICAgIH0pLmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhY3RpdmVzRGF0YSkge1xuICAgICAgICBEYXRhLnNldChlbGVtQWN0aXZlLCBEQVRBX0tFWSQ5LCBudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGRpbWVuc2lvbiA9IHRoaXMuX2dldERpbWVuc2lvbigpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX3RyaWdnZXJBcnJheSwgdHJ1ZSk7XG5cbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFLCBDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04kNSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgY29uc3Qgc2Nyb2xsU2l6ZSA9IGBzY3JvbGwke2NhcGl0YWxpemVkRGltZW5zaW9ufWA7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0cnVlKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IGAke3RoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV19cHhgO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFydEV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSQ1KTtcblxuICAgIGlmIChzdGFydEV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IGAke3RoaXMuX2VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbZGltZW5zaW9uXX1weGA7XG4gICAgcmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0lORyk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTRSwgQ0xBU1NfTkFNRV9TSE9XJDcpO1xuXG4gICAgY29uc3QgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHRyaWdnZXIgPSB0aGlzLl90cmlnZ2VyQXJyYXlbaV07XG4gICAgICBjb25zdCBlbGVtID0gZ2V0RWxlbWVudEZyb21TZWxlY3Rvcih0cmlnZ2VyKTtcblxuICAgICAgaWYgKGVsZW0gJiYgIXRoaXMuX2lzU2hvd24oZWxlbSkpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKFt0cmlnZ2VyXSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQ09MTEFQU0UpO1xuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4kNSk7XG4gICAgfTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBfaXNTaG93bihlbGVtZW50ID0gdGhpcy5fZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckNyk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkOSxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgICBjb25maWcudG9nZ2xlID0gQm9vbGVhbihjb25maWcudG9nZ2xlKTsgLy8gQ29lcmNlIHN0cmluZyB2YWx1ZXNcblxuICAgIGNvbmZpZy5wYXJlbnQgPSBnZXRFbGVtZW50KGNvbmZpZy5wYXJlbnQpO1xuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJGEsIGNvbmZpZywgRGVmYXVsdFR5cGUkOSk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9nZXREaW1lbnNpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfSE9SSVpPTlRBTCkgPyBXSURUSCA6IEhFSUdIVDtcbiAgfVxuXG4gIF9pbml0aWFsaXplQ2hpbGRyZW4oKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcucGFyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY2hpbGRyZW4gPSBTZWxlY3RvckVuZ2luZS5maW5kKENMQVNTX05BTUVfREVFUEVSX0NISUxEUkVOLCB0aGlzLl9jb25maWcucGFyZW50KTtcbiAgICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQsIHRoaXMuX2NvbmZpZy5wYXJlbnQpLmZpbHRlcihlbGVtID0+ICFjaGlsZHJlbi5pbmNsdWRlcyhlbGVtKSkuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkID0gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KTtcblxuICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhbZWxlbWVudF0sIHRoaXMuX2lzU2hvd24oc2VsZWN0ZWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModHJpZ2dlckFycmF5LCBpc09wZW4pIHtcbiAgICBpZiAoIXRyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmlnZ2VyQXJyYXkuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgIGlmIChpc09wZW4pIHtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQ09MTEFQU0VEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0NPTExBUFNFRCk7XG4gICAgICB9XG5cbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKTtcbiAgICB9KTtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBfY29uZmlnID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgX2NvbmZpZy50b2dnbGUgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGF0YSA9IENvbGxhcHNlLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgX2NvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCwgU0VMRUNUT1JfREFUQV9UT0dHTEUkNCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIC8vIHByZXZlbnREZWZhdWx0IG9ubHkgZm9yIDxhPiBlbGVtZW50cyAod2hpY2ggY2hhbmdlIHRoZSBVUkwpIG5vdCBpbnNpZGUgdGhlIGNvbGxhcHNpYmxlIGVsZW1lbnRcbiAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lID09PSAnQScgfHwgZXZlbnQuZGVsZWdhdGVUYXJnZXQgJiYgZXZlbnQuZGVsZWdhdGVUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGNvbnN0IHNlbGVjdG9yID0gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgY29uc3Qgc2VsZWN0b3JFbGVtZW50cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IpO1xuICBzZWxlY3RvckVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgQ29sbGFwc2UuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbGVtZW50LCB7XG4gICAgICB0b2dnbGU6IGZhbHNlXG4gICAgfSkudG9nZ2xlKCk7XG4gIH0pO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuQ29sbGFwc2UgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oQ29sbGFwc2UpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IGRyb3Bkb3duLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkOSA9ICdkcm9wZG93bic7XG5jb25zdCBEQVRBX0tFWSQ4ID0gJ2JzLmRyb3Bkb3duJztcbmNvbnN0IEVWRU5UX0tFWSQ4ID0gYC4ke0RBVEFfS0VZJDh9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQ0ID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFU0NBUEVfS0VZJDIgPSAnRXNjYXBlJztcbmNvbnN0IFNQQUNFX0tFWSA9ICdTcGFjZSc7XG5jb25zdCBUQUJfS0VZJDEgPSAnVGFiJztcbmNvbnN0IEFSUk9XX1VQX0tFWSA9ICdBcnJvd1VwJztcbmNvbnN0IEFSUk9XX0RPV05fS0VZID0gJ0Fycm93RG93bic7XG5jb25zdCBSSUdIVF9NT1VTRV9CVVRUT04gPSAyOyAvLyBNb3VzZUV2ZW50LmJ1dHRvbiB2YWx1ZSBmb3IgdGhlIHNlY29uZGFyeSBidXR0b24sIHVzdWFsbHkgdGhlIHJpZ2h0IGJ1dHRvblxuXG5jb25zdCBSRUdFWFBfS0VZRE9XTiA9IG5ldyBSZWdFeHAoYCR7QVJST1dfVVBfS0VZfXwke0FSUk9XX0RPV05fS0VZfXwke0VTQ0FQRV9LRVkkMn1gKTtcbmNvbnN0IEVWRU5UX0hJREUkNCA9IGBoaWRlJHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfSElEREVOJDQgPSBgaGlkZGVuJHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfU0hPVyQ0ID0gYHNob3cke0VWRU5UX0tFWSQ4fWA7XG5jb25zdCBFVkVOVF9TSE9XTiQ0ID0gYHNob3duJHtFVkVOVF9LRVkkOH1gO1xuY29uc3QgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMyA9IGBjbGljayR7RVZFTlRfS0VZJDh9JHtEQVRBX0FQSV9LRVkkNH1gO1xuY29uc3QgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSA9IGBrZXlkb3duJHtFVkVOVF9LRVkkOH0ke0RBVEFfQVBJX0tFWSQ0fWA7XG5jb25zdCBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IGBrZXl1cCR7RVZFTlRfS0VZJDh9JHtEQVRBX0FQSV9LRVkkNH1gO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDYgPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX0RST1BVUCA9ICdkcm9wdXAnO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRU5EID0gJ2Ryb3BlbmQnO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QU1RBUlQgPSAnZHJvcHN0YXJ0JztcbmNvbnN0IENMQVNTX05BTUVfTkFWQkFSID0gJ25hdmJhcic7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzID0gJ1tkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCJdJztcbmNvbnN0IFNFTEVDVE9SX01FTlUgPSAnLmRyb3Bkb3duLW1lbnUnO1xuY29uc3QgU0VMRUNUT1JfTkFWQkFSX05BViA9ICcubmF2YmFyLW5hdic7XG5jb25zdCBTRUxFQ1RPUl9WSVNJQkxFX0lURU1TID0gJy5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpOm5vdCg6ZGlzYWJsZWQpJztcbmNvbnN0IFBMQUNFTUVOVF9UT1AgPSBpc1JUTCgpID8gJ3RvcC1lbmQnIDogJ3RvcC1zdGFydCc7XG5jb25zdCBQTEFDRU1FTlRfVE9QRU5EID0gaXNSVEwoKSA/ICd0b3Atc3RhcnQnIDogJ3RvcC1lbmQnO1xuY29uc3QgUExBQ0VNRU5UX0JPVFRPTSA9IGlzUlRMKCkgPyAnYm90dG9tLWVuZCcgOiAnYm90dG9tLXN0YXJ0JztcbmNvbnN0IFBMQUNFTUVOVF9CT1RUT01FTkQgPSBpc1JUTCgpID8gJ2JvdHRvbS1zdGFydCcgOiAnYm90dG9tLWVuZCc7XG5jb25zdCBQTEFDRU1FTlRfUklHSFQgPSBpc1JUTCgpID8gJ2xlZnQtc3RhcnQnIDogJ3JpZ2h0LXN0YXJ0JztcbmNvbnN0IFBMQUNFTUVOVF9MRUZUID0gaXNSVEwoKSA/ICdyaWdodC1zdGFydCcgOiAnbGVmdC1zdGFydCc7XG5jb25zdCBEZWZhdWx0JDggPSB7XG4gIG9mZnNldDogWzAsIDJdLFxuICBib3VuZGFyeTogJ2NsaXBwaW5nUGFyZW50cycsXG4gIHJlZmVyZW5jZTogJ3RvZ2dsZScsXG4gIGRpc3BsYXk6ICdkeW5hbWljJyxcbiAgcG9wcGVyQ29uZmlnOiBudWxsLFxuICBhdXRvQ2xvc2U6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ4ID0ge1xuICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudHxvYmplY3QpJyxcbiAgZGlzcGxheTogJ3N0cmluZycsXG4gIHBvcHBlckNvbmZpZzogJyhudWxsfG9iamVjdHxmdW5jdGlvbiknLFxuICBhdXRvQ2xvc2U6ICcoYm9vbGVhbnxzdHJpbmcpJ1xufTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBEcm9wZG93biBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG4gIH0gLy8gR2V0dGVyc1xuXG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDg7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERlZmF1bHRUeXBlKCkge1xuICAgIHJldHVybiBEZWZhdWx0VHlwZSQ4O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDk7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzU2hvd24oKSA/IHRoaXMuaGlkZSgpIDogdGhpcy5zaG93KCk7XG4gIH1cblxuICBzaG93KCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8IHRoaXMuX2lzU2hvd24odGhpcy5fbWVudSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgIH07XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQ0LCByZWxhdGVkVGFyZ2V0KTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhcmVudCA9IERyb3Bkb3duLmdldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpOyAvLyBUb3RhbGx5IGRpc2FibGUgUG9wcGVyIGZvciBEcm9wZG93bnMgaW4gTmF2YmFyXG5cbiAgICBpZiAodGhpcy5faW5OYXZiYXIpIHtcbiAgICAgIE1hbmlwdWxhdG9yLnNldERhdGFBdHRyaWJ1dGUodGhpcy5fbWVudSwgJ3BvcHBlcicsICdub25lJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2NyZWF0ZVBvcHBlcihwYXJlbnQpO1xuICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgdG8gdGhlIGJvZHkncyBpbW1lZGlhdGUgY2hpbGRyZW47XG4gICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAhcGFyZW50LmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSX05BVikpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9uKGVsZW0sICdtb3VzZW92ZXInLCBub29wKSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgIHRoaXMuX21lbnUuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckNik7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuXG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04kNCwgcmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmIChpc0Rpc2FibGVkKHRoaXMuX2VsZW1lbnQpIHx8ICF0aGlzLl9pc1Nob3duKHRoaXMuX21lbnUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9O1xuXG4gICAgdGhpcy5fY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICB0aGlzLl9wb3BwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgaWYgKHRoaXMuX3BvcHBlcikge1xuICAgICAgdGhpcy5fcG9wcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfSAvLyBQcml2YXRlXG5cblxuICBfY29tcGxldGVIaWRlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBoaWRlRXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURFJDQsIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgaWYgKGhpZGVFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW0gPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtLCAnbW91c2VvdmVyJywgbm9vcCkpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbWVudS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyQ2KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckNik7XG5cbiAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsICdmYWxzZScpO1xuXG4gICAgTWFuaXB1bGF0b3IucmVtb3ZlRGF0YUF0dHJpYnV0ZSh0aGlzLl9tZW51LCAncG9wcGVyJyk7XG4gICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOJDQsIHJlbGF0ZWRUYXJnZXQpO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uY29uZmlnXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ5LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuXG4gICAgaWYgKHR5cGVvZiBjb25maWcucmVmZXJlbmNlID09PSAnb2JqZWN0JyAmJiAhaXNFbGVtZW50KGNvbmZpZy5yZWZlcmVuY2UpICYmIHR5cGVvZiBjb25maWcucmVmZXJlbmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gUG9wcGVyIHZpcnR1YWwgZWxlbWVudHMgcmVxdWlyZSBhIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBtZXRob2RcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7TkFNRSQ5LnRvVXBwZXJDYXNlKCl9OiBPcHRpb24gXCJyZWZlcmVuY2VcIiBwcm92aWRlZCB0eXBlIFwib2JqZWN0XCIgd2l0aG91dCBhIHJlcXVpcmVkIFwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0XCIgbWV0aG9kLmApO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfY3JlYXRlUG9wcGVyKHBhcmVudCkge1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyBkcm9wZG93bnMgcmVxdWlyZSBQb3BwZXIgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICB9XG5cbiAgICBsZXQgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgfSBlbHNlIGlmIChpc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBnZXRFbGVtZW50KHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuX2NvbmZpZy5yZWZlcmVuY2UgPT09ICdvYmplY3QnKSB7XG4gICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZTtcbiAgICB9XG5cbiAgICBjb25zdCBwb3BwZXJDb25maWcgPSB0aGlzLl9nZXRQb3BwZXJDb25maWcoKTtcblxuICAgIGNvbnN0IGlzRGlzcGxheVN0YXRpYyA9IHBvcHBlckNvbmZpZy5tb2RpZmllcnMuZmluZChtb2RpZmllciA9PiBtb2RpZmllci5uYW1lID09PSAnYXBwbHlTdHlsZXMnICYmIG1vZGlmaWVyLmVuYWJsZWQgPT09IGZhbHNlKTtcbiAgICB0aGlzLl9wb3BwZXIgPSBQb3BwZXIuY3JlYXRlUG9wcGVyKHJlZmVyZW5jZUVsZW1lbnQsIHRoaXMuX21lbnUsIHBvcHBlckNvbmZpZyk7XG5cbiAgICBpZiAoaXNEaXNwbGF5U3RhdGljKSB7XG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKHRoaXMuX21lbnUsICdwb3BwZXInLCAnc3RhdGljJyk7XG4gICAgfVxuICB9XG5cbiAgX2lzU2hvd24oZWxlbWVudCA9IHRoaXMuX2VsZW1lbnQpIHtcbiAgICByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XJDYpO1xuICB9XG5cbiAgX2dldE1lbnVFbGVtZW50KCkge1xuICAgIHJldHVybiBTZWxlY3RvckVuZ2luZS5uZXh0KHRoaXMuX2VsZW1lbnQsIFNFTEVDVE9SX01FTlUpWzBdO1xuICB9XG5cbiAgX2dldFBsYWNlbWVudCgpIHtcbiAgICBjb25zdCBwYXJlbnREcm9wZG93biA9IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QRU5EKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9SSUdIVDtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50RHJvcGRvd24uY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUFNUQVJUKSkge1xuICAgICAgcmV0dXJuIFBMQUNFTUVOVF9MRUZUO1xuICAgIH0gLy8gV2UgbmVlZCB0byB0cmltIHRoZSB2YWx1ZSBiZWNhdXNlIGN1c3RvbSBwcm9wZXJ0aWVzIGNhbiBhbHNvIGluY2x1ZGUgc3BhY2VzXG5cblxuICAgIGNvbnN0IGlzRW5kID0gZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLl9tZW51KS5nZXRQcm9wZXJ0eVZhbHVlKCctLWJzLXBvc2l0aW9uJykudHJpbSgpID09PSAnZW5kJztcblxuICAgIGlmIChwYXJlbnREcm9wZG93bi5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9EUk9QVVApKSB7XG4gICAgICByZXR1cm4gaXNFbmQgPyBQTEFDRU1FTlRfVE9QRU5EIDogUExBQ0VNRU5UX1RPUDtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNFbmQgPyBQTEFDRU1FTlRfQk9UVE9NRU5EIDogUExBQ0VNRU5UX0JPVFRPTTtcbiAgfVxuXG4gIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xvc2VzdChgLiR7Q0xBU1NfTkFNRV9OQVZCQVJ9YCkgIT09IG51bGw7XG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9mZnNldFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsID0+IE51bWJlci5wYXJzZUludCh2YWwsIDEwKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZygpIHtcbiAgICBjb25zdCBkZWZhdWx0QnNQb3BwZXJDb25maWcgPSB7XG4gICAgICBwbGFjZW1lbnQ6IHRoaXMuX2dldFBsYWNlbWVudCgpLFxuICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KClcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9OyAvLyBEaXNhYmxlIFBvcHBlciBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcblxuICAgIGlmICh0aGlzLl9jb25maWcuZGlzcGxheSA9PT0gJ3N0YXRpYycpIHtcbiAgICAgIGRlZmF1bHRCc1BvcHBlckNvbmZpZy5tb2RpZmllcnMgPSBbe1xuICAgICAgICBuYW1lOiAnYXBwbHlTdHlsZXMnLFxuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgLi4uZGVmYXVsdEJzUG9wcGVyQ29uZmlnLFxuICAgICAgLi4uKHR5cGVvZiB0aGlzLl9jb25maWcucG9wcGVyQ29uZmlnID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyhkZWZhdWx0QnNQb3BwZXJDb25maWcpIDogdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZylcbiAgICB9O1xuICB9XG5cbiAgX3NlbGVjdE1lbnVJdGVtKHtcbiAgICBrZXksXG4gICAgdGFyZ2V0XG4gIH0pIHtcbiAgICBjb25zdCBpdGVtcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfVklTSUJMRV9JVEVNUywgdGhpcy5fbWVudSkuZmlsdGVyKGlzVmlzaWJsZSk7XG5cbiAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gaWYgdGFyZ2V0IGlzbid0IGluY2x1ZGVkIGluIGl0ZW1zIChlLmcuIHdoZW4gZXhwYW5kaW5nIHRoZSBkcm9wZG93bilcbiAgICAvLyBhbGxvdyBjeWNsaW5nIHRvIGdldCB0aGUgbGFzdCBpdGVtIGluIGNhc2Uga2V5IGVxdWFscyBBUlJPV19VUF9LRVlcblxuXG4gICAgZ2V0TmV4dEFjdGl2ZUVsZW1lbnQoaXRlbXMsIHRhcmdldCwga2V5ID09PSBBUlJPV19ET1dOX0tFWSwgIWl0ZW1zLmluY2x1ZGVzKHRhcmdldCkpLmZvY3VzKCk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICB9XG5cbiAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGNsZWFyTWVudXMoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LmJ1dHRvbiA9PT0gUklHSFRfTU9VU0VfQlVUVE9OIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ICE9PSBUQUJfS0VZJDEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlcyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfREFUQV9UT0dHTEUkMyk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdG9nZ2xlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgY29uc3QgY29udGV4dCA9IERyb3Bkb3duLmdldEluc3RhbmNlKHRvZ2dsZXNbaV0pO1xuXG4gICAgICBpZiAoIWNvbnRleHQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udGV4dC5faXNTaG93bigpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBjb250ZXh0Ll9lbGVtZW50XG4gICAgICB9O1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgY29uc3QgY29tcG9zZWRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoKCk7XG4gICAgICAgIGNvbnN0IGlzTWVudVRhcmdldCA9IGNvbXBvc2VkUGF0aC5pbmNsdWRlcyhjb250ZXh0Ll9tZW51KTtcblxuICAgICAgICBpZiAoY29tcG9zZWRQYXRoLmluY2x1ZGVzKGNvbnRleHQuX2VsZW1lbnQpIHx8IGNvbnRleHQuX2NvbmZpZy5hdXRvQ2xvc2UgPT09ICdpbnNpZGUnICYmICFpc01lbnVUYXJnZXQgfHwgY29udGV4dC5fY29uZmlnLmF1dG9DbG9zZSA9PT0gJ291dHNpZGUnICYmIGlzTWVudVRhcmdldCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IC8vIFRhYiBuYXZpZ2F0aW9uIHRocm91Z2ggdGhlIGRyb3Bkb3duIG1lbnUgb3IgZXZlbnRzIGZyb20gY29udGFpbmVkIGlucHV0cyBzaG91bGRuJ3QgY2xvc2UgdGhlIG1lbnVcblxuXG4gICAgICAgIGlmIChjb250ZXh0Ll9tZW51LmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgJiYgKGV2ZW50LnR5cGUgPT09ICdrZXl1cCcgJiYgZXZlbnQua2V5ID09PSBUQUJfS0VZJDEgfHwgL2lucHV0fHNlbGVjdHxvcHRpb258dGV4dGFyZWF8Zm9ybS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0LmNsaWNrRXZlbnQgPSBldmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll9jb21wbGV0ZUhpZGUocmVsYXRlZFRhcmdldCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldFBhcmVudEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICByZXR1cm4gZ2V0RWxlbWVudEZyb21TZWxlY3RvcihlbGVtZW50KSB8fCBlbGVtZW50LnBhcmVudE5vZGU7XG4gIH1cblxuICBzdGF0aWMgZGF0YUFwaUtleWRvd25IYW5kbGVyKGV2ZW50KSB7XG4gICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgIC8vICAtIEFuZCBub3QgYSBrZXkgaW4gUkVHRVhQX0tFWURPV04gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vIElmIGlucHV0L3RleHRhcmVhOlxuICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgLy8gIC0gSWYga2V5IGlzIG90aGVyIHRoYW4gZXNjYXBlXG4gICAgLy8gICAgLSBJZiBrZXkgaXMgbm90IHVwIG9yIGRvd24gPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGV2ZW50LnRhcmdldC50YWdOYW1lKSA/IGV2ZW50LmtleSA9PT0gU1BBQ0VfS0VZIHx8IGV2ZW50LmtleSAhPT0gRVNDQVBFX0tFWSQyICYmIChldmVudC5rZXkgIT09IEFSUk9XX0RPV05fS0VZICYmIGV2ZW50LmtleSAhPT0gQVJST1dfVVBfS0VZIHx8IGV2ZW50LnRhcmdldC5jbG9zZXN0KFNFTEVDVE9SX01FTlUpKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LmtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpc0FjdGl2ZSA9IHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ2KTtcblxuICAgIGlmICghaXNBY3RpdmUgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZJDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRUb2dnbGVCdXR0b24gPSB0aGlzLm1hdGNoZXMoU0VMRUNUT1JfREFUQV9UT0dHTEUkMykgPyB0aGlzIDogU2VsZWN0b3JFbmdpbmUucHJldih0aGlzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzKVswXTtcbiAgICBjb25zdCBpbnN0YW5jZSA9IERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UoZ2V0VG9nZ2xlQnV0dG9uKTtcblxuICAgIGlmIChldmVudC5rZXkgPT09IEVTQ0FQRV9LRVkkMikge1xuICAgICAgaW5zdGFuY2UuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5rZXkgPT09IEFSUk9XX1VQX0tFWSB8fCBldmVudC5rZXkgPT09IEFSUk9XX0RPV05fS0VZKSB7XG4gICAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICAgIGluc3RhbmNlLnNob3coKTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UuX3NlbGVjdE1lbnVJdGVtKGV2ZW50KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaXNBY3RpdmUgfHwgZXZlbnQua2V5ID09PSBTUEFDRV9LRVkpIHtcbiAgICAgIERyb3Bkb3duLmNsZWFyTWVudXMoKTtcbiAgICB9XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5cbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMywgRHJvcGRvd24uZGF0YUFwaUtleWRvd25IYW5kbGVyKTtcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfS0VZRE9XTl9EQVRBX0FQSSwgU0VMRUNUT1JfTUVOVSwgRHJvcGRvd24uZGF0YUFwaUtleWRvd25IYW5kbGVyKTtcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMywgRHJvcGRvd24uY2xlYXJNZW51cyk7XG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWVVQX0RBVEFfQVBJLCBEcm9wZG93bi5jbGVhck1lbnVzKTtcbkV2ZW50SGFuZGxlci5vbihkb2N1bWVudCwgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMywgU0VMRUNUT1JfREFUQV9UT0dHTEUkMywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gIERyb3Bkb3duLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcykudG9nZ2xlKCk7XG59KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ecm9wZG93biB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihEcm9wZG93bik7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdXRpbC9zY3JvbGxCYXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgU0VMRUNUT1JfRklYRURfQ09OVEVOVCA9ICcuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wJztcbmNvbnN0IFNFTEVDVE9SX1NUSUNLWV9DT05URU5UID0gJy5zdGlja3ktdG9wJztcblxuY2xhc3MgU2Nyb2xsQmFySGVscGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZWxlbWVudCA9IGRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBnZXRXaWR0aCgpIHtcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2luZG93L2lubmVyV2lkdGgjdXNhZ2Vfbm90ZXNcbiAgICBjb25zdCBkb2N1bWVudFdpZHRoID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgIHJldHVybiBNYXRoLmFicyh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50V2lkdGgpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBjb25zdCB3aWR0aCA9IHRoaXMuZ2V0V2lkdGgoKTtcblxuICAgIHRoaXMuX2Rpc2FibGVPdmVyRmxvdygpOyAvLyBnaXZlIHBhZGRpbmcgdG8gZWxlbWVudCB0byBiYWxhbmNlIHRoZSBoaWRkZW4gc2Nyb2xsYmFyIHdpZHRoXG5cblxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpOyAvLyB0cmljazogV2UgYWRqdXN0IHBvc2l0aXZlIHBhZGRpbmdSaWdodCBhbmQgbmVnYXRpdmUgbWFyZ2luUmlnaHQgdG8gc3RpY2t5LXRvcCBlbGVtZW50cyB0byBrZWVwIHNob3dpbmcgZnVsbHdpZHRoXG5cblxuICAgIHRoaXMuX3NldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsICdwYWRkaW5nUmlnaHQnLCBjYWxjdWxhdGVkVmFsdWUgPT4gY2FsY3VsYXRlZFZhbHVlICsgd2lkdGgpO1xuXG4gICAgdGhpcy5fc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQsICdtYXJnaW5SaWdodCcsIGNhbGN1bGF0ZWRWYWx1ZSA9PiBjYWxjdWxhdGVkVmFsdWUgLSB3aWR0aCk7XG4gIH1cblxuICBfZGlzYWJsZU92ZXJGbG93KCkge1xuICAgIHRoaXMuX3NhdmVJbml0aWFsQXR0cmlidXRlKHRoaXMuX2VsZW1lbnQsICdvdmVyZmxvdycpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICB9XG5cbiAgX3NldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3AsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgc2Nyb2xsYmFyV2lkdGggPSB0aGlzLmdldFdpZHRoKCk7XG5cbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IGVsZW1lbnQgPT4ge1xuICAgICAgaWYgKGVsZW1lbnQgIT09IHRoaXMuX2VsZW1lbnQgJiYgd2luZG93LmlubmVyV2lkdGggPiBlbGVtZW50LmNsaWVudFdpZHRoICsgc2Nyb2xsYmFyV2lkdGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zYXZlSW5pdGlhbEF0dHJpYnV0ZShlbGVtZW50LCBzdHlsZVByb3ApO1xuXG4gICAgICBjb25zdCBjYWxjdWxhdGVkVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVtzdHlsZVByb3BdO1xuICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZVByb3BdID0gYCR7Y2FsbGJhY2soTnVtYmVyLnBhcnNlRmxvYXQoY2FsY3VsYXRlZFZhbHVlKSl9cHhgO1xuICAgIH07XG5cbiAgICB0aGlzLl9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBtYW5pcHVsYXRpb25DYWxsQmFjayk7XG4gIH1cblxuICByZXNldCgpIHtcbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQsICdvdmVyZmxvdycpO1xuXG4gICAgdGhpcy5fcmVzZXRFbGVtZW50QXR0cmlidXRlcyh0aGlzLl9lbGVtZW50LCAncGFkZGluZ1JpZ2h0Jyk7XG5cbiAgICB0aGlzLl9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQsICdwYWRkaW5nUmlnaHQnKTtcblxuICAgIHRoaXMuX3Jlc2V0RWxlbWVudEF0dHJpYnV0ZXMoU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQsICdtYXJnaW5SaWdodCcpO1xuICB9XG5cbiAgX3NhdmVJbml0aWFsQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcCkge1xuICAgIGNvbnN0IGFjdHVhbFZhbHVlID0gZWxlbWVudC5zdHlsZVtzdHlsZVByb3BdO1xuXG4gICAgaWYgKGFjdHVhbFZhbHVlKSB7XG4gICAgICBNYW5pcHVsYXRvci5zZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcCwgYWN0dWFsVmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIF9yZXNldEVsZW1lbnRBdHRyaWJ1dGVzKHNlbGVjdG9yLCBzdHlsZVByb3ApIHtcbiAgICBjb25zdCBtYW5pcHVsYXRpb25DYWxsQmFjayA9IGVsZW1lbnQgPT4ge1xuICAgICAgY29uc3QgdmFsdWUgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlKGVsZW1lbnQsIHN0eWxlUHJvcCk7XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoc3R5bGVQcm9wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE1hbmlwdWxhdG9yLnJlbW92ZURhdGFBdHRyaWJ1dGUoZWxlbWVudCwgc3R5bGVQcm9wKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZVByb3BdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2soc2VsZWN0b3IsIG1hbmlwdWxhdGlvbkNhbGxCYWNrKTtcbiAgfVxuXG4gIF9hcHBseU1hbmlwdWxhdGlvbkNhbGxiYWNrKHNlbGVjdG9yLCBjYWxsQmFjaykge1xuICAgIGlmIChpc0VsZW1lbnQoc2VsZWN0b3IpKSB7XG4gICAgICBjYWxsQmFjayhzZWxlY3Rvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoc2VsZWN0b3IsIHRoaXMuX2VsZW1lbnQpLmZvckVhY2goY2FsbEJhY2spO1xuICAgIH1cbiAgfVxuXG4gIGlzT3ZlcmZsb3dpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0V2lkdGgoKSA+IDA7XG4gIH1cblxufVxuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHV0aWwvYmFja2Ryb3AuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgRGVmYXVsdCQ3ID0ge1xuICBjbGFzc05hbWU6ICdtb2RhbC1iYWNrZHJvcCcsXG4gIGlzVmlzaWJsZTogdHJ1ZSxcbiAgLy8gaWYgZmFsc2UsIHdlIHVzZSB0aGUgYmFja2Ryb3AgaGVscGVyIHdpdGhvdXQgYWRkaW5nIGFueSBlbGVtZW50IHRvIHRoZSBkb21cbiAgaXNBbmltYXRlZDogZmFsc2UsXG4gIHJvb3RFbGVtZW50OiAnYm9keScsXG4gIC8vIGdpdmUgdGhlIGNob2ljZSB0byBwbGFjZSBiYWNrZHJvcCB1bmRlciBkaWZmZXJlbnQgZWxlbWVudHNcbiAgY2xpY2tDYWxsYmFjazogbnVsbFxufTtcbmNvbnN0IERlZmF1bHRUeXBlJDcgPSB7XG4gIGNsYXNzTmFtZTogJ3N0cmluZycsXG4gIGlzVmlzaWJsZTogJ2Jvb2xlYW4nLFxuICBpc0FuaW1hdGVkOiAnYm9vbGVhbicsXG4gIHJvb3RFbGVtZW50OiAnKGVsZW1lbnR8c3RyaW5nKScsXG4gIGNsaWNrQ2FsbGJhY2s6ICcoZnVuY3Rpb258bnVsbCknXG59O1xuY29uc3QgTkFNRSQ4ID0gJ2JhY2tkcm9wJztcbmNvbnN0IENMQVNTX05BTUVfRkFERSQ0ID0gJ2ZhZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDUgPSAnc2hvdyc7XG5jb25zdCBFVkVOVF9NT1VTRURPV04gPSBgbW91c2Vkb3duLmJzLiR7TkFNRSQ4fWA7XG5cbmNsYXNzIEJhY2tkcm9wIHtcbiAgY29uc3RydWN0b3IoY29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICB9XG5cbiAgc2hvdyhjYWxsYmFjaykge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmlzVmlzaWJsZSkge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fYXBwZW5kKCk7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpIHtcbiAgICAgIHJlZmxvdyh0aGlzLl9nZXRFbGVtZW50KCkpO1xuICAgIH1cblxuICAgIHRoaXMuX2dldEVsZW1lbnQoKS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQ1KTtcblxuICAgIHRoaXMuX2VtdWxhdGVBbmltYXRpb24oKCkgPT4ge1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgfSk7XG4gIH1cblxuICBoaWRlKGNhbGxiYWNrKSB7XG4gICAgaWYgKCF0aGlzLl9jb25maWcuaXNWaXNpYmxlKSB7XG4gICAgICBleGVjdXRlKGNhbGxiYWNrKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9nZXRFbGVtZW50KCkuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckNSk7XG5cbiAgICB0aGlzLl9lbXVsYXRlQW5pbWF0aW9uKCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcG9zZSgpO1xuICAgICAgZXhlY3V0ZShjYWxsYmFjayk7XG4gICAgfSk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldEVsZW1lbnQoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICBjb25zdCBiYWNrZHJvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgYmFja2Ryb3AuY2xhc3NOYW1lID0gdGhpcy5fY29uZmlnLmNsYXNzTmFtZTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5pc0FuaW1hdGVkKSB7XG4gICAgICAgIGJhY2tkcm9wLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFJDQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gYmFja2Ryb3A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQ3LFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTsgLy8gdXNlIGdldEVsZW1lbnQoKSB3aXRoIHRoZSBkZWZhdWx0IFwiYm9keVwiIHRvIGdldCBhIGZyZXNoIEVsZW1lbnQgb24gZWFjaCBpbnN0YW50aWF0aW9uXG5cbiAgICBjb25maWcucm9vdEVsZW1lbnQgPSBnZXRFbGVtZW50KGNvbmZpZy5yb290RWxlbWVudCk7XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkOCwgY29uZmlnLCBEZWZhdWx0VHlwZSQ3KTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2FwcGVuZCgpIHtcbiAgICBpZiAodGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NvbmZpZy5yb290RWxlbWVudC5hcHBlbmQodGhpcy5fZ2V0RWxlbWVudCgpKTtcblxuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9nZXRFbGVtZW50KCksIEVWRU5UX01PVVNFRE9XTiwgKCkgPT4ge1xuICAgICAgZXhlY3V0ZSh0aGlzLl9jb25maWcuY2xpY2tDYWxsYmFjayk7XG4gICAgfSk7XG4gICAgdGhpcy5faXNBcHBlbmRlZCA9IHRydWU7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIGlmICghdGhpcy5faXNBcHBlbmRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VET1dOKTtcblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl9pc0FwcGVuZGVkID0gZmFsc2U7XG4gIH1cblxuICBfZW11bGF0ZUFuaW1hdGlvbihjYWxsYmFjaykge1xuICAgIGV4ZWN1dGVBZnRlclRyYW5zaXRpb24oY2FsbGJhY2ssIHRoaXMuX2dldEVsZW1lbnQoKSwgdGhpcy5fY29uZmlnLmlzQW5pbWF0ZWQpO1xuICB9XG5cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB1dGlsL2ZvY3VzdHJhcC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5jb25zdCBEZWZhdWx0JDYgPSB7XG4gIHRyYXBFbGVtZW50OiBudWxsLFxuICAvLyBUaGUgZWxlbWVudCB0byB0cmFwIGZvY3VzIGluc2lkZSBvZlxuICBhdXRvZm9jdXM6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ2ID0ge1xuICB0cmFwRWxlbWVudDogJ2VsZW1lbnQnLFxuICBhdXRvZm9jdXM6ICdib29sZWFuJ1xufTtcbmNvbnN0IE5BTUUkNyA9ICdmb2N1c3RyYXAnO1xuY29uc3QgREFUQV9LRVkkNyA9ICdicy5mb2N1c3RyYXAnO1xuY29uc3QgRVZFTlRfS0VZJDcgPSBgLiR7REFUQV9LRVkkN31gO1xuY29uc3QgRVZFTlRfRk9DVVNJTiQxID0gYGZvY3VzaW4ke0VWRU5UX0tFWSQ3fWA7XG5jb25zdCBFVkVOVF9LRVlET1dOX1RBQiA9IGBrZXlkb3duLnRhYiR7RVZFTlRfS0VZJDd9YDtcbmNvbnN0IFRBQl9LRVkgPSAnVGFiJztcbmNvbnN0IFRBQl9OQVZfRk9SV0FSRCA9ICdmb3J3YXJkJztcbmNvbnN0IFRBQl9OQVZfQkFDS1dBUkQgPSAnYmFja3dhcmQnO1xuXG5jbGFzcyBGb2N1c1RyYXAge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9pc0FjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMuX2xhc3RUYWJOYXZEaXJlY3Rpb24gPSBudWxsO1xuICB9XG5cbiAgYWN0aXZhdGUoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdHJhcEVsZW1lbnQsXG4gICAgICBhdXRvZm9jdXNcbiAgICB9ID0gdGhpcy5fY29uZmlnO1xuXG4gICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGF1dG9mb2N1cykge1xuICAgICAgdHJhcEVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkkNyk7IC8vIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuXG4gICAgRXZlbnRIYW5kbGVyLm9uKGRvY3VtZW50LCBFVkVOVF9GT0NVU0lOJDEsIGV2ZW50ID0+IHRoaXMuX2hhbmRsZUZvY3VzaW4oZXZlbnQpKTtcbiAgICBFdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0tFWURPV05fVEFCLCBldmVudCA9PiB0aGlzLl9oYW5kbGVLZXlkb3duKGV2ZW50KSk7XG4gICAgdGhpcy5faXNBY3RpdmUgPSB0cnVlO1xuICB9XG5cbiAgZGVhY3RpdmF0ZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNBY3RpdmUgPSBmYWxzZTtcbiAgICBFdmVudEhhbmRsZXIub2ZmKGRvY3VtZW50LCBFVkVOVF9LRVkkNyk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2hhbmRsZUZvY3VzaW4oZXZlbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICB0YXJnZXRcbiAgICB9ID0gZXZlbnQ7XG4gICAgY29uc3Qge1xuICAgICAgdHJhcEVsZW1lbnRcbiAgICB9ID0gdGhpcy5fY29uZmlnO1xuXG4gICAgaWYgKHRhcmdldCA9PT0gZG9jdW1lbnQgfHwgdGFyZ2V0ID09PSB0cmFwRWxlbWVudCB8fCB0cmFwRWxlbWVudC5jb250YWlucyh0YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZWxlbWVudHMgPSBTZWxlY3RvckVuZ2luZS5mb2N1c2FibGVDaGlsZHJlbih0cmFwRWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0cmFwRWxlbWVudC5mb2N1cygpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fbGFzdFRhYk5hdkRpcmVjdGlvbiA9PT0gVEFCX05BVl9CQUNLV0FSRCkge1xuICAgICAgZWxlbWVudHNbZWxlbWVudHMubGVuZ3RoIC0gMV0uZm9jdXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudHNbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBfaGFuZGxlS2V5ZG93bihldmVudCkge1xuICAgIGlmIChldmVudC5rZXkgIT09IFRBQl9LRVkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9sYXN0VGFiTmF2RGlyZWN0aW9uID0gZXZlbnQuc2hpZnRLZXkgPyBUQUJfTkFWX0JBQ0tXQVJEIDogVEFCX05BVl9GT1JXQVJEO1xuICB9XG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkNixcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkNywgY29uZmlnLCBEZWZhdWx0VHlwZSQ2KTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBtb2RhbC5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJDYgPSAnbW9kYWwnO1xuY29uc3QgREFUQV9LRVkkNiA9ICdicy5tb2RhbCc7XG5jb25zdCBFVkVOVF9LRVkkNiA9IGAuJHtEQVRBX0tFWSQ2fWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkMyA9ICcuZGF0YS1hcGknO1xuY29uc3QgRVNDQVBFX0tFWSQxID0gJ0VzY2FwZSc7XG5jb25zdCBEZWZhdWx0JDUgPSB7XG4gIGJhY2tkcm9wOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgZm9jdXM6IHRydWVcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ1ID0ge1xuICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBmb2N1czogJ2Jvb2xlYW4nXG59O1xuY29uc3QgRVZFTlRfSElERSQzID0gYGhpZGUke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9ISURFX1BSRVZFTlRFRCA9IGBoaWRlUHJldmVudGVkJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfSElEREVOJDMgPSBgaGlkZGVuJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfU0hPVyQzID0gYHNob3cke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9TSE9XTiQzID0gYHNob3duJHtFVkVOVF9LRVkkNn1gO1xuY29uc3QgRVZFTlRfUkVTSVpFID0gYHJlc2l6ZSR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RJU01JU1MgPSBgY2xpY2suZGlzbWlzcyR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX0tFWURPV05fRElTTUlTUyQxID0gYGtleWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX01PVVNFVVBfRElTTUlTUyA9IGBtb3VzZXVwLmRpc21pc3Mke0VWRU5UX0tFWSQ2fWA7XG5jb25zdCBFVkVOVF9NT1VTRURPV05fRElTTUlTUyA9IGBtb3VzZWRvd24uZGlzbWlzcyR7RVZFTlRfS0VZJDZ9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIgPSBgY2xpY2ske0VWRU5UX0tFWSQ2fSR7REFUQV9BUElfS0VZJDN9YDtcbmNvbnN0IENMQVNTX05BTUVfT1BFTiA9ICdtb2RhbC1vcGVuJztcbmNvbnN0IENMQVNTX05BTUVfRkFERSQzID0gJ2ZhZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDQgPSAnc2hvdyc7XG5jb25zdCBDTEFTU19OQU1FX1NUQVRJQyA9ICdtb2RhbC1zdGF0aWMnO1xuY29uc3QgT1BFTl9TRUxFQ1RPUiQxID0gJy5tb2RhbC5zaG93JztcbmNvbnN0IFNFTEVDVE9SX0RJQUxPRyA9ICcubW9kYWwtZGlhbG9nJztcbmNvbnN0IFNFTEVDVE9SX01PREFMX0JPRFkgPSAnLm1vZGFsLWJvZHknO1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiA9ICdbZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiXSc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgTW9kYWwgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fZGlhbG9nID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9ESUFMT0csIHRoaXMuX2VsZW1lbnQpO1xuICAgIHRoaXMuX2JhY2tkcm9wID0gdGhpcy5faW5pdGlhbGl6ZUJhY2tEcm9wKCk7XG4gICAgdGhpcy5fZm9jdXN0cmFwID0gdGhpcy5faW5pdGlhbGl6ZUZvY3VzVHJhcCgpO1xuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcbiAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgdGhpcy5fc2Nyb2xsQmFyID0gbmV3IFNjcm9sbEJhckhlbHBlcigpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQ1O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDY7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBpZiAodGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XJDMsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICB9KTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQoKSkge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zY3JvbGxCYXIuaGlkZSgpO1xuXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfT1BFTik7XG5cbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MsICgpID0+IHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbmUodGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VVUF9ESVNNSVNTLCBldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudC50YXJnZXQgPT09IHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9zaG93QmFja2Ryb3AoKCkgPT4gdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkpO1xuICB9XG5cbiAgaGlkZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzU2hvd24gfHwgdGhpcy5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSQzKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzU2hvd24gPSBmYWxzZTtcblxuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLl9pc0FuaW1hdGVkKCk7XG5cbiAgICBpZiAoaXNBbmltYXRlZCkge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgdGhpcy5fc2V0UmVzaXplRXZlbnQoKTtcblxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCk7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDQpO1xuXG4gICAgRXZlbnRIYW5kbGVyLm9mZih0aGlzLl9lbGVtZW50LCBFVkVOVF9DTElDS19ESVNNSVNTKTtcbiAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2RpYWxvZywgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjaygoKSA9PiB0aGlzLl9oaWRlTW9kYWwoKSwgdGhpcy5fZWxlbWVudCwgaXNBbmltYXRlZCk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIFt3aW5kb3csIHRoaXMuX2RpYWxvZ10uZm9yRWFjaChodG1sRWxlbWVudCA9PiBFdmVudEhhbmRsZXIub2ZmKGh0bWxFbGVtZW50LCBFVkVOVF9LRVkkNikpO1xuXG4gICAgdGhpcy5fYmFja2Ryb3AuZGlzcG9zZSgpO1xuXG4gICAgdGhpcy5fZm9jdXN0cmFwLmRlYWN0aXZhdGUoKTtcblxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgIHJldHVybiBuZXcgQmFja2Ryb3Aoe1xuICAgICAgaXNWaXNpYmxlOiBCb29sZWFuKHRoaXMuX2NvbmZpZy5iYWNrZHJvcCksXG4gICAgICAvLyAnc3RhdGljJyBvcHRpb24gd2lsbCBiZSB0cmFuc2xhdGVkIHRvIHRydWUsIGFuZCBib29sZWFucyB3aWxsIGtlZXAgdGhlaXIgdmFsdWVcbiAgICAgIGlzQW5pbWF0ZWQ6IHRoaXMuX2lzQW5pbWF0ZWQoKVxuICAgIH0pO1xuICB9XG5cbiAgX2luaXRpYWxpemVGb2N1c1RyYXAoKSB7XG4gICAgcmV0dXJuIG5ldyBGb2N1c1RyYXAoe1xuICAgICAgdHJhcEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KTtcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0JDUsXG4gICAgICAuLi5NYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KSxcbiAgICAgIC4uLih0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkNiwgY29uZmlnLCBEZWZhdWx0VHlwZSQ1KTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBjb25zdCBpc0FuaW1hdGVkID0gdGhpcy5faXNBbmltYXRlZCgpO1xuXG4gICAgY29uc3QgbW9kYWxCb2R5ID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShTRUxFQ1RPUl9NT0RBTF9CT0RZLCB0aGlzLl9kaWFsb2cpO1xuXG4gICAgaWYgKCF0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgfHwgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgLy8gRG9uJ3QgbW92ZSBtb2RhbCdzIERPTSBwb3NpdGlvblxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5fZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgaWYgKG1vZGFsQm9keSkge1xuICAgICAgbW9kYWxCb2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGlzQW5pbWF0ZWQpIHtcbiAgICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDQpO1xuXG4gICAgY29uc3QgdHJhbnNpdGlvbkNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5mb2N1cykge1xuICAgICAgICB0aGlzLl9mb2N1c3RyYXAuYWN0aXZhdGUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XTiQzLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKHRyYW5zaXRpb25Db21wbGV0ZSwgdGhpcy5fZGlhbG9nLCBpc0FuaW1hdGVkKTtcbiAgfVxuXG4gIF9zZXRFc2NhcGVFdmVudCgpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUyQxLCBldmVudCA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZJDEpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZJDEpIHtcbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub2ZmKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0tFWURPV05fRElTTUlTUyQxKTtcbiAgICB9XG4gIH1cblxuICBfc2V0UmVzaXplRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgIEV2ZW50SGFuZGxlci5vbih3aW5kb3csIEVWRU5UX1JFU0laRSwgKCkgPT4gdGhpcy5fYWRqdXN0RGlhbG9nKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFdmVudEhhbmRsZXIub2ZmKHdpbmRvdywgRVZFTlRfUkVTSVpFKTtcbiAgICB9XG4gIH1cblxuICBfaGlkZU1vZGFsKCkge1xuICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdyb2xlJyk7XG5cbiAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcblxuICAgIHRoaXMuX2JhY2tkcm9wLmhpZGUoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfT1BFTik7XG5cbiAgICAgIHRoaXMuX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgdGhpcy5fc2Nyb2xsQmFyLnJlc2V0KCk7XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJRERFTiQzKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfQ0xJQ0tfRElTTUlTUywgZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9jb25maWcuYmFja2Ryb3AgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX2JhY2tkcm9wLnNob3coY2FsbGJhY2spO1xuICB9XG5cbiAgX2lzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQzKTtcbiAgfVxuXG4gIF90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCkge1xuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREVfUFJFVkVOVEVEKTtcblxuICAgIGlmIChoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTGlzdCxcbiAgICAgIHNjcm9sbEhlaWdodCxcbiAgICAgIHN0eWxlXG4gICAgfSA9IHRoaXMuX2VsZW1lbnQ7XG4gICAgY29uc3QgaXNNb2RhbE92ZXJmbG93aW5nID0gc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDsgLy8gcmV0dXJuIGlmIHRoZSBmb2xsb3dpbmcgYmFja2dyb3VuZCB0cmFuc2l0aW9uIGhhc24ndCB5ZXQgY29tcGxldGVkXG5cbiAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZyAmJiBzdHlsZS5vdmVyZmxvd1kgPT09ICdoaWRkZW4nIHx8IGNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NUQVRJQykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgfVxuXG4gICAgY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NUQVRJQyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgIGNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuXG4gICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICBzdHlsZS5vdmVyZmxvd1kgPSAnJztcbiAgICAgICAgfSwgdGhpcy5fZGlhbG9nKTtcbiAgICAgIH1cbiAgICB9LCB0aGlzLl9kaWFsb2cpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gdGhlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5cbiAgX2FkanVzdERpYWxvZygpIHtcbiAgICBjb25zdCBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICBjb25zdCBzY3JvbGxiYXJXaWR0aCA9IHRoaXMuX3Njcm9sbEJhci5nZXRXaWR0aCgpO1xuXG4gICAgY29uc3QgaXNCb2R5T3ZlcmZsb3dpbmcgPSBzY3JvbGxiYXJXaWR0aCA+IDA7XG5cbiAgICBpZiAoIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiAhaXNSVEwoKSB8fCBpc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nICYmIGlzUlRMKCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQgPSBgJHtzY3JvbGxiYXJXaWR0aH1weGA7XG4gICAgfVxuXG4gICAgaWYgKGlzQm9keU92ZXJmbG93aW5nICYmICFpc01vZGFsT3ZlcmZsb3dpbmcgJiYgIWlzUlRMKCkgfHwgIWlzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZyAmJiBpc1JUTCgpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodCA9IGAke3Njcm9sbGJhcldpZHRofXB4YDtcbiAgICB9XG4gIH1cblxuICBfcmVzZXRBZGp1c3RtZW50cygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnLCByZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gTW9kYWwuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpO1xuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgRXZlbnRIYW5kbGVyLm9uZSh0YXJnZXQsIEVWRU5UX1NIT1ckMywgc2hvd0V2ZW50ID0+IHtcbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDMsICgpID0+IHtcbiAgICAgIGlmIChpc1Zpc2libGUodGhpcykpIHtcbiAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTsgLy8gYXZvaWQgY29uZmxpY3Qgd2hlbiBjbGlja2luZyBtb2RkYWwgdG9nZ2xlciB3aGlsZSBhbm90aGVyIG9uZSBpcyBvcGVuXG5cbiAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SJDEpO1xuXG4gIGlmIChhbGxSZWFkeU9wZW4pIHtcbiAgICBNb2RhbC5nZXRJbnN0YW5jZShhbGxSZWFkeU9wZW4pLmhpZGUoKTtcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSBNb2RhbC5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldCk7XG4gIGRhdGEudG9nZ2xlKHRoaXMpO1xufSk7XG5lbmFibGVEaXNtaXNzVHJpZ2dlcihNb2RhbCk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuTW9kYWwgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5kZWZpbmVKUXVlcnlQbHVnaW4oTW9kYWwpO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IG9mZmNhbnZhcy5qc1xuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ29uc3RhbnRzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jb25zdCBOQU1FJDUgPSAnb2ZmY2FudmFzJztcbmNvbnN0IERBVEFfS0VZJDUgPSAnYnMub2ZmY2FudmFzJztcbmNvbnN0IEVWRU5UX0tFWSQ1ID0gYC4ke0RBVEFfS0VZJDV9YDtcbmNvbnN0IERBVEFfQVBJX0tFWSQyID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFVkVOVF9MT0FEX0RBVEFfQVBJJDEgPSBgbG9hZCR7RVZFTlRfS0VZJDV9JHtEQVRBX0FQSV9LRVkkMn1gO1xuY29uc3QgRVNDQVBFX0tFWSA9ICdFc2NhcGUnO1xuY29uc3QgRGVmYXVsdCQ0ID0ge1xuICBiYWNrZHJvcDogdHJ1ZSxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHNjcm9sbDogZmFsc2Vcbn07XG5jb25zdCBEZWZhdWx0VHlwZSQ0ID0ge1xuICBiYWNrZHJvcDogJ2Jvb2xlYW4nLFxuICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICBzY3JvbGw6ICdib29sZWFuJ1xufTtcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQzID0gJ3Nob3cnO1xuY29uc3QgQ0xBU1NfTkFNRV9CQUNLRFJPUCA9ICdvZmZjYW52YXMtYmFja2Ryb3AnO1xuY29uc3QgT1BFTl9TRUxFQ1RPUiA9ICcub2ZmY2FudmFzLnNob3cnO1xuY29uc3QgRVZFTlRfU0hPVyQyID0gYHNob3cke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBFVkVOVF9TSE9XTiQyID0gYHNob3duJHtFVkVOVF9LRVkkNX1gO1xuY29uc3QgRVZFTlRfSElERSQyID0gYGhpZGUke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBFVkVOVF9ISURERU4kMiA9IGBoaWRkZW4ke0VWRU5UX0tFWSQ1fWA7XG5jb25zdCBFVkVOVF9DTElDS19EQVRBX0FQSSQxID0gYGNsaWNrJHtFVkVOVF9LRVkkNX0ke0RBVEFfQVBJX0tFWSQyfWA7XG5jb25zdCBFVkVOVF9LRVlET1dOX0RJU01JU1MgPSBga2V5ZG93bi5kaXNtaXNzJHtFVkVOVF9LRVkkNX1gO1xuY29uc3QgU0VMRUNUT1JfREFUQV9UT0dHTEUkMSA9ICdbZGF0YS1icy10b2dnbGU9XCJvZmZjYW52YXNcIl0nO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIE9mZmNhbnZhcyBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICBjb25zdHJ1Y3RvcihlbGVtZW50LCBjb25maWcpIHtcbiAgICBzdXBlcihlbGVtZW50KTtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgdGhpcy5fYmFja2Ryb3AgPSB0aGlzLl9pbml0aWFsaXplQmFja0Ryb3AoKTtcbiAgICB0aGlzLl9mb2N1c3RyYXAgPSB0aGlzLl9pbml0aWFsaXplRm9jdXNUcmFwKCk7XG5cbiAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQ1O1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0JDQ7XG4gIH0gLy8gUHVibGljXG5cblxuICB0b2dnbGUocmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gIH1cblxuICBzaG93KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICBpZiAodGhpcy5faXNTaG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1ckMiwge1xuICAgICAgcmVsYXRlZFRhcmdldFxuICAgIH0pO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNTaG93biA9IHRydWU7XG4gICAgdGhpcy5fZWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuXG4gICAgdGhpcy5fYmFja2Ryb3Auc2hvdygpO1xuXG4gICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICBuZXcgU2Nyb2xsQmFySGVscGVyKCkuaGlkZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnLCB0cnVlKTtcblxuICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQzKTtcblxuICAgIGNvbnN0IGNvbXBsZXRlQ2FsbEJhY2sgPSAoKSA9PiB7XG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5zY3JvbGwpIHtcbiAgICAgICAgdGhpcy5fZm9jdXN0cmFwLmFjdGl2YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOJDIsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsQmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5faXNTaG93bikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0hJREUkMik7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9mb2N1c3RyYXAuZGVhY3RpdmF0ZSgpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5ibHVyKCk7XG5cbiAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG5cbiAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDMpO1xuXG4gICAgdGhpcy5fYmFja2Ryb3AuaGlkZSgpO1xuXG4gICAgY29uc3QgY29tcGxldGVDYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1tb2RhbCcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgncm9sZScpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcblxuICAgICAgaWYgKCF0aGlzLl9jb25maWcuc2Nyb2xsKSB7XG4gICAgICAgIG5ldyBTY3JvbGxCYXJIZWxwZXIoKS5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9ISURERU4kMik7XG4gICAgfTtcblxuICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGVDYWxsYmFjaywgdGhpcy5fZWxlbWVudCwgdHJ1ZSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIHRoaXMuX2JhY2tkcm9wLmRpc3Bvc2UoKTtcblxuICAgIHRoaXMuX2ZvY3VzdHJhcC5kZWFjdGl2YXRlKCk7XG5cbiAgICBzdXBlci5kaXNwb3NlKCk7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2dldENvbmZpZyhjb25maWcpIHtcbiAgICBjb25maWcgPSB7IC4uLkRlZmF1bHQkNCxcbiAgICAgIC4uLk1hbmlwdWxhdG9yLmdldERhdGFBdHRyaWJ1dGVzKHRoaXMuX2VsZW1lbnQpLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSQ1LCBjb25maWcsIERlZmF1bHRUeXBlJDQpO1xuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfaW5pdGlhbGl6ZUJhY2tEcm9wKCkge1xuICAgIHJldHVybiBuZXcgQmFja2Ryb3Aoe1xuICAgICAgY2xhc3NOYW1lOiBDTEFTU19OQU1FX0JBQ0tEUk9QLFxuICAgICAgaXNWaXNpYmxlOiB0aGlzLl9jb25maWcuYmFja2Ryb3AsXG4gICAgICBpc0FuaW1hdGVkOiB0cnVlLFxuICAgICAgcm9vdEVsZW1lbnQ6IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgIGNsaWNrQ2FsbGJhY2s6ICgpID0+IHRoaXMuaGlkZSgpXG4gICAgfSk7XG4gIH1cblxuICBfaW5pdGlhbGl6ZUZvY3VzVHJhcCgpIHtcbiAgICByZXR1cm4gbmV3IEZvY3VzVHJhcCh7XG4gICAgICB0cmFwRWxlbWVudDogdGhpcy5fZWxlbWVudFxuICAgIH0pO1xuICB9XG5cbiAgX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9LRVlET1dOX0RJU01JU1MsIGV2ZW50ID0+IHtcbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQgJiYgZXZlbnQua2V5ID09PSBFU0NBUEVfS0VZKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YVtjb25maWddID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnN0YXJ0c1dpdGgoJ18nKSB8fCBjb25maWcgPT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgIH1cblxuICAgICAgZGF0YVtjb25maWddKHRoaXMpO1xuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEsIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDEsIGZ1bmN0aW9uIChldmVudCkge1xuICBjb25zdCB0YXJnZXQgPSBnZXRFbGVtZW50RnJvbVNlbGVjdG9yKHRoaXMpO1xuXG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBFdmVudEhhbmRsZXIub25lKHRhcmdldCwgRVZFTlRfSElEREVOJDIsICgpID0+IHtcbiAgICAvLyBmb2N1cyBvbiB0cmlnZ2VyIHdoZW4gaXQgaXMgY2xvc2VkXG4gICAgaWYgKGlzVmlzaWJsZSh0aGlzKSkge1xuICAgICAgdGhpcy5mb2N1cygpO1xuICAgIH1cbiAgfSk7IC8vIGF2b2lkIGNvbmZsaWN0IHdoZW4gY2xpY2tpbmcgYSB0b2dnbGVyIG9mIGFuIG9mZmNhbnZhcywgd2hpbGUgYW5vdGhlciBpcyBvcGVuXG5cbiAgY29uc3QgYWxsUmVhZHlPcGVuID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShPUEVOX1NFTEVDVE9SKTtcblxuICBpZiAoYWxsUmVhZHlPcGVuICYmIGFsbFJlYWR5T3BlbiAhPT0gdGFyZ2V0KSB7XG4gICAgT2ZmY2FudmFzLmdldEluc3RhbmNlKGFsbFJlYWR5T3BlbikuaGlkZSgpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IE9mZmNhbnZhcy5nZXRPckNyZWF0ZUluc3RhbmNlKHRhcmdldCk7XG4gIGRhdGEudG9nZ2xlKHRoaXMpO1xufSk7XG5FdmVudEhhbmRsZXIub24od2luZG93LCBFVkVOVF9MT0FEX0RBVEFfQVBJJDEsICgpID0+IFNlbGVjdG9yRW5naW5lLmZpbmQoT1BFTl9TRUxFQ1RPUikuZm9yRWFjaChlbCA9PiBPZmZjYW52YXMuZ2V0T3JDcmVhdGVJbnN0YW5jZShlbCkuc2hvdygpKSk7XG5lbmFibGVEaXNtaXNzVHJpZ2dlcihPZmZjYW52YXMpO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKE9mZmNhbnZhcyk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdXRpbC9zYW5pdGl6ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuY29uc3QgdXJpQXR0cmlidXRlcyA9IG5ldyBTZXQoWydiYWNrZ3JvdW5kJywgJ2NpdGUnLCAnaHJlZicsICdpdGVtdHlwZScsICdsb25nZGVzYycsICdwb3N0ZXInLCAnc3JjJywgJ3hsaW5rOmhyZWYnXSk7XG5jb25zdCBBUklBX0FUVFJJQlVURV9QQVRURVJOID0gL15hcmlhLVtcXHctXSokL2k7XG4vKipcbiAqIEEgcGF0dGVybiB0aGF0IHJlY29nbml6ZXMgYSBjb21tb25seSB1c2VmdWwgc3Vic2V0IG9mIFVSTHMgdGhhdCBhcmUgc2FmZS5cbiAqXG4gKiBTaG91dG91dCB0byBBbmd1bGFyIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi8xMi4yLngvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAqL1xuXG5jb25zdCBTQUZFX1VSTF9QQVRURVJOID0gL14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZXxzbXMpOnxbXiMmLzo/XSooPzpbIy8/XXwkKSkvaTtcbi8qKlxuICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gKlxuICogU2hvdXRvdXQgdG8gQW5ndWxhciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvMTIuMi54L3BhY2thZ2VzL2NvcmUvc3JjL3Nhbml0aXphdGlvbi91cmxfc2FuaXRpemVyLnRzXG4gKi9cblxuY29uc3QgREFUQV9VUkxfUEFUVEVSTiA9IC9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFtcXGQrL2Etel0rPSokL2k7XG5cbmNvbnN0IGFsbG93ZWRBdHRyaWJ1dGUgPSAoYXR0cmlidXRlLCBhbGxvd2VkQXR0cmlidXRlTGlzdCkgPT4ge1xuICBjb25zdCBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmluY2x1ZGVzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgaWYgKHVyaUF0dHJpYnV0ZXMuaGFzKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihTQUZFX1VSTF9QQVRURVJOLnRlc3QoYXR0cmlidXRlLm5vZGVWYWx1ZSkgfHwgREFUQV9VUkxfUEFUVEVSTi50ZXN0KGF0dHJpYnV0ZS5ub2RlVmFsdWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNvbnN0IHJlZ0V4cCA9IGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmZpbHRlcihhdHRyaWJ1dGVSZWdleCA9PiBhdHRyaWJ1dGVSZWdleCBpbnN0YW5jZW9mIFJlZ0V4cCk7IC8vIENoZWNrIGlmIGEgcmVndWxhciBleHByZXNzaW9uIHZhbGlkYXRlcyB0aGUgYXR0cmlidXRlLlxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSByZWdFeHAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAocmVnRXhwW2ldLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmNvbnN0IERlZmF1bHRBbGxvd2xpc3QgPSB7XG4gIC8vIEdsb2JhbCBhdHRyaWJ1dGVzIGFsbG93ZWQgb24gYW55IHN1cHBsaWVkIGVsZW1lbnQgYmVsb3cuXG4gICcqJzogWydjbGFzcycsICdkaXInLCAnaWQnLCAnbGFuZycsICdyb2xlJywgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTl0sXG4gIGE6IFsndGFyZ2V0JywgJ2hyZWYnLCAndGl0bGUnLCAncmVsJ10sXG4gIGFyZWE6IFtdLFxuICBiOiBbXSxcbiAgYnI6IFtdLFxuICBjb2w6IFtdLFxuICBjb2RlOiBbXSxcbiAgZGl2OiBbXSxcbiAgZW06IFtdLFxuICBocjogW10sXG4gIGgxOiBbXSxcbiAgaDI6IFtdLFxuICBoMzogW10sXG4gIGg0OiBbXSxcbiAgaDU6IFtdLFxuICBoNjogW10sXG4gIGk6IFtdLFxuICBpbWc6IFsnc3JjJywgJ3NyY3NldCcsICdhbHQnLCAndGl0bGUnLCAnd2lkdGgnLCAnaGVpZ2h0J10sXG4gIGxpOiBbXSxcbiAgb2w6IFtdLFxuICBwOiBbXSxcbiAgcHJlOiBbXSxcbiAgczogW10sXG4gIHNtYWxsOiBbXSxcbiAgc3BhbjogW10sXG4gIHN1YjogW10sXG4gIHN1cDogW10sXG4gIHN0cm9uZzogW10sXG4gIHU6IFtdLFxuICB1bDogW11cbn07XG5mdW5jdGlvbiBzYW5pdGl6ZUh0bWwodW5zYWZlSHRtbCwgYWxsb3dMaXN0LCBzYW5pdGl6ZUZuKSB7XG4gIGlmICghdW5zYWZlSHRtbC5sZW5ndGgpIHtcbiAgICByZXR1cm4gdW5zYWZlSHRtbDtcbiAgfVxuXG4gIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHNhbml0aXplRm4odW5zYWZlSHRtbCk7XG4gIH1cblxuICBjb25zdCBkb21QYXJzZXIgPSBuZXcgd2luZG93LkRPTVBhcnNlcigpO1xuICBjb25zdCBjcmVhdGVkRG9jdW1lbnQgPSBkb21QYXJzZXIucGFyc2VGcm9tU3RyaW5nKHVuc2FmZUh0bWwsICd0ZXh0L2h0bWwnKTtcbiAgY29uc3QgZWxlbWVudHMgPSBbXS5jb25jYXQoLi4uY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbaV07XG4gICAgY29uc3QgZWxlbWVudE5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoIU9iamVjdC5rZXlzKGFsbG93TGlzdCkuaW5jbHVkZXMoZWxlbWVudE5hbWUpKSB7XG4gICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgYXR0cmlidXRlTGlzdCA9IFtdLmNvbmNhdCguLi5lbGVtZW50LmF0dHJpYnV0ZXMpO1xuICAgIGNvbnN0IGFsbG93ZWRBdHRyaWJ1dGVzID0gW10uY29uY2F0KGFsbG93TGlzdFsnKiddIHx8IFtdLCBhbGxvd0xpc3RbZWxlbWVudE5hbWVdIHx8IFtdKTtcbiAgICBhdHRyaWJ1dGVMaXN0LmZvckVhY2goYXR0cmlidXRlID0+IHtcbiAgICAgIGlmICghYWxsb3dlZEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGFsbG93ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbn1cblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiB0b29sdGlwLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkNCA9ICd0b29sdGlwJztcbmNvbnN0IERBVEFfS0VZJDQgPSAnYnMudG9vbHRpcCc7XG5jb25zdCBFVkVOVF9LRVkkNCA9IGAuJHtEQVRBX0tFWSQ0fWA7XG5jb25zdCBDTEFTU19QUkVGSVgkMSA9ICdicy10b29sdGlwJztcbmNvbnN0IERJU0FMTE9XRURfQVRUUklCVVRFUyA9IG5ldyBTZXQoWydzYW5pdGl6ZScsICdhbGxvd0xpc3QnLCAnc2FuaXRpemVGbiddKTtcbmNvbnN0IERlZmF1bHRUeXBlJDMgPSB7XG4gIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gIHRpdGxlOiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKScsXG4gIHRyaWdnZXI6ICdzdHJpbmcnLFxuICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gIGh0bWw6ICdib29sZWFuJyxcbiAgc2VsZWN0b3I6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICBvZmZzZXQ6ICcoYXJyYXl8c3RyaW5nfGZ1bmN0aW9uKScsXG4gIGNvbnRhaW5lcjogJyhzdHJpbmd8ZWxlbWVudHxib29sZWFuKScsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogJ2FycmF5JyxcbiAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgY3VzdG9tQ2xhc3M6ICcoc3RyaW5nfGZ1bmN0aW9uKScsXG4gIHNhbml0aXplOiAnYm9vbGVhbicsXG4gIHNhbml0aXplRm46ICcobnVsbHxmdW5jdGlvbiknLFxuICBhbGxvd0xpc3Q6ICdvYmplY3QnLFxuICBwb3BwZXJDb25maWc6ICcobnVsbHxvYmplY3R8ZnVuY3Rpb24pJ1xufTtcbmNvbnN0IEF0dGFjaG1lbnRNYXAgPSB7XG4gIEFVVE86ICdhdXRvJyxcbiAgVE9QOiAndG9wJyxcbiAgUklHSFQ6IGlzUlRMKCkgPyAnbGVmdCcgOiAncmlnaHQnLFxuICBCT1RUT006ICdib3R0b20nLFxuICBMRUZUOiBpc1JUTCgpID8gJ3JpZ2h0JyA6ICdsZWZ0J1xufTtcbmNvbnN0IERlZmF1bHQkMyA9IHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+JyArICc8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PicgKyAnPC9kaXY+JyxcbiAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgdGl0bGU6ICcnLFxuICBkZWxheTogMCxcbiAgaHRtbDogZmFsc2UsXG4gIHNlbGVjdG9yOiBmYWxzZSxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgb2Zmc2V0OiBbMCwgMF0sXG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGZhbGxiYWNrUGxhY2VtZW50czogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcbiAgYm91bmRhcnk6ICdjbGlwcGluZ1BhcmVudHMnLFxuICBjdXN0b21DbGFzczogJycsXG4gIHNhbml0aXplOiB0cnVlLFxuICBzYW5pdGl6ZUZuOiBudWxsLFxuICBhbGxvd0xpc3Q6IERlZmF1bHRBbGxvd2xpc3QsXG4gIHBvcHBlckNvbmZpZzogbnVsbFxufTtcbmNvbnN0IEV2ZW50JDIgPSB7XG4gIEhJREU6IGBoaWRlJHtFVkVOVF9LRVkkNH1gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWSQ0fWAsXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVkkNH1gLFxuICBTSE9XTjogYHNob3duJHtFVkVOVF9LRVkkNH1gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVkkNH1gLFxuICBDTElDSzogYGNsaWNrJHtFVkVOVF9LRVkkNH1gLFxuICBGT0NVU0lOOiBgZm9jdXNpbiR7RVZFTlRfS0VZJDR9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZJDR9YCxcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWSQ0fWAsXG4gIE1PVVNFTEVBVkU6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVkkNH1gXG59O1xuY29uc3QgQ0xBU1NfTkFNRV9GQURFJDIgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX01PREFMID0gJ21vZGFsJztcbmNvbnN0IENMQVNTX05BTUVfU0hPVyQyID0gJ3Nob3cnO1xuY29uc3QgSE9WRVJfU1RBVEVfU0hPVyA9ICdzaG93JztcbmNvbnN0IEhPVkVSX1NUQVRFX09VVCA9ICdvdXQnO1xuY29uc3QgU0VMRUNUT1JfVE9PTFRJUF9JTk5FUiA9ICcudG9vbHRpcC1pbm5lcic7XG5jb25zdCBTRUxFQ1RPUl9NT0RBTCA9IGAuJHtDTEFTU19OQU1FX01PREFMfWA7XG5jb25zdCBFVkVOVF9NT0RBTF9ISURFID0gJ2hpZGUuYnMubW9kYWwnO1xuY29uc3QgVFJJR0dFUl9IT1ZFUiA9ICdob3Zlcic7XG5jb25zdCBUUklHR0VSX0ZPQ1VTID0gJ2ZvY3VzJztcbmNvbnN0IFRSSUdHRVJfQ0xJQ0sgPSAnY2xpY2snO1xuY29uc3QgVFJJR0dFUl9NQU5VQUwgPSAnbWFudWFsJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBUb29sdGlwIGV4dGVuZHMgQmFzZUNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQsIGNvbmZpZykge1xuICAgIGlmICh0eXBlb2YgUG9wcGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9vdHN0cmFwXFwncyB0b29sdGlwcyByZXF1aXJlIFBvcHBlciAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKScpO1xuICAgIH1cblxuICAgIHN1cGVyKGVsZW1lbnQpOyAvLyBwcml2YXRlXG5cbiAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgdGhpcy5fcG9wcGVyID0gbnVsbDsgLy8gUHJvdGVjdGVkXG5cbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLnRpcCA9IG51bGw7XG5cbiAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgfSAvLyBHZXR0ZXJzXG5cblxuICBzdGF0aWMgZ2V0IERlZmF1bHQoKSB7XG4gICAgcmV0dXJuIERlZmF1bHQkMztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQ0O1xuICB9XG5cbiAgc3RhdGljIGdldCBFdmVudCgpIHtcbiAgICByZXR1cm4gRXZlbnQkMjtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlJDM7XG4gIH0gLy8gUHVibGljXG5cblxuICBlbmFibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5faXNFbmFibGVkID0gZmFsc2U7XG4gIH1cblxuICB0b2dnbGVFbmFibGVkKCkge1xuICAgIHRoaXMuX2lzRW5hYmxlZCA9ICF0aGlzLl9pc0VuYWJsZWQ7XG4gIH1cblxuICB0b2dnbGUoZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCk7XG5cbiAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2sgPSAhY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljaztcblxuICAgICAgaWYgKGNvbnRleHQuX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSkge1xuICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRleHQuX2xlYXZlKG51bGwsIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5nZXRUaXBFbGVtZW50KCkuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQyKSkge1xuICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VudGVyKG51bGwsIHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fZWxlbWVudC5jbG9zZXN0KFNFTEVDVE9SX01PREFMKSwgRVZFTlRfTU9EQUxfSElERSwgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG5cbiAgICBpZiAodGhpcy50aXApIHtcbiAgICAgIHRoaXMudGlwLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX2Rpc3Bvc2VQb3BwZXIoKTtcblxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHNob3coKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgaWYgKCEodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3dFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7XG4gICAgY29uc3Qgc2hhZG93Um9vdCA9IGZpbmRTaGFkb3dSb290KHRoaXMuX2VsZW1lbnQpO1xuICAgIGNvbnN0IGlzSW5UaGVEb20gPSBzaGFkb3dSb290ID09PSBudWxsID8gdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLl9lbGVtZW50KSA6IHNoYWRvd1Jvb3QuY29udGFpbnModGhpcy5fZWxlbWVudCk7XG5cbiAgICBpZiAoc2hvd0V2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEEgdHJpY2sgdG8gcmVjcmVhdGUgYSB0b29sdGlwIGluIGNhc2UgYSBuZXcgdGl0bGUgaXMgZ2l2ZW4gYnkgdXNpbmcgdGhlIE5PVCBkb2N1bWVudGVkIGBkYXRhLWJzLW9yaWdpbmFsLXRpdGxlYFxuICAgIC8vIFRoaXMgd2lsbCBiZSByZW1vdmVkIGxhdGVyIGluIGZhdm9yIG9mIGEgYHNldENvbnRlbnRgIG1ldGhvZFxuXG5cbiAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5OQU1FID09PSAndG9vbHRpcCcgJiYgdGhpcy50aXAgJiYgdGhpcy5nZXRUaXRsZSgpICE9PSB0aGlzLnRpcC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIpLmlubmVySFRNTCkge1xuICAgICAgdGhpcy5fZGlzcG9zZVBvcHBlcigpO1xuXG4gICAgICB0aGlzLnRpcC5yZW1vdmUoKTtcbiAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICBjb25zdCB0aXBJZCA9IGdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO1xuICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZCk7XG5cbiAgICBpZiAodGhpcy5fY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9GQURFJDIpO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLl9jb25maWcucGxhY2VtZW50ID09PSAnZnVuY3Rpb24nID8gdGhpcy5fY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsIHRpcCwgdGhpcy5fZWxlbWVudCkgOiB0aGlzLl9jb25maWcucGxhY2VtZW50O1xuXG4gICAgY29uc3QgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcblxuICAgIHRoaXMuX2FkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGNvbnRhaW5lclxuICAgIH0gPSB0aGlzLl9jb25maWc7XG4gICAgRGF0YS5zZXQodGlwLCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblxuICAgIGlmICghdGhpcy5fZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyh0aGlzLnRpcCkpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmQodGlwKTtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcG9wcGVyID0gUG9wcGVyLmNyZWF0ZVBvcHBlcih0aGlzLl9lbGVtZW50LCB0aXAsIHRoaXMuX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KSk7XG4gICAgfVxuXG4gICAgdGlwLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XJDIpO1xuXG4gICAgY29uc3QgY3VzdG9tQ2xhc3MgPSB0aGlzLl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbih0aGlzLl9jb25maWcuY3VzdG9tQ2xhc3MpO1xuXG4gICAgaWYgKGN1c3RvbUNsYXNzKSB7XG4gICAgICB0aXAuY2xhc3NMaXN0LmFkZCguLi5jdXN0b21DbGFzcy5zcGxpdCgnICcpKTtcbiAgICB9IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cblxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICBFdmVudEhhbmRsZXIub24oZWxlbWVudCwgJ21vdXNlb3ZlcicsIG5vb3ApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICBjb25zdCBwcmV2SG92ZXJTdGF0ZSA9IHRoaXMuX2hvdmVyU3RhdGU7XG4gICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX09VVCkge1xuICAgICAgICB0aGlzLl9sZWF2ZShudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgaXNBbmltYXRlZCA9IHRoaXMudGlwLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUkMik7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLnRpcCwgaXNBbmltYXRlZCk7XG4gIH1cblxuICBoaWRlKCkge1xuICAgIGlmICghdGhpcy5fcG9wcGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faG92ZXJTdGF0ZSAhPT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgICB0aXAucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2NsZWFuVGlwQ2xhc3MoKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pO1xuXG4gICAgICB0aGlzLl9kaXNwb3NlUG9wcGVyKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhpZGVFdmVudCA9IEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSElERSk7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aXAuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckMik7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB3ZSBhZGRlZCBmb3IgaU9TIHN1cHBvcnRcblxuICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIFtdLmNvbmNhdCguLi5kb2N1bWVudC5ib2R5LmNoaWxkcmVuKS5mb3JFYWNoKGVsZW1lbnQgPT4gRXZlbnRIYW5kbGVyLm9mZihlbGVtZW50LCAnbW91c2VvdmVyJywgbm9vcCkpO1xuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9DTElDS10gPSBmYWxzZTtcbiAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RSSUdHRVJfRk9DVVNdID0gZmFsc2U7XG4gICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUUklHR0VSX0hPVkVSXSA9IGZhbHNlO1xuICAgIGNvbnN0IGlzQW5pbWF0ZWQgPSB0aGlzLnRpcC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9GQURFJDIpO1xuXG4gICAgdGhpcy5fcXVldWVDYWxsYmFjayhjb21wbGV0ZSwgdGhpcy50aXAsIGlzQW5pbWF0ZWQpO1xuXG4gICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgIHRoaXMuX3BvcHBlci51cGRhdGUoKTtcbiAgICB9XG4gIH0gLy8gUHJvdGVjdGVkXG5cblxuICBpc1dpdGhDb250ZW50KCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSk7XG4gIH1cblxuICBnZXRUaXBFbGVtZW50KCkge1xuICAgIGlmICh0aGlzLnRpcCkge1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH1cblxuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHRoaXMuX2NvbmZpZy50ZW1wbGF0ZTtcbiAgICBjb25zdCB0aXAgPSBlbGVtZW50LmNoaWxkcmVuWzBdO1xuICAgIHRoaXMuc2V0Q29udGVudCh0aXApO1xuICAgIHRpcC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfRkFERSQyLCBDTEFTU19OQU1FX1NIT1ckMik7XG4gICAgdGhpcy50aXAgPSB0aXA7XG4gICAgcmV0dXJuIHRoaXMudGlwO1xuICB9XG5cbiAgc2V0Q29udGVudCh0aXApIHtcbiAgICB0aGlzLl9zYW5pdGl6ZUFuZFNldENvbnRlbnQodGlwLCB0aGlzLmdldFRpdGxlKCksIFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIpO1xuICB9XG5cbiAgX3Nhbml0aXplQW5kU2V0Q29udGVudCh0ZW1wbGF0ZSwgY29udGVudCwgc2VsZWN0b3IpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZUVsZW1lbnQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKHNlbGVjdG9yLCB0ZW1wbGF0ZSk7XG5cbiAgICBpZiAoIWNvbnRlbnQgJiYgdGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICB0ZW1wbGF0ZUVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyB3ZSB1c2UgYXBwZW5kIGZvciBodG1sIG9iamVjdHMgdG8gbWFpbnRhaW4ganMgZXZlbnRzXG5cblxuICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQodGVtcGxhdGVFbGVtZW50LCBjb250ZW50KTtcbiAgfVxuXG4gIHNldEVsZW1lbnRDb250ZW50KGVsZW1lbnQsIGNvbnRlbnQpIHtcbiAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0VsZW1lbnQoY29udGVudCkpIHtcbiAgICAgIGNvbnRlbnQgPSBnZXRFbGVtZW50KGNvbnRlbnQpOyAvLyBjb250ZW50IGlzIGEgRE9NIG5vZGUgb3IgYSBqUXVlcnlcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5odG1sKSB7XG4gICAgICAgIGlmIChjb250ZW50LnBhcmVudE5vZGUgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50LmlubmVySFRNTCA9ICcnO1xuICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudC50ZXh0Q29udGVudDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9jb25maWcuaHRtbCkge1xuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5zYW5pdGl6ZSkge1xuICAgICAgICBjb250ZW50ID0gc2FuaXRpemVIdG1sKGNvbnRlbnQsIHRoaXMuX2NvbmZpZy5hbGxvd0xpc3QsIHRoaXMuX2NvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSBjb250ZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICB9XG4gIH1cblxuICBnZXRUaXRsZSgpIHtcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuX2VsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWJzLW9yaWdpbmFsLXRpdGxlJykgfHwgdGhpcy5fY29uZmlnLnRpdGxlO1xuXG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKHRpdGxlKTtcbiAgfVxuXG4gIHVwZGF0ZUF0dGFjaG1lbnQoYXR0YWNobWVudCkge1xuICAgIGlmIChhdHRhY2htZW50ID09PSAncmlnaHQnKSB7XG4gICAgICByZXR1cm4gJ2VuZCc7XG4gICAgfVxuXG4gICAgaWYgKGF0dGFjaG1lbnQgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuICdzdGFydCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF0dGFjaG1lbnQ7XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldChldmVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBjb250ZXh0IHx8IHRoaXMuY29uc3RydWN0b3IuZ2V0T3JDcmVhdGVJbnN0YW5jZShldmVudC5kZWxlZ2F0ZVRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gIH1cblxuICBfZ2V0T2Zmc2V0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIG9mZnNldFxuICAgIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvZmZzZXQuc3BsaXQoJywnKS5tYXAodmFsID0+IE51bWJlci5wYXJzZUludCh2YWwsIDEwKSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBwb3BwZXJEYXRhID0+IG9mZnNldChwb3BwZXJEYXRhLCB0aGlzLl9lbGVtZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgX3Jlc29sdmVQb3NzaWJsZUZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicgPyBjb250ZW50LmNhbGwodGhpcy5fZWxlbWVudCkgOiBjb250ZW50O1xuICB9XG5cbiAgX2dldFBvcHBlckNvbmZpZyhhdHRhY2htZW50KSB7XG4gICAgY29uc3QgZGVmYXVsdEJzUG9wcGVyQ29uZmlnID0ge1xuICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgbW9kaWZpZXJzOiBbe1xuICAgICAgICBuYW1lOiAnZmxpcCcsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICBmYWxsYmFja1BsYWNlbWVudHM6IHRoaXMuX2NvbmZpZy5mYWxsYmFja1BsYWNlbWVudHNcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnb2Zmc2V0JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIG9mZnNldDogdGhpcy5fZ2V0T2Zmc2V0KClcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGJvdW5kYXJ5OiB0aGlzLl9jb25maWcuYm91bmRhcnlcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBuYW1lOiAnYXJyb3cnLFxuICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgZWxlbWVudDogYC4ke3RoaXMuY29uc3RydWN0b3IuTkFNRX0tYXJyb3dgXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgbmFtZTogJ29uQ2hhbmdlJyxcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcGhhc2U6ICdhZnRlcldyaXRlJyxcbiAgICAgICAgZm46IGRhdGEgPT4gdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpXG4gICAgICB9XSxcbiAgICAgIG9uRmlyc3RVcGRhdGU6IGRhdGEgPT4ge1xuICAgICAgICBpZiAoZGF0YS5vcHRpb25zLnBsYWNlbWVudCAhPT0gZGF0YS5wbGFjZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7IC4uLmRlZmF1bHRCc1BvcHBlckNvbmZpZyxcbiAgICAgIC4uLih0eXBlb2YgdGhpcy5fY29uZmlnLnBvcHBlckNvbmZpZyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcoZGVmYXVsdEJzUG9wcGVyQ29uZmlnKSA6IHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpXG4gICAgfTtcbiAgfVxuXG4gIF9hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCkge1xuICAgIHRoaXMuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5hZGQoYCR7dGhpcy5fZ2V0QmFzaWNDbGFzc1ByZWZpeCgpfS0ke3RoaXMudXBkYXRlQXR0YWNobWVudChhdHRhY2htZW50KX1gKTtcbiAgfVxuXG4gIF9nZXRBdHRhY2htZW50KHBsYWNlbWVudCkge1xuICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgfVxuXG4gIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLl9jb25maWcudHJpZ2dlci5zcGxpdCgnICcpO1xuXG4gICAgdHJpZ2dlcnMuZm9yRWFjaCh0cmlnZ2VyID0+IHtcbiAgICAgIGlmICh0cmlnZ2VyID09PSAnY2xpY2snKSB7XG4gICAgICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkNMSUNLLCB0aGlzLl9jb25maWcuc2VsZWN0b3IsIGV2ZW50ID0+IHRoaXMudG9nZ2xlKGV2ZW50KSk7XG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT09IFRSSUdHRVJfTUFOVUFMKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50SW4gPSB0cmlnZ2VyID09PSBUUklHR0VSX0hPVkVSID8gdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOO1xuICAgICAgICBjb25zdCBldmVudE91dCA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgPyB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiB0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO1xuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgZXZlbnRJbiwgdGhpcy5fY29uZmlnLnNlbGVjdG9yLCBldmVudCA9PiB0aGlzLl9lbnRlcihldmVudCkpO1xuICAgICAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgZXZlbnRPdXQsIHRoaXMuX2NvbmZpZy5zZWxlY3RvciwgZXZlbnQgPT4gdGhpcy5fbGVhdmUoZXZlbnQpKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9NT0RBTCksIEVWRU5UX01PREFMX0hJREUsIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIpO1xuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgdGhpcy5fY29uZmlnID0geyAuLi50aGlzLl9jb25maWcsXG4gICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICBzZWxlY3RvcjogJydcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgfVxuICB9XG5cbiAgX2ZpeFRpdGxlKCkge1xuICAgIGNvbnN0IHRpdGxlID0gdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJyk7XG5cbiAgICBjb25zdCBvcmlnaW5hbFRpdGxlVHlwZSA9IHR5cGVvZiB0aGlzLl9lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1icy1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgaWYgKHRpdGxlIHx8IG9yaWdpbmFsVGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtb3JpZ2luYWwtdGl0bGUnLCB0aXRsZSB8fCAnJyk7XG5cbiAgICAgIGlmICh0aXRsZSAmJiAhdGhpcy5fZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKSAmJiAhdGhpcy5fZWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHRpdGxlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgIH1cbiAgfVxuXG4gIF9lbnRlcihldmVudCwgY29udGV4dCkge1xuICAgIGNvbnRleHQgPSB0aGlzLl9pbml0aWFsaXplT25EZWxlZ2F0ZWRUYXJnZXQoZXZlbnQsIGNvbnRleHQpO1xuXG4gICAgaWYgKGV2ZW50KSB7XG4gICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1ckMikgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX1NIT1c7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuXG4gICAgaWYgKCFjb250ZXh0Ll9jb25maWcuZGVsYXkgfHwgIWNvbnRleHQuX2NvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSE9WRVJfU1RBVEVfU0hPVykge1xuICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgIH1cbiAgICB9LCBjb250ZXh0Ll9jb25maWcuZGVsYXkuc2hvdyk7XG4gIH1cblxuICBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICBjb250ZXh0ID0gdGhpcy5faW5pdGlhbGl6ZU9uRGVsZWdhdGVkVGFyZ2V0KGV2ZW50LCBjb250ZXh0KTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVFJJR0dFUl9GT0NVUyA6IFRSSUdHRVJfSE9WRVJdID0gY29udGV4dC5fZWxlbWVudC5jb250YWlucyhldmVudC5yZWxhdGVkVGFyZ2V0KTtcbiAgICB9XG5cbiAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9PVVQ7XG5cbiAgICBpZiAoIWNvbnRleHQuX2NvbmZpZy5kZWxheSB8fCAhY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpIHtcbiAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgY29udGV4dC5oaWRlKCk7XG4gICAgICB9XG4gICAgfSwgY29udGV4dC5fY29uZmlnLmRlbGF5LmhpZGUpO1xuICB9XG5cbiAgX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKSB7XG4gICAgZm9yIChjb25zdCB0cmlnZ2VyIGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpIHtcbiAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uc3QgZGF0YUF0dHJpYnV0ZXMgPSBNYW5pcHVsYXRvci5nZXREYXRhQXR0cmlidXRlcyh0aGlzLl9lbGVtZW50KTtcbiAgICBPYmplY3Qua2V5cyhkYXRhQXR0cmlidXRlcykuZm9yRWFjaChkYXRhQXR0ciA9PiB7XG4gICAgICBpZiAoRElTQUxMT1dFRF9BVFRSSUJVVEVTLmhhcyhkYXRhQXR0cikpIHtcbiAgICAgICAgZGVsZXRlIGRhdGFBdHRyaWJ1dGVzW2RhdGFBdHRyXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25maWcgPSB7IC4uLnRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxcbiAgICAgIC4uLmRhdGFBdHRyaWJ1dGVzLFxuICAgICAgLi4uKHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KVxuICAgIH07XG4gICAgY29uZmlnLmNvbnRhaW5lciA9IGNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6IGdldEVsZW1lbnQoY29uZmlnLmNvbnRhaW5lcik7XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5kZWxheSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICBoaWRlOiBjb25maWcuZGVsYXlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb25maWcudGl0bGUgPT09ICdudW1iZXInKSB7XG4gICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbmZpZy5jb250ZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgIH1cblxuICAgIHR5cGVDaGVja0NvbmZpZyhOQU1FJDQsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG5cbiAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XG4gICAgICBjb25maWcudGVtcGxhdGUgPSBzYW5pdGl6ZUh0bWwoY29uZmlnLnRlbXBsYXRlLCBjb25maWcuYWxsb3dMaXN0LCBjb25maWcuc2FuaXRpemVGbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICBjb25zdCBjb25maWcgPSB7fTtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX2NvbmZpZykge1xuICAgICAgaWYgKHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtrZXldICE9PSB0aGlzLl9jb25maWdba2V5XSkge1xuICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuX2NvbmZpZ1trZXldO1xuICAgICAgfVxuICAgIH0gLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgcmVwbGFjZWQgd2l0aDpcbiAgICAvLyBjb25zdCBrZXlzV2l0aERpZmZlcmVudFZhbHVlcyA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX2NvbmZpZykuZmlsdGVyKGVudHJ5ID0+IHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlbnRyeVswXV0gIT09IHRoaXMuX2NvbmZpZ1tlbnRyeVswXV0pXG4gICAgLy8gYE9iamVjdC5mcm9tRW50cmllcyhrZXlzV2l0aERpZmZlcmVudFZhbHVlcylgXG5cblxuICAgIHJldHVybiBjb25maWc7XG4gIH1cblxuICBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICBjb25zdCB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICBjb25zdCBiYXNpY0NsYXNzUHJlZml4UmVnZXggPSBuZXcgUmVnRXhwKGAoXnxcXFxccykke3RoaXMuX2dldEJhc2ljQ2xhc3NQcmVmaXgoKX1cXFxcUytgLCAnZycpO1xuICAgIGNvbnN0IHRhYkNsYXNzID0gdGlwLmdldEF0dHJpYnV0ZSgnY2xhc3MnKS5tYXRjaChiYXNpY0NsYXNzUHJlZml4UmVnZXgpO1xuXG4gICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRhYkNsYXNzLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZvckVhY2godENsYXNzID0+IHRpcC5jbGFzc0xpc3QucmVtb3ZlKHRDbGFzcykpO1xuICAgIH1cbiAgfVxuXG4gIF9nZXRCYXNpY0NsYXNzUHJlZml4KCkge1xuICAgIHJldHVybiBDTEFTU19QUkVGSVgkMTtcbiAgfVxuXG4gIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YXRlXG4gICAgfSA9IHBvcHBlckRhdGE7XG5cbiAgICBpZiAoIXN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy50aXAgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXI7XG5cbiAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICB0aGlzLl9hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChzdGF0ZS5wbGFjZW1lbnQpKTtcbiAgfVxuXG4gIF9kaXNwb3NlUG9wcGVyKCkge1xuICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG5cbiAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgfVxuICB9IC8vIFN0YXRpY1xuXG5cbiAgc3RhdGljIGpRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSBUb29sdGlwLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcywgY29uZmlnKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIG1ldGhvZCBuYW1lZCBcIiR7Y29uZmlnfVwiYCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVG9vbHRpcCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRvb2x0aXApO1xuXG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBCb290c3RyYXAgKHY1LjEuMyk6IHBvcG92ZXIuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQzID0gJ3BvcG92ZXInO1xuY29uc3QgREFUQV9LRVkkMyA9ICdicy5wb3BvdmVyJztcbmNvbnN0IEVWRU5UX0tFWSQzID0gYC4ke0RBVEFfS0VZJDN9YDtcbmNvbnN0IENMQVNTX1BSRUZJWCA9ICdicy1wb3BvdmVyJztcbmNvbnN0IERlZmF1bHQkMiA9IHsgLi4uVG9vbHRpcC5EZWZhdWx0LFxuICBwbGFjZW1lbnQ6ICdyaWdodCcsXG4gIG9mZnNldDogWzAsIDhdLFxuICB0cmlnZ2VyOiAnY2xpY2snLFxuICBjb250ZW50OiAnJyxcbiAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1hcnJvd1wiPjwvZGl2PicgKyAnPGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPicgKyAnPGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PicgKyAnPC9kaXY+J1xufTtcbmNvbnN0IERlZmF1bHRUeXBlJDIgPSB7IC4uLlRvb2x0aXAuRGVmYXVsdFR5cGUsXG4gIGNvbnRlbnQ6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJ1xufTtcbmNvbnN0IEV2ZW50JDEgPSB7XG4gIEhJREU6IGBoaWRlJHtFVkVOVF9LRVkkM31gLFxuICBISURERU46IGBoaWRkZW4ke0VWRU5UX0tFWSQzfWAsXG4gIFNIT1c6IGBzaG93JHtFVkVOVF9LRVkkM31gLFxuICBTSE9XTjogYHNob3duJHtFVkVOVF9LRVkkM31gLFxuICBJTlNFUlRFRDogYGluc2VydGVkJHtFVkVOVF9LRVkkM31gLFxuICBDTElDSzogYGNsaWNrJHtFVkVOVF9LRVkkM31gLFxuICBGT0NVU0lOOiBgZm9jdXNpbiR7RVZFTlRfS0VZJDN9YCxcbiAgRk9DVVNPVVQ6IGBmb2N1c291dCR7RVZFTlRfS0VZJDN9YCxcbiAgTU9VU0VFTlRFUjogYG1vdXNlZW50ZXIke0VWRU5UX0tFWSQzfWAsXG4gIE1PVVNFTEVBVkU6IGBtb3VzZWxlYXZlJHtFVkVOVF9LRVkkM31gXG59O1xuY29uc3QgU0VMRUNUT1JfVElUTEUgPSAnLnBvcG92ZXItaGVhZGVyJztcbmNvbnN0IFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSc7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgUG9wb3ZlciBleHRlbmRzIFRvb2x0aXAge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQyO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IEV2ZW50KCkge1xuICAgIHJldHVybiBFdmVudCQxO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0VHlwZSgpIHtcbiAgICByZXR1cm4gRGVmYXVsdFR5cGUkMjtcbiAgfSAvLyBPdmVycmlkZXNcblxuXG4gIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKSB8fCB0aGlzLl9nZXRDb250ZW50KCk7XG4gIH1cblxuICBzZXRDb250ZW50KHRpcCkge1xuICAgIHRoaXMuX3Nhbml0aXplQW5kU2V0Q29udGVudCh0aXAsIHRoaXMuZ2V0VGl0bGUoKSwgU0VMRUNUT1JfVElUTEUpO1xuXG4gICAgdGhpcy5fc2FuaXRpemVBbmRTZXRDb250ZW50KHRpcCwgdGhpcy5fZ2V0Q29udGVudCgpLCBTRUxFQ1RPUl9DT05URU5UKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29udGVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZVBvc3NpYmxlRnVuY3Rpb24odGhpcy5fY29uZmlnLmNvbnRlbnQpO1xuICB9XG5cbiAgX2dldEJhc2ljQ2xhc3NQcmVmaXgoKSB7XG4gICAgcmV0dXJuIENMQVNTX1BSRUZJWDtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gUG9wb3Zlci5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGpRdWVyeVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBhZGQgLlBvcG92ZXIgdG8galF1ZXJ5IG9ubHkgaWYgalF1ZXJ5IGlzIHByZXNlbnRcbiAqL1xuXG5cbmRlZmluZUpRdWVyeVBsdWdpbihQb3BvdmVyKTtcblxuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQm9vdHN0cmFwICh2NS4xLjMpOiBzY3JvbGxzcHkuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSQyID0gJ3Njcm9sbHNweSc7XG5jb25zdCBEQVRBX0tFWSQyID0gJ2JzLnNjcm9sbHNweSc7XG5jb25zdCBFVkVOVF9LRVkkMiA9IGAuJHtEQVRBX0tFWSQyfWA7XG5jb25zdCBEQVRBX0FQSV9LRVkkMSA9ICcuZGF0YS1hcGknO1xuY29uc3QgRGVmYXVsdCQxID0ge1xuICBvZmZzZXQ6IDEwLFxuICBtZXRob2Q6ICdhdXRvJyxcbiAgdGFyZ2V0OiAnJ1xufTtcbmNvbnN0IERlZmF1bHRUeXBlJDEgPSB7XG4gIG9mZnNldDogJ251bWJlcicsXG4gIG1ldGhvZDogJ3N0cmluZycsXG4gIHRhcmdldDogJyhzdHJpbmd8ZWxlbWVudCknXG59O1xuY29uc3QgRVZFTlRfQUNUSVZBVEUgPSBgYWN0aXZhdGUke0VWRU5UX0tFWSQyfWA7XG5jb25zdCBFVkVOVF9TQ1JPTEwgPSBgc2Nyb2xsJHtFVkVOVF9LRVkkMn1gO1xuY29uc3QgRVZFTlRfTE9BRF9EQVRBX0FQSSA9IGBsb2FkJHtFVkVOVF9LRVkkMn0ke0RBVEFfQVBJX0tFWSQxfWA7XG5jb25zdCBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSc7XG5jb25zdCBDTEFTU19OQU1FX0FDVElWRSQxID0gJ2FjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1icy1zcHk9XCJzY3JvbGxcIl0nO1xuY29uc3QgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAkMSA9ICcubmF2LCAubGlzdC1ncm91cCc7XG5jb25zdCBTRUxFQ1RPUl9OQVZfTElOS1MgPSAnLm5hdi1saW5rJztcbmNvbnN0IFNFTEVDVE9SX05BVl9JVEVNUyA9ICcubmF2LWl0ZW0nO1xuY29uc3QgU0VMRUNUT1JfTElTVF9JVEVNUyA9ICcubGlzdC1ncm91cC1pdGVtJztcbmNvbnN0IFNFTEVDVE9SX0xJTktfSVRFTVMgPSBgJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9LCAuJHtDTEFTU19OQU1FX0RST1BET1dOX0lURU19YDtcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOJDEgPSAnLmRyb3Bkb3duJztcbmNvbnN0IFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSQxID0gJy5kcm9wZG93bi10b2dnbGUnO1xuY29uc3QgTUVUSE9EX09GRlNFVCA9ICdvZmZzZXQnO1xuY29uc3QgTUVUSE9EX1BPU0lUSU9OID0gJ3Bvc2l0aW9uJztcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDbGFzcyBEZWZpbml0aW9uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuXG5jbGFzcyBTY3JvbGxTcHkgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQudGFnTmFtZSA9PT0gJ0JPRFknID8gd2luZG93IDogdGhpcy5fZWxlbWVudDtcbiAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfU0NST0xMLCAoKSA9PiB0aGlzLl9wcm9jZXNzKCkpO1xuICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgdGhpcy5fcHJvY2VzcygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdCgpIHtcbiAgICByZXR1cm4gRGVmYXVsdCQxO1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FJDI7XG4gIH0gLy8gUHVibGljXG5cblxuICByZWZyZXNoKCkge1xuICAgIGNvbnN0IGF1dG9NZXRob2QgPSB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB0aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdyA/IE1FVEhPRF9PRkZTRVQgOiBNRVRIT0RfUE9TSVRJT047XG4gICAgY29uc3Qgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG4gICAgY29uc3Qgb2Zmc2V0QmFzZSA9IG9mZnNldE1ldGhvZCA9PT0gTUVUSE9EX1BPU0lUSU9OID8gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgOiAwO1xuICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gdGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCk7XG4gICAgY29uc3QgdGFyZ2V0cyA9IFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfTElOS19JVEVNUywgdGhpcy5fY29uZmlnLnRhcmdldCk7XG4gICAgdGFyZ2V0cy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCB0YXJnZXRTZWxlY3RvciA9IGdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICBjb25zdCB0YXJnZXQgPSB0YXJnZXRTZWxlY3RvciA/IFNlbGVjdG9yRW5naW5lLmZpbmRPbmUodGFyZ2V0U2VsZWN0b3IpIDogbnVsbDtcblxuICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICBjb25zdCB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgaWYgKHRhcmdldEJDUi53aWR0aCB8fCB0YXJnZXRCQ1IuaGVpZ2h0KSB7XG4gICAgICAgICAgcmV0dXJuIFtNYW5pcHVsYXRvcltvZmZzZXRNZXRob2RdKHRhcmdldCkudG9wICsgb2Zmc2V0QmFzZSwgdGFyZ2V0U2VsZWN0b3JdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pLmZpbHRlcihpdGVtID0+IGl0ZW0pLnNvcnQoKGEsIGIpID0+IGFbMF0gLSBiWzBdKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgdGhpcy5fb2Zmc2V0cy5wdXNoKGl0ZW1bMF0pO1xuXG4gICAgICB0aGlzLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgfSk7XG4gIH1cblxuICBkaXNwb3NlKCkge1xuICAgIEV2ZW50SGFuZGxlci5vZmYodGhpcy5fc2Nyb2xsRWxlbWVudCwgRVZFTlRfS0VZJDIpO1xuICAgIHN1cGVyLmRpc3Bvc2UoKTtcbiAgfSAvLyBQcml2YXRlXG5cblxuICBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgIGNvbmZpZyA9IHsgLi4uRGVmYXVsdCQxLFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICBjb25maWcudGFyZ2V0ID0gZ2V0RWxlbWVudChjb25maWcudGFyZ2V0KSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdHlwZUNoZWNrQ29uZmlnKE5BTUUkMiwgY29uZmlnLCBEZWZhdWx0VHlwZSQxKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX2dldFNjcm9sbFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICB9XG5cbiAgX2dldFNjcm9sbEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICB9XG5cbiAgX2dldE9mZnNldEhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gIH1cblxuICBfcHJvY2VzcygpIHtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSB0aGlzLl9nZXRTY3JvbGxUb3AoKSArIHRoaXMuX2NvbmZpZy5vZmZzZXQ7XG5cbiAgICBjb25zdCBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgIGNvbnN0IG1heFNjcm9sbCA9IHRoaXMuX2NvbmZpZy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLl9nZXRPZmZzZXRIZWlnaHQoKTtcblxuICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgfVxuXG4gICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fYWN0aXZlVGFyZ2V0ICYmIHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbMF0gJiYgdGhpcy5fb2Zmc2V0c1swXSA+IDApIHtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gdGhpcy5fb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGNvbnN0IGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgaWYgKGlzQWN0aXZlVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9hY3RpdmF0ZSh0YXJnZXQpIHtcbiAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgY29uc3QgcXVlcmllcyA9IFNFTEVDVE9SX0xJTktfSVRFTVMuc3BsaXQoJywnKS5tYXAoc2VsZWN0b3IgPT4gYCR7c2VsZWN0b3J9W2RhdGEtYnMtdGFyZ2V0PVwiJHt0YXJnZXR9XCJdLCR7c2VsZWN0b3J9W2hyZWY9XCIke3RhcmdldH1cIl1gKTtcbiAgICBjb25zdCBsaW5rID0gU2VsZWN0b3JFbmdpbmUuZmluZE9uZShxdWVyaWVzLmpvaW4oJywnKSwgdGhpcy5fY29uZmlnLnRhcmdldCk7XG4gICAgbGluay5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuXG4gICAgaWYgKGxpbmsuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRFJPUERPV05fSVRFTSkpIHtcbiAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmRPbmUoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEsIGxpbmsuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTiQxKSkuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgU2VsZWN0b3JFbmdpbmUucGFyZW50cyhsaW5rLCBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCQxKS5mb3JFYWNoKGxpc3RHcm91cCA9PiB7XG4gICAgICAgIC8vIFNldCB0cmlnZ2VyZWQgbGlua3MgcGFyZW50cyBhcyBhY3RpdmVcbiAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG4gICAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBgJHtTRUxFQ1RPUl9OQVZfTElOS1N9LCAke1NFTEVDVE9SX0xJU1RfSVRFTVN9YCkuZm9yRWFjaChpdGVtID0+IGl0ZW0uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSQxKSk7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuXG4gICAgICAgIFNlbGVjdG9yRW5naW5lLnByZXYobGlzdEdyb3VwLCBTRUxFQ1RPUl9OQVZfSVRFTVMpLmZvckVhY2gobmF2SXRlbSA9PiB7XG4gICAgICAgICAgU2VsZWN0b3JFbmdpbmUuY2hpbGRyZW4obmF2SXRlbSwgU0VMRUNUT1JfTkFWX0xJTktTKS5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfQUNUSVZFJDEpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9zY3JvbGxFbGVtZW50LCBFVkVOVF9BQ1RJVkFURSwge1xuICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgfSk7XG4gIH1cblxuICBfY2xlYXIoKSB7XG4gICAgU2VsZWN0b3JFbmdpbmUuZmluZChTRUxFQ1RPUl9MSU5LX0lURU1TLCB0aGlzLl9jb25maWcudGFyZ2V0KS5maWx0ZXIobm9kZSA9PiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSQxKSkuZm9yRWFjaChub2RlID0+IG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQxKSk7XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFNjcm9sbFNweS5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMsIGNvbmZpZyk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnICE9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBObyBtZXRob2QgbmFtZWQgXCIke2NvbmZpZ31cImApO1xuICAgICAgfVxuXG4gICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICB9KTtcbiAgfVxuXG59XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cblxuRXZlbnRIYW5kbGVyLm9uKHdpbmRvdywgRVZFTlRfTE9BRF9EQVRBX0FQSSwgKCkgPT4ge1xuICBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0RBVEFfU1BZKS5mb3JFYWNoKHNweSA9PiBuZXcgU2Nyb2xsU3B5KHNweSkpO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuU2Nyb2xsU3B5IHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFNjcm9sbFNweSk7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdGFiLmpzXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21haW4vTElDRU5TRSlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb25zdGFudHNcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNvbnN0IE5BTUUkMSA9ICd0YWInO1xuY29uc3QgREFUQV9LRVkkMSA9ICdicy50YWInO1xuY29uc3QgRVZFTlRfS0VZJDEgPSBgLiR7REFUQV9LRVkkMX1gO1xuY29uc3QgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG5jb25zdCBFVkVOVF9ISURFJDEgPSBgaGlkZSR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX0hJRERFTiQxID0gYGhpZGRlbiR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX1NIT1ckMSA9IGBzaG93JHtFVkVOVF9LRVkkMX1gO1xuY29uc3QgRVZFTlRfU0hPV04kMSA9IGBzaG93biR7RVZFTlRfS0VZJDF9YDtcbmNvbnN0IEVWRU5UX0NMSUNLX0RBVEFfQVBJID0gYGNsaWNrJHtFVkVOVF9LRVkkMX0ke0RBVEFfQVBJX0tFWX1gO1xuY29uc3QgQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VID0gJ2Ryb3Bkb3duLW1lbnUnO1xuY29uc3QgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJztcbmNvbnN0IENMQVNTX05BTUVfRkFERSQxID0gJ2ZhZGUnO1xuY29uc3QgQ0xBU1NfTkFNRV9TSE9XJDEgPSAnc2hvdyc7XG5jb25zdCBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nO1xuY29uc3QgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAgPSAnLm5hdiwgLmxpc3QtZ3JvdXAnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFID0gJy5hY3RpdmUnO1xuY29uc3QgU0VMRUNUT1JfQUNUSVZFX1VMID0gJzpzY29wZSA+IGxpID4gLmFjdGl2ZSc7XG5jb25zdCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSA9ICdbZGF0YS1icy10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLWJzLXRvZ2dsZT1cImxpc3RcIl0nO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnO1xuY29uc3QgU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEID0gJzpzY29wZSA+IC5kcm9wZG93bi1tZW51IC5hY3RpdmUnO1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENsYXNzIERlZmluaXRpb25cbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICovXG5cbmNsYXNzIFRhYiBleHRlbmRzIEJhc2VDb21wb25lbnQge1xuICAvLyBHZXR0ZXJzXG4gIHN0YXRpYyBnZXQgTkFNRSgpIHtcbiAgICByZXR1cm4gTkFNRSQxO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgc2hvdygpIHtcbiAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHByZXZpb3VzO1xuICAgIGNvbnN0IHRhcmdldCA9IGdldEVsZW1lbnRGcm9tU2VsZWN0b3IodGhpcy5fZWxlbWVudCk7XG5cbiAgICBjb25zdCBsaXN0RWxlbWVudCA9IHRoaXMuX2VsZW1lbnQuY2xvc2VzdChTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCk7XG5cbiAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGl0ZW1TZWxlY3RvciA9IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnVUwnIHx8IGxpc3RFbGVtZW50Lm5vZGVOYW1lID09PSAnT0wnID8gU0VMRUNUT1JfQUNUSVZFX1VMIDogU0VMRUNUT1JfQUNUSVZFO1xuICAgICAgcHJldmlvdXMgPSBTZWxlY3RvckVuZ2luZS5maW5kKGl0ZW1TZWxlY3RvciwgbGlzdEVsZW1lbnQpO1xuICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICB9XG5cbiAgICBjb25zdCBoaWRlRXZlbnQgPSBwcmV2aW91cyA/IEV2ZW50SGFuZGxlci50cmlnZ2VyKHByZXZpb3VzLCBFVkVOVF9ISURFJDEsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICB9KSA6IG51bGw7XG4gICAgY29uc3Qgc2hvd0V2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPVyQxLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgIH0pO1xuXG4gICAgaWYgKHNob3dFdmVudC5kZWZhdWx0UHJldmVudGVkIHx8IGhpZGVFdmVudCAhPT0gbnVsbCAmJiBoaWRlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTtcblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIocHJldmlvdXMsIEVWRU5UX0hJRERFTiQxLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH0pO1xuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfU0hPV04kMSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGUoKTtcbiAgICB9XG4gIH0gLy8gUHJpdmF0ZVxuXG5cbiAgX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBhY3RpdmVFbGVtZW50cyA9IGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVOYW1lID09PSAnVUwnIHx8IGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ09MJykgPyBTZWxlY3RvckVuZ2luZS5maW5kKFNFTEVDVE9SX0FDVElWRV9VTCwgY29udGFpbmVyKSA6IFNlbGVjdG9yRW5naW5lLmNoaWxkcmVuKGNvbnRhaW5lciwgU0VMRUNUT1JfQUNUSVZFKTtcbiAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50c1swXTtcbiAgICBjb25zdCBpc1RyYW5zaXRpb25pbmcgPSBjYWxsYmFjayAmJiBhY3RpdmUgJiYgYWN0aXZlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUkMSk7XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHRoaXMuX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKTtcblxuICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckMSk7XG5cbiAgICAgIHRoaXMuX3F1ZXVlQ2FsbGJhY2soY29tcGxldGUsIGVsZW1lbnQsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIF90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjaykge1xuICAgIGlmIChhY3RpdmUpIHtcbiAgICAgIGFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgIGNvbnN0IGRyb3Bkb3duQ2hpbGQgPSBTZWxlY3RvckVuZ2luZS5maW5kT25lKFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRCwgYWN0aXZlLnBhcmVudE5vZGUpO1xuXG4gICAgICBpZiAoZHJvcGRvd25DaGlsZCkge1xuICAgICAgICBkcm9wZG93bkNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICBhY3RpdmUuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSk7XG5cbiAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmVmbG93KGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfRkFERSQxKSkge1xuICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQxKTtcbiAgICB9XG5cbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQubm9kZU5hbWUgPT09ICdMSScpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0RST1BET1dOX01FTlUpKSB7XG4gICAgICBjb25zdCBkcm9wZG93bkVsZW1lbnQgPSBlbGVtZW50LmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pO1xuXG4gICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgIFNlbGVjdG9yRW5naW5lLmZpbmQoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFLCBkcm9wZG93bkVsZW1lbnQpLmZvckVhY2goZHJvcGRvd24gPT4gZHJvcGRvd24uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSkpO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gIH0gLy8gU3RhdGljXG5cblxuICBzdGF0aWMgalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZGF0YSA9IFRhYi5nZXRPckNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbn1cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuXG5FdmVudEhhbmRsZXIub24oZG9jdW1lbnQsIEVWRU5UX0NMSUNLX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gIGlmIChbJ0EnLCAnQVJFQSddLmluY2x1ZGVzKHRoaXMudGFnTmFtZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgaWYgKGlzRGlzYWJsZWQodGhpcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBkYXRhID0gVGFiLmdldE9yQ3JlYXRlSW5zdGFuY2UodGhpcyk7XG4gIGRhdGEuc2hvdygpO1xufSk7XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogalF1ZXJ5XG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIGFkZCAuVGFiIHRvIGpRdWVyeSBvbmx5IGlmIGpRdWVyeSBpcyBwcmVzZW50XG4gKi9cblxuZGVmaW5lSlF1ZXJ5UGx1Z2luKFRhYik7XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIEJvb3RzdHJhcCAodjUuMS4zKTogdG9hc3QuanNcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqL1xuLyoqXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIENvbnN0YW50c1xuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY29uc3QgTkFNRSA9ICd0b2FzdCc7XG5jb25zdCBEQVRBX0tFWSA9ICdicy50b2FzdCc7XG5jb25zdCBFVkVOVF9LRVkgPSBgLiR7REFUQV9LRVl9YDtcbmNvbnN0IEVWRU5UX01PVVNFT1ZFUiA9IGBtb3VzZW92ZXIke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfTU9VU0VPVVQgPSBgbW91c2VvdXQke0VWRU5UX0tFWX1gO1xuY29uc3QgRVZFTlRfRk9DVVNJTiA9IGBmb2N1c2luJHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX0ZPQ1VTT1VUID0gYGZvY3Vzb3V0JHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX0hJREUgPSBgaGlkZSR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9ISURERU4gPSBgaGlkZGVuJHtFVkVOVF9LRVl9YDtcbmNvbnN0IEVWRU5UX1NIT1cgPSBgc2hvdyR7RVZFTlRfS0VZfWA7XG5jb25zdCBFVkVOVF9TSE9XTiA9IGBzaG93biR7RVZFTlRfS0VZfWA7XG5jb25zdCBDTEFTU19OQU1FX0ZBREUgPSAnZmFkZSc7XG5jb25zdCBDTEFTU19OQU1FX0hJREUgPSAnaGlkZSc7IC8vIEBkZXByZWNhdGVkIC0ga2VwdCBoZXJlIG9ubHkgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbmNvbnN0IENMQVNTX05BTUVfU0hPVyA9ICdzaG93JztcbmNvbnN0IENMQVNTX05BTUVfU0hPV0lORyA9ICdzaG93aW5nJztcbmNvbnN0IERlZmF1bHRUeXBlID0ge1xuICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgYXV0b2hpZGU6ICdib29sZWFuJyxcbiAgZGVsYXk6ICdudW1iZXInXG59O1xuY29uc3QgRGVmYXVsdCA9IHtcbiAgYW5pbWF0aW9uOiB0cnVlLFxuICBhdXRvaGlkZTogdHJ1ZSxcbiAgZGVsYXk6IDUwMDBcbn07XG4vKipcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogQ2xhc3MgRGVmaW5pdGlvblxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuY2xhc3MgVG9hc3QgZXh0ZW5kcyBCYXNlQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0tleWJvYXJkSW50ZXJhY3Rpb24gPSBmYWxzZTtcblxuICAgIHRoaXMuX3NldExpc3RlbmVycygpO1xuICB9IC8vIEdldHRlcnNcblxuXG4gIHN0YXRpYyBnZXQgRGVmYXVsdFR5cGUoKSB7XG4gICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICB9XG5cbiAgc3RhdGljIGdldCBEZWZhdWx0KCkge1xuICAgIHJldHVybiBEZWZhdWx0O1xuICB9XG5cbiAgc3RhdGljIGdldCBOQU1FKCkge1xuICAgIHJldHVybiBOQU1FO1xuICB9IC8vIFB1YmxpY1xuXG5cbiAgc2hvdygpIHtcbiAgICBjb25zdCBzaG93RXZlbnQgPSBFdmVudEhhbmRsZXIudHJpZ2dlcih0aGlzLl9lbGVtZW50LCBFVkVOVF9TSE9XKTtcblxuICAgIGlmIChzaG93RXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2NsZWFyVGltZW91dCgpO1xuXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORyk7XG5cbiAgICAgIEV2ZW50SGFuZGxlci50cmlnZ2VyKHRoaXMuX2VsZW1lbnQsIEVWRU5UX1NIT1dOKTtcblxuICAgICAgdGhpcy5fbWF5YmVTY2hlZHVsZUhpZGUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSk7IC8vIEBkZXByZWNhdGVkXG5cblxuICAgIHJlZmxvdyh0aGlzLl9lbGVtZW50KTtcblxuICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1cpO1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKTtcbiAgfVxuXG4gIGhpZGUoKSB7XG4gICAgaWYgKCF0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX1NIT1cpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGlkZUV2ZW50ID0gRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElERSk7XG5cbiAgICBpZiAoaGlkZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0hJREUpOyAvLyBAZGVwcmVjYXRlZFxuXG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1dJTkcpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgRXZlbnRIYW5kbGVyLnRyaWdnZXIodGhpcy5fZWxlbWVudCwgRVZFTlRfSElEREVOKTtcbiAgICB9O1xuXG4gICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPV0lORyk7XG5cbiAgICB0aGlzLl9xdWV1ZUNhbGxiYWNrKGNvbXBsZXRlLCB0aGlzLl9lbGVtZW50LCB0aGlzLl9jb25maWcuYW5pbWF0aW9uKTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG5cbiAgICBpZiAodGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9TSE9XKSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPVyk7XG4gICAgfVxuXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xuICB9IC8vIFByaXZhdGVcblxuXG4gIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0geyAuLi5EZWZhdWx0LFxuICAgICAgLi4uTWFuaXB1bGF0b3IuZ2V0RGF0YUF0dHJpYnV0ZXModGhpcy5fZWxlbWVudCksXG4gICAgICAuLi4odHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pXG4gICAgfTtcbiAgICB0eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgX21heWJlU2NoZWR1bGVIaWRlKCkge1xuICAgIGlmICghdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2hhc01vdXNlSW50ZXJhY3Rpb24gfHwgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuaGlkZSgpO1xuICAgIH0sIHRoaXMuX2NvbmZpZy5kZWxheSk7XG4gIH1cblxuICBfb25JbnRlcmFjdGlvbihldmVudCwgaXNJbnRlcmFjdGluZykge1xuICAgIHN3aXRjaCAoZXZlbnQudHlwZSkge1xuICAgICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICAgICAgdGhpcy5faGFzTW91c2VJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3Rpbmc7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdmb2N1c2luJzpcbiAgICAgIGNhc2UgJ2ZvY3Vzb3V0JzpcbiAgICAgICAgdGhpcy5faGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiA9IGlzSW50ZXJhY3Rpbmc7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyYWN0aW5nKSB7XG4gICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5leHRFbGVtZW50ID0gZXZlbnQucmVsYXRlZFRhcmdldDtcblxuICAgIGlmICh0aGlzLl9lbGVtZW50ID09PSBuZXh0RWxlbWVudCB8fCB0aGlzLl9lbGVtZW50LmNvbnRhaW5zKG5leHRFbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX21heWJlU2NoZWR1bGVIaWRlKCk7XG4gIH1cblxuICBfc2V0TGlzdGVuZXJzKCkge1xuICAgIEV2ZW50SGFuZGxlci5vbih0aGlzLl9lbGVtZW50LCBFVkVOVF9NT1VTRU9WRVIsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIHRydWUpKTtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfTU9VU0VPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSk7XG4gICAgRXZlbnRIYW5kbGVyLm9uKHRoaXMuX2VsZW1lbnQsIEVWRU5UX0ZPQ1VTSU4sIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIHRydWUpKTtcbiAgICBFdmVudEhhbmRsZXIub24odGhpcy5fZWxlbWVudCwgRVZFTlRfRk9DVVNPVVQsIGV2ZW50ID0+IHRoaXMuX29uSW50ZXJhY3Rpb24oZXZlbnQsIGZhbHNlKSk7XG4gIH1cblxuICBfY2xlYXJUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KTtcbiAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgfSAvLyBTdGF0aWNcblxuXG4gIHN0YXRpYyBqUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkYXRhID0gVG9hc3QuZ2V0T3JDcmVhdGVJbnN0YW5jZSh0aGlzLCBjb25maWcpO1xuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gbWV0aG9kIG5hbWVkIFwiJHtjb25maWd9XCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG5cbmVuYWJsZURpc21pc3NUcmlnZ2VyKFRvYXN0KTtcbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBqUXVlcnlcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogYWRkIC5Ub2FzdCB0byBqUXVlcnkgb25seSBpZiBqUXVlcnkgaXMgcHJlc2VudFxuICovXG5cbmRlZmluZUpRdWVyeVBsdWdpbihUb2FzdCk7XG5cbmV4cG9ydCB7IEFsZXJ0LCBCdXR0b24sIENhcm91c2VsLCBDb2xsYXBzZSwgRHJvcGRvd24sIE1vZGFsLCBPZmZjYW52YXMsIFBvcG92ZXIsIFNjcm9sbFNweSwgVGFiLCBUb2FzdCwgVG9vbHRpcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLmVzbS5qcy5tYXBcbiIsIi8qIVxuICogalF1ZXJ5IEphdmFTY3JpcHQgTGlicmFyeSB2My42LjBcbiAqIGh0dHBzOi8vanF1ZXJ5LmNvbS9cbiAqXG4gKiBJbmNsdWRlcyBTaXp6bGUuanNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBPcGVuSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAyMS0wMy0wMlQxNzowOFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgZmxhdCA9IGFyci5mbGF0ID8gZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmZsYXQuY2FsbCggYXJyYXkgKTtcbn0gOiBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuY29uY2F0LmFwcGx5KCBbXSwgYXJyYXkgKTtcbn07XG5cblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcblx0XHQvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcblx0XHQvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuXHRcdC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cblx0XHQvLyBTdXBwb3J0OiBRdFdlYiA8PTMuOC41LCBXZWJLaXQgPD01MzQuMzQsIHdraHRtbHRvcGRmIHRvb2wgPD0wLjEyLjVcblx0XHQvLyBQbHVzIGZvciBvbGQgV2ViS2l0LCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgY29sbGVjdGlvbnNcblx0XHQvLyAoZS5nLiwgYHR5cGVvZiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKSA9PT0gXCJmdW5jdGlvblwiYCkuIChnaC00NzU2KVxuXHRcdHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIiAmJlxuXHRcdFx0dHlwZW9mIG9iai5pdGVtICE9PSBcImZ1bmN0aW9uXCI7XG5cdH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxuXG5cblx0dmFyIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgPSB7XG5cdFx0dHlwZTogdHJ1ZSxcblx0XHRzcmM6IHRydWUsXG5cdFx0bm9uY2U6IHRydWUsXG5cdFx0bm9Nb2R1bGU6IHRydWVcblx0fTtcblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBub2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIGksIHZhbCxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNjQrLCBFZGdlIDE4K1xuXHRcdFx0XHQvLyBTb21lIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIFwibm9uY2VcIiBwcm9wZXJ0eSBvbiBzY3JpcHRzLlxuXHRcdFx0XHQvLyBPbiB0aGUgb3RoZXIgaGFuZCwganVzdCB1c2luZyBgZ2V0QXR0cmlidXRlYCBpcyBub3QgZW5vdWdoIGFzXG5cdFx0XHRcdC8vIHRoZSBgbm9uY2VgIGF0dHJpYnV0ZSBpcyByZXNldCB0byBhbiBlbXB0eSBzdHJpbmcgd2hlbmV2ZXIgaXRcblx0XHRcdFx0Ly8gYmVjb21lcyBicm93c2luZy1jb250ZXh0IGNvbm5lY3RlZC5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvaHRtbC9pc3N1ZXMvMjM2OVxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jbm9uY2UtYXR0cmlidXRlc1xuXHRcdFx0XHQvLyBUaGUgYG5vZGUuZ2V0QXR0cmlidXRlYCBjaGVjayB3YXMgYWRkZWQgZm9yIHRoZSBzYWtlIG9mXG5cdFx0XHRcdC8vIGBqUXVlcnkuZ2xvYmFsRXZhbGAgc28gdGhhdCBpdCBjYW4gZmFrZSBhIG5vbmNlLWNvbnRhaW5pbmcgbm9kZVxuXHRcdFx0XHQvLyB2aWEgYW4gb2JqZWN0LlxuXHRcdFx0XHR2YWwgPSBub2RlWyBpIF0gfHwgbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoIGkgKTtcblx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSggaSwgdmFsICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG5cblxuZnVuY3Rpb24gdG9UeXBlKCBvYmogKSB7XG5cdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIG9iaiArIFwiXCI7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiID9cblx0XHRjbGFzczJ0eXBlWyB0b1N0cmluZy5jYWxsKCBvYmogKSBdIHx8IFwib2JqZWN0XCIgOlxuXHRcdHR5cGVvZiBvYmo7XG59XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjYuMFwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXZlbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICggaSArIDEgKSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0b2RkOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gaSAlIDI7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIHByb3ZpZGVkIGNvbnRleHQ7IGZhbGxzIGJhY2sgdG8gdGhlIGdsb2JhbCBvbmVcblx0Ly8gaWYgbm90IHNwZWNpZmllZC5cblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUsIG9wdGlvbnMsIGRvYyApIHtcblx0XHRET01FdmFsKCBjb2RlLCB7IG5vbmNlOiBvcHRpb25zICYmIG9wdGlvbnMubm9uY2UgfSwgZG9jICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlMaWtlKCBPYmplY3QoIGFyciApICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggcmV0LFxuXHRcdFx0XHRcdHR5cGVvZiBhcnIgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0XHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0fSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy42XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIxLTAyLTE2XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbSAmJiBlbGVtLm5hbWVzcGFjZVVSSSxcblx0XHRkb2NFbGVtID0gZWxlbSAmJiAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggZG9jID09IGRvY3VtZW50IHx8IGRvYy5ub2RlVHlwZSAhPT0gOSB8fCAhZG9jLmRvY3VtZW50RWxlbWVudCApIHtcblx0XHRyZXR1cm4gZG9jdW1lbnQ7XG5cdH1cblxuXHQvLyBVcGRhdGUgZ2xvYmFsIHZhcmlhYmxlc1xuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvY3VtZW50ICk7XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4K1xuXHQvLyBBY2Nlc3NpbmcgaWZyYW1lIGRvY3VtZW50cyBhZnRlciB1bmxvYWQgdGhyb3dzIFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvcnMgKGpRdWVyeSAjMTM5MzYpXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggcHJlZmVycmVkRG9jICE9IGRvY3VtZW50ICYmXG5cdFx0KCBzdWJXaW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyApICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSAxMSssIEVkZ2UgMTIgLSAxOCssIENocm9tZSA8PTE2IC0gMjUgb25seSwgRmlyZWZveCA8PTMuNiAtIDMxIG9ubHksXG5cdC8vIFNhZmFyaSA0IC0gNSBvbmx5LCBPcGVyYSA8PTExLjYgLSAxMi54IG9ubHlcblx0Ly8gSUUvRWRnZSAmIG9sZGVyIGJyb3dzZXJzIGRvbid0IHN1cHBvcnQgdGhlIDpzY29wZSBwc2V1ZG8tY2xhc3MuXG5cdC8vIFN1cHBvcnQ6IFNhZmFyaSA2LjAgb25seVxuXHQvLyBTYWZhcmkgNi4wIHN1cHBvcnRzIDpzY29wZSBidXQgaXQncyBhbiBhbGlhcyBvZiA6cm9vdCB0aGVyZS5cblx0c3VwcG9ydC5zY29wZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXHRcdHJldHVybiB0eXBlb2YgZWwucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0IWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOnNjb3BlIGZpZWxkc2V0IGRpdlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiICk7XG5cdH0gKTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlQ29tbWVudCggXCJcIiApICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCIqXCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gSUQgZmlsdGVyIGFuZCBmaW5kXG5cdGlmICggc3VwcG9ydC5nZXRCeUlkICkge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblx0XHRcdFx0cmV0dXJuIGVsZW0gPyBbIGVsZW0gXSA6IFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbm9kZSwgaSwgZWxlbXMsXG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0Ly8gVmVyaWZ5IHRoZSBpZCBhdHRyaWJ1dGVcblx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRmFsbCBiYWNrIG9uIGdldEVsZW1lbnRzQnlOYW1lXG5cdFx0XHRcdFx0ZWxlbXMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKCBpZCApO1xuXHRcdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG5cblx0Ly8gVGFnXG5cdEV4cHIuZmluZFsgXCJUQUdcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbIFwiQ0xBU1NcIiBdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggY2xhc3NOYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8qIFFTQS9tYXRjaGVzU2VsZWN0b3Jcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFFTQSBhbmQgbWF0Y2hlc1NlbGVjdG9yIHN1cHBvcnRcblxuXHQvLyBtYXRjaGVzU2VsZWN0b3IoOmFjdGl2ZSkgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKElFOS9PcGVyYSAxMS41KVxuXHRyYnVnZ3lNYXRjaGVzID0gW107XG5cblx0Ly8gcVNhKDpmb2N1cykgcmVwb3J0cyBmYWxzZSB3aGVuIHRydWUgKENocm9tZSAyMSlcblx0Ly8gV2UgYWxsb3cgdGhpcyBiZWNhdXNlIG9mIGEgYnVnIGluIElFOC85IHRoYXQgdGhyb3dzIGFuIGVycm9yXG5cdC8vIHdoZW5ldmVyIGBkb2N1bWVudC5hY3RpdmVFbGVtZW50YCBpcyBhY2Nlc3NlZCBvbiBhbiBpZnJhbWVcblx0Ly8gU28sIHdlIGFsbG93IDpmb2N1cyB0byBwYXNzIHRocm91Z2ggUVNBIGFsbCB0aGUgdGltZSB0byBhdm9pZCB0aGUgSUUgZXJyb3Jcblx0Ly8gU2VlIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoICggc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSApICkge1xuXG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHR2YXIgaW5wdXQ7XG5cblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzU5XG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlubmVySFRNTCA9IFwiPGEgaWQ9J1wiICsgZXhwYW5kbyArIFwiJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgaWQ9J1wiICsgZXhwYW5kbyArIFwiLVxcclxcXFwnIG1zYWxsb3djYXB0dXJlPScnPlwiICtcblx0XHRcdFx0XCI8b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTgsIE9wZXJhIDExLTEyLjE2XG5cdFx0XHQvLyBOb3RoaW5nIHNob3VsZCBiZSBzZWxlY3RlZCB3aGVuIGVtcHR5IHN0cmluZ3MgZm9sbG93IF49IG9yICQ9IG9yICo9XG5cdFx0XHQvLyBUaGUgdGVzdCBhdHRyaWJ1dGUgbXVzdCBiZSB1bmtub3duIGluIE9wZXJhIGJ1dCBcInNhZmVcIiBmb3IgV2luUlRcblx0XHRcdC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlttc2FsbG93Y2FwdHVyZV49JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbc2VsZWN0ZWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwifj1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHRcdC8vIElFIDExL0VkZ2UgZG9uJ3QgZmluZCBlbGVtZW50cyBvbiBhIGBbbmFtZT0nJ11gIHF1ZXJ5IGluIHNvbWUgY2FzZXMuXG5cdFx0XHQvLyBBZGRpbmcgYSB0ZW1wb3JhcnkgYXR0cmlidXRlIHRvIHRoZSBkb2N1bWVudCBiZWZvcmUgdGhlIHNlbGVjdGlvbiB3b3Jrc1xuXHRcdFx0Ly8gYXJvdW5kIHRoZSBpc3N1ZS5cblx0XHRcdC8vIEludGVyZXN0aW5nbHksIElFIDEwICYgb2xkZXIgZG9uJ3Qgc2VlbSB0byBoYXZlIHRoZSBpc3N1ZS5cblx0XHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIlwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9JyddXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqbmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKj1cIiArXG5cdFx0XHRcdFx0d2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmNoZWNrZWRcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmNoZWNrZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2libGluZy1jb21iaW5hdG9yIHNlbGVjdG9yYCBmYWlsc1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLiMuK1srfl1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9My42IC0gNSBvbmx5XG5cdFx0XHQvLyBPbGQgRmlyZWZveCBkb2Vzbid0IHRocm93IG9uIGEgYmFkbHktZXNjYXBlZCBpZGVudGlmaWVyLlxuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCJcXFxcXFxmXCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIltcXFxcclxcXFxuXFxcXGZdXCIgKTtcblx0XHR9ICk7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nJyBkaXNhYmxlZD0nZGlzYWJsZWQnPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBXaW5kb3dzIDggTmF0aXZlIEFwcHNcblx0XHRcdC8vIFRoZSB0eXBlIGFuZCBuYW1lIGF0dHJpYnV0ZXMgYXJlIHJlc3RyaWN0ZWQgZHVyaW5nIC5pbm5lckhUTUwgYXNzaWdubWVudFxuXHRcdFx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPWRdXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmVuYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTktMTErXG5cdFx0XHQvLyBJRSdzIDpkaXNhYmxlZCBzZWxlY3RvciBkb2VzIG5vdCBwaWNrIHVwIHRoZSBjaGlsZHJlbiBvZiBkaXNhYmxlZCBmaWVsZHNldHNcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuZGlzYWJsZWQgPSB0cnVlO1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpkaXNhYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IE9wZXJhIDEwIC0gMTEgb25seVxuXHRcdFx0Ly8gT3BlcmEgMTAtMTEgZG9lcyBub3QgdGhyb3cgb24gcG9zdC1jb21tYSBpbnZhbGlkIHBzZXVkb3Ncblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiKiw6eFwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIsLio6XCIgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoICggbWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yICkgKSApICkge1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdC8vIENoZWNrIHRvIHNlZSBpZiBpdCdzIHBvc3NpYmxlIHRvIGRvIG1hdGNoZXNTZWxlY3RvclxuXHRcdFx0Ly8gb24gYSBkaXNjb25uZWN0ZWQgbm9kZSAoSUUgOSlcblx0XHRcdHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggPSBtYXRjaGVzLmNhbGwoIGVsLCBcIipcIiApO1xuXG5cdFx0XHQvLyBUaGlzIHNob3VsZCBmYWlsIHdpdGggYW4gZXhjZXB0aW9uXG5cdFx0XHQvLyBHZWNrbyBkb2VzIG5vdCBlcnJvciwgcmV0dXJucyBmYWxzZSBpbnN0ZWFkXG5cdFx0XHRtYXRjaGVzLmNhbGwoIGVsLCBcIltzIT0nJ106eFwiICk7XG5cdFx0XHRyYnVnZ3lNYXRjaGVzLnB1c2goIFwiIT1cIiwgcHNldWRvcyApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oIFwifFwiICkgKTtcblx0cmJ1Z2d5TWF0Y2hlcyA9IHJidWdneU1hdGNoZXMubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneU1hdGNoZXMuam9pbiggXCJ8XCIgKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgc2VsZi1leGNsdXNpdmVcblx0Ly8gQXMgaW4sIGFuIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiBpdHNlbGZcblx0Y29udGFpbnMgPSBoYXNDb21wYXJlIHx8IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb250YWlucyApID9cblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdHZhciBhZG93biA9IGEubm9kZVR5cGUgPT09IDkgPyBhLmRvY3VtZW50RWxlbWVudCA6IGEsXG5cdFx0XHRcdGJ1cCA9IGIgJiYgYi5wYXJlbnROb2RlO1xuXHRcdFx0cmV0dXJuIGEgPT09IGJ1cCB8fCAhISggYnVwICYmIGJ1cC5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGFkb3duLmNvbnRhaW5zID9cblx0XHRcdFx0XHRhZG93bi5jb250YWlucyggYnVwICkgOlxuXHRcdFx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYnVwICkgJiAxNlxuXHRcdFx0KSApO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoICggYiA9IGIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0XHRcdGlmICggYiA9PT0gYSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG5cblx0LyogU29ydGluZ1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gRG9jdW1lbnQgb3JkZXIgc29ydGluZ1xuXHRzb3J0T3JkZXIgPSBoYXNDb21wYXJlID9cblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBGbGFnIGZvciBkdXBsaWNhdGUgcmVtb3ZhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHQvLyBTb3J0IG9uIG1ldGhvZCBleGlzdGVuY2UgaWYgb25seSBvbmUgaW5wdXQgaGFzIGNvbXBhcmVEb2N1bWVudFBvc2l0aW9uXG5cdFx0dmFyIGNvbXBhcmUgPSAhYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAtICFiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO1xuXHRcdGlmICggY29tcGFyZSApIHtcblx0XHRcdHJldHVybiBjb21wYXJlO1xuXHRcdH1cblxuXHRcdC8vIENhbGN1bGF0ZSBwb3NpdGlvbiBpZiBib3RoIGlucHV0cyBiZWxvbmcgdG8gdGhlIHNhbWUgZG9jdW1lbnRcblx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCggIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSApICkge1xuXG5cdFx0XHQvLyBDaG9vc2UgdGhlIGZpcnN0IGVsZW1lbnQgdGhhdCBpcyByZWxhdGVkIHRvIG91ciBwcmVmZXJyZWQgZG9jdW1lbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGEgPT0gZG9jdW1lbnQgfHwgYS5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBhICkgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYiA9PSBkb2N1bWVudCB8fCBiLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGIgKSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1haW50YWluIG9yaWdpbmFsIG9yZGVyXG5cdFx0XHRyZXR1cm4gc29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdHJldHVybiBhID09IGRvY3VtZW50ID8gLTEgOlxuXHRcdFx0XHRiID09IGRvY3VtZW50ID8gMSA6XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblxuXHRcdC8vIElmIHRoZSBub2RlcyBhcmUgc2libGluZ3MsIHdlIGNhbiBkbyBhIHF1aWNrIGNoZWNrXG5cdFx0fSBlbHNlIGlmICggYXVwID09PSBidXAgKSB7XG5cdFx0XHRyZXR1cm4gc2libGluZ0NoZWNrKCBhLCBiICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlIHdlIG5lZWQgZnVsbCBsaXN0cyBvZiB0aGVpciBhbmNlc3RvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjdXIgPSBhO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbIGkgXSA9PT0gYnBbIGkgXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFsgaSBdLCBicFsgaSBdICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBlcWVxZXEgKi9cblx0XHRcdGFwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gLTEgOlxuXHRcdFx0YnBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdC8qIGVzbGludC1lbmFibGUgZXFlcWVxICovXG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHRzZXREb2N1bWVudCggZWxlbSApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXG5cdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0ZWxlbS5kb2N1bWVudCAmJiBlbGVtLmRvY3VtZW50Lm5vZGVUeXBlICE9PSAxMSApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuICggc2VsICsgXCJcIiApLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoICggZWxlbSA9IHJlc3VsdHNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKCBub2RlID0gZWxlbVsgaSsrIF0gKSApIHtcblxuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWyAzIF0gPSAoIG1hdGNoWyAzIF0gfHwgbWF0Y2hbIDQgXSB8fFxuXHRcdFx0XHRtYXRjaFsgNSBdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAyIF0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbIDMgXSA9IFwiIFwiICsgbWF0Y2hbIDMgXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWyAxIF0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblxuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbIDQgXSA9ICsoIG1hdGNoWyA0IF0gP1xuXHRcdFx0XHRcdG1hdGNoWyA1IF0gKyAoIG1hdGNoWyA2IF0gfHwgMSApIDpcblx0XHRcdFx0XHQyICogKCBtYXRjaFsgMyBdID09PSBcImV2ZW5cIiB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbIDUgXSA9ICsoICggbWF0Y2hbIDcgXSArIG1hdGNoWyA4IF0gKSB8fCBtYXRjaFsgMyBdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFsgNiBdICYmIG1hdGNoWyAyIF07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByWyBcIkNISUxEXCIgXS50ZXN0KCBtYXRjaFsgMCBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFsgMyBdICkge1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gbWF0Y2hbIDQgXSB8fCBtYXRjaFsgNSBdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoIGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApICkgJiZcblxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KCBleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGggKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQoIHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcdFx0XCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkgKSAmJiBjbGFzc0NhY2hlKFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdChcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHxcblx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdFx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fFxuXHRcdFx0XHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIF9hcmd1bWVudCwgZmlyc3QsIGxhc3QgKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gdHlwZS5zbGljZSggMCwgMyApICE9PSBcIm50aFwiLFxuXHRcdFx0XHRmb3J3YXJkID0gdHlwZS5zbGljZSggLTQgKSAhPT0gXCJsYXN0XCIsXG5cdFx0XHRcdG9mVHlwZSA9IHdoYXQgPT09IFwib2YtdHlwZVwiO1xuXG5cdFx0XHRyZXR1cm4gZmlyc3QgPT09IDEgJiYgbGFzdCA9PT0gMCA/XG5cblx0XHRcdFx0Ly8gU2hvcnRjdXQgZm9yIDpudGgtKihuKVxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gISFlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRcdH0gOlxuXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSBub2RlWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleCAmJiBjYWNoZVsgMiBdO1xuXHRcdFx0XHRcdFx0XHRub2RlID0gbm9kZUluZGV4ICYmIHBhcmVudC5jaGlsZE5vZGVzWyBub2RlSW5kZXggXTtcblxuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdFx0ZGlmZiA9IG5vZGVJbmRleDtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLilcblx0XHRcdFx0XHRcdFx0Ly8gb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0XHRpZiAoIGRpZmYgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCsrZGlmZiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBDYWNoZSB0aGUgaW5kZXggb2YgZWFjaCBlbmNvdW50ZXJlZCBlbGVtZW50XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblxuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaSBdID0gISggbWF0Y2hlc1sgaSBdID0gZWxlbSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblxuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdCggbGFuZyB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBcInhtbDpsYW5nXCIgKSB8fCBlbGVtLmdldEF0dHJpYnV0ZSggXCJsYW5nXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKCBlbGVtID0gZWxlbS5wYXJlbnROb2RlICkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG5cdFx0XHRcdCggIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkgKSAmJlxuXHRcdFx0XHQhISggZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCApO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGZhbHNlICksXG5cdFx0XCJkaXNhYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggdHJ1ZSApLFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkICkgfHxcblx0XHRcdFx0KCBub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQgKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1sgXCJlbXB0eVwiIF0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoIGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSApID09IG51bGwgfHxcblx0XHRcdFx0XHRhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0gKSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSApLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgP1xuXHRcdFx0XHRhcmd1bWVudCArIGxlbmd0aCA6XG5cdFx0XHRcdGFyZ3VtZW50ID4gbGVuZ3RoID9cblx0XHRcdFx0XHRsZW5ndGggOlxuXHRcdFx0XHRcdGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1sgXCJudGhcIiBdID0gRXhwci5wc2V1ZG9zWyBcImVxXCIgXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKCBtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWyAwIF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKCB0b2tlbnMgPSBbXSApICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoICggbWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbIDAgXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSApO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKCBtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkgKSAmJiAoICFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KCBtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSApICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCgge1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSApO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1sgaSBdLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IDpcblxuXHRcdC8vIENoZWNrIGFnYWluc3QgYWxsIGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50c1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgb2xkQ2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gY29tYmluYXRvciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8ICggZWxlbVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKCBvbGRDYWNoZSA9IHVuaXF1ZUNhY2hlWyBrZXkgXSApICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuICggbmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAoIG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzWyBpIF0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbIDAgXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1sgaSBdLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyhcblx0XHRcdFx0c2VsZWN0b3IgfHwgXCIqXCIsXG5cdFx0XHRcdGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsXG5cdFx0XHRcdFtdXG5cdFx0XHQpLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICggZWxlbSA9IHRlbXBbIGkgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbIGkgXSBdID0gISggbWF0Y2hlckluWyBwb3N0TWFwWyBpIF0gXSA9IGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblxuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKCBtYXRjaGVySW5bIGkgXSA9IGVsZW0gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAoIG1hdGNoZXJPdXQgPSBbXSApLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSAmJlxuXHRcdFx0XHRcdFx0KCB0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFsgaSBdICkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFsgdGVtcCBdID0gISggcmVzdWx0c1sgdGVtcCBdID0gZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Ub2tlbnMoIHRva2VucyApIHtcblx0dmFyIGNoZWNrQ29udGV4dCwgbWF0Y2hlciwgaixcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdGxlYWRpbmdSZWxhdGl2ZSA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMCBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbIFwiIFwiIF0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdCggY2hlY2tDb250ZXh0ID0gY29udGV4dCApLm5vZGVUeXBlID9cblx0XHRcdFx0XHRtYXRjaENvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0XHRtYXRjaEFueUNvbnRleHQoIGVsZW0sIGNvbnRleHQsIHhtbCApICk7XG5cblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBpIF0udHlwZSBdICkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvciggZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIgKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1sgaSBdLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zWyBpIF0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyBqIF0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdHRva2Vuc1xuXHRcdFx0XHRcdFx0LnNsaWNlKCAwLCBpIC0gMSApXG5cdFx0XHRcdFx0XHQuY29uY2F0KCB7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSApXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAoIHRva2VucyA9IHRva2Vucy5zbGljZSggaiApICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kWyBcIlRBR1wiIF0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKCBkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSApLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRcdGlmICggIWNvbnRleHQgJiYgZWxlbS5vd25lckRvY3VtZW50ICE9IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQgfHwgZG9jdW1lbnQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXG5cdFx0XHRcdFx0Ly8gVGhleSB3aWxsIGhhdmUgZ29uZSB0aHJvdWdoIGFsbCBwb3NzaWJsZSBtYXRjaGVyc1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSApICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gc2V0TWF0Y2hlcnNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlciggdW5tYXRjaGVkLCBzZXRNYXRjaGVkLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggc2VlZCApIHtcblxuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKCB1bm1hdGNoZWRbIGkgXSB8fCBzZXRNYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkWyBpIF0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblxuXHRcdC8vIEdlbmVyYXRlIGEgZnVuY3Rpb24gb2YgcmVjdXJzaXZlIGZ1bmN0aW9ucyB0aGF0IGNhbiBiZSB1c2VkIHRvIGNoZWNrIGVhY2ggZWxlbWVudFxuXHRcdGlmICggIW1hdGNoICkge1xuXHRcdFx0bWF0Y2ggPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHR9XG5cdFx0aSA9IG1hdGNoLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGNhY2hlZCA9IG1hdGNoZXJGcm9tVG9rZW5zKCBtYXRjaFsgaSBdICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKFxuXHRcdFx0c2VsZWN0b3IsXG5cdFx0XHRtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKVxuXHRcdCk7XG5cblx0XHQvLyBTYXZlIHNlbGVjdG9yIGFuZCB0b2tlbml6YXRpb25cblx0XHRjYWNoZWQuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0fVxuXHRyZXR1cm4gY2FjaGVkO1xufTtcblxuLyoqXG4gKiBBIGxvdy1sZXZlbCBzZWxlY3Rpb24gZnVuY3Rpb24gdGhhdCB3b3JrcyB3aXRoIFNpenpsZSdzIGNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb25zXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gc2VsZWN0b3IgQSBzZWxlY3RvciBvciBhIHByZS1jb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uIGJ1aWx0IHdpdGggU2l6emxlLmNvbXBpbGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gY29udGV4dFxuICogQHBhcmFtIHtBcnJheX0gW3Jlc3VsdHNdXG4gKiBAcGFyYW0ge0FycmF5fSBbc2VlZF0gQSBzZXQgb2YgZWxlbWVudHMgdG8gbWF0Y2ggYWdhaW5zdFxuICovXG5zZWxlY3QgPSBTaXp6bGUuc2VsZWN0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgaSwgdG9rZW5zLCB0b2tlbiwgdHlwZSwgZmluZCxcblx0XHRjb21waWxlZCA9IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICYmIHNlbGVjdG9yLFxuXHRcdG1hdGNoID0gIXNlZWQgJiYgdG9rZW5pemUoICggc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvciApICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICggdG9rZW4gPSB0b2tlbnNbIDAgXSApLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDEgXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFsgXCJJRFwiIF0oIHRva2VuLm1hdGNoZXNbIDAgXVxuXHRcdFx0XHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSwgY29udGV4dCApIHx8IFtdIClbIDAgXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbIFwibmVlZHNDb250ZXh0XCIgXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1sgaSBdO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICggdHlwZSA9IHRva2VuLnR5cGUgKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKCBmaW5kID0gRXhwci5maW5kWyB0eXBlIF0gKSApIHtcblxuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoIHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbIDAgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1sgMCBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHRcblx0XHRcdFx0KSApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0IWNvbnRleHQgfHwgcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KCBcIlwiICkuc29ydCggc29ydE9yZGVyICkuam9pbiggXCJcIiApID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApICkgJiAxO1xufSApO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcImhyZWZcIiApID09PSBcIiNcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRlbC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IFwiXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgX25hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZ2V0QXR0cmlidXRlTm9kZSB0byBmZXRjaCBib29sZWFucyB3aGVuIGdldEF0dHJpYnV0ZSBsaWVzXG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZSggXCJkaXNhYmxlZFwiICkgPT0gbnVsbDtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHR9XG5cdH0gKTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSApKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cblx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn1cbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgcHJpbWFyeSBEZWZlcnJlZFxuXHRcdFx0cHJpbWFyeSA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBjYWxsYmFjayBmYWN0b3J5XG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmVzb2x2ZUNvbnRleHRzWyBpIF0gPSB0aGlzO1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gc2xpY2UuY2FsbCggYXJndW1lbnRzICkgOiB2YWx1ZTtcblx0XHRcdFx0XHRpZiAoICEoIC0tcmVtYWluaW5nICkgKSB7XG5cdFx0XHRcdFx0XHRwcmltYXJ5LnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBwcmltYXJ5LmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIHByaW1hcnkucmVqZWN0LFxuXHRcdFx0XHQhcmVtYWluaW5nICk7XG5cblx0XHRcdC8vIFVzZSAudGhlbigpIHRvIHVud3JhcCBzZWNvbmRhcnkgdGhlbmFibGVzIChjZi4gZ2gtMzAwMClcblx0XHRcdGlmICggcHJpbWFyeS5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gcHJpbWFyeS50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBwcmltYXJ5LnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBwcmltYXJ5LnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcblxuXG4vLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcbnZhciBybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2c7XG5cbi8vIFVzZWQgYnkgY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuZnVuY3Rpb24gZmNhbWVsQ2FzZSggX2FsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxuXHR2YXIgaXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cdFx0fSxcblx0XHRjb21wb3NlZCA9IHsgY29tcG9zZWQ6IHRydWUgfTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBpT1MgMTAuMCAtIDEwLjIgb25seVxuXHQvLyBDaGVjayBhdHRhY2htZW50IGFjcm9zcyBzaGFkb3cgRE9NIGJvdW5kYXJpZXMgd2hlbiBwb3NzaWJsZSAoZ2gtMzUwNClcblx0Ly8gU3VwcG9ydDogaU9TIDEwLjAtMTAuMiBvbmx5XG5cdC8vIEVhcmx5IGlPUyAxMCB2ZXJzaW9ucyBzdXBwb3J0IGBhdHRhY2hTaGFkb3dgIGJ1dCBub3QgYGdldFJvb3ROb2RlYCxcblx0Ly8gbGVhZGluZyB0byBlcnJvcnMuIFdlIG5lZWQgdG8gY2hlY2sgZm9yIGBnZXRSb290Tm9kZWAuXG5cdGlmICggZG9jdW1lbnRFbGVtZW50LmdldFJvb3ROb2RlICkge1xuXHRcdGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Um9vdE5vZGUoIGNvbXBvc2VkICkgPT09IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHR9O1xuXHR9XG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0aXNBdHRhY2hlZCggZWxlbSApICYmXG5cblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiO1xuXHR9O1xuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHQvLyBJRSA8PTkgcmVwbGFjZXMgPG9wdGlvbj4gdGFncyB3aXRoIHRoZWlyIGNvbnRlbnRzIHdoZW4gaW5zZXJ0ZWQgb3V0c2lkZSBvZlxuXHQvLyB0aGUgc2VsZWN0IGVsZW1lbnQuXG5cdGRpdi5pbm5lckhUTUwgPSBcIjxvcHRpb24+PC9vcHRpb24+XCI7XG5cdHN1cHBvcnQub3B0aW9uID0gISFkaXYubGFzdENoaWxkO1xufSApKCk7XG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuaWYgKCAhc3VwcG9ydC5vcHRpb24gKSB7XG5cdHdyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbiA9IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXTtcbn1cblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG52YXIgcnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIE9ubHkgYXR0YWNoIGV2ZW50cyB0byBvYmplY3RzIHRoYXQgYWNjZXB0IGRhdGFcblx0XHRpZiAoICFhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0gT2JqZWN0LmNyZWF0ZSggbnVsbCApO1xuXHRcdH1cblx0XHRpZiAoICEoIGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlICkgKSB7XG5cdFx0XHRldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSA9IGZ1bmN0aW9uKCBlICkge1xuXG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IFwidW5kZWZpbmVkXCIgJiYgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID9cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guYXBwbHkoIGVsZW0sIGFyZ3VtZW50cyApIDogdW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgZXZlbnRzIHNlcGFyYXRlZCBieSBhIHNwYWNlXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0b3JpZ1R5cGU6IG9yaWdUeXBlLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRoYW5kbGVyOiBoYW5kbGVyLFxuXHRcdFx0XHRndWlkOiBoYW5kbGVyLmd1aWQsXG5cdFx0XHRcdHNlbGVjdG9yOiBzZWxlY3Rvcixcblx0XHRcdFx0bmVlZHNDb250ZXh0OiBzZWxlY3RvciAmJiBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSxcblx0XHRcdFx0bmFtZXNwYWNlOiBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiIClcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoIGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gKSApIHtcblx0XHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSA9IFtdO1xuXHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50ID0gMDtcblxuXHRcdFx0XHQvLyBPbmx5IHVzZSBhZGRFdmVudExpc3RlbmVyIGlmIHRoZSBzcGVjaWFsIGV2ZW50cyBoYW5kbGVyIHJldHVybnMgZmFsc2Vcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC5zZXR1cCB8fFxuXHRcdFx0XHRcdHNwZWNpYWwuc2V0dXAuY2FsbCggZWxlbSwgZGF0YSwgbmFtZXNwYWNlcywgZXZlbnRIYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0uYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdFx0XHRcdGVsZW0uYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgZXZlbnRIYW5kbGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBzcGVjaWFsLmFkZCApIHtcblx0XHRcdFx0c3BlY2lhbC5hZGQuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cblx0XHRcdFx0aWYgKCAhaGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlci5ndWlkID0gaGFuZGxlci5ndWlkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0byB0aGUgZWxlbWVudCdzIGhhbmRsZXIgbGlzdCwgZGVsZWdhdGVzIGluIGZyb250XG5cdFx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGhhbmRsZXJzLmRlbGVnYXRlQ291bnQrKywgMCwgaGFuZGxlT2JqICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gS2VlcCB0cmFjayBvZiB3aGljaCBldmVudHMgaGF2ZSBldmVyIGJlZW4gdXNlZCwgZm9yIGV2ZW50IG9wdGltaXphdGlvblxuXHRcdFx0alF1ZXJ5LmV2ZW50Lmdsb2JhbFsgdHlwZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0fSxcblxuXHQvLyBEZXRhY2ggYW4gZXZlbnQgb3Igc2V0IG9mIGV2ZW50cyBmcm9tIGFuIGVsZW1lbnRcblx0cmVtb3ZlOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApIHtcblxuXHRcdHZhciBqLCBvcmlnQ291bnQsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICkgJiYgZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHRpZiAoICFlbGVtRGF0YSB8fCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1sgdCBdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbIDEgXTtcblx0XHRcdG5hbWVzcGFjZXMgPSAoIHRtcFsgMiBdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFVuYmluZCBhbGwgZXZlbnRzIChvbiB0aGlzIG5hbWVzcGFjZSwgaWYgcHJvdmlkZWQpIGZvciB0aGUgZWxlbWVudFxuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSArIHR5cGVzWyB0IF0sIGhhbmRsZXIsIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXHRcdFx0aGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSB8fCBbXTtcblx0XHRcdHRtcCA9IHRtcFsgMiBdICYmXG5cdFx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApO1xuXG5cdFx0XHQvLyBSZW1vdmUgbWF0Y2hpbmcgZXZlbnRzXG5cdFx0XHRvcmlnQ291bnQgPSBqID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBqIF07XG5cblx0XHRcdFx0aWYgKCAoIG1hcHBlZFR5cGVzIHx8IG9yaWdUeXBlID09PSBoYW5kbGVPYmoub3JpZ1R5cGUgKSAmJlxuXHRcdFx0XHRcdCggIWhhbmRsZXIgfHwgaGFuZGxlci5ndWlkID09PSBoYW5kbGVPYmouZ3VpZCApICYmXG5cdFx0XHRcdFx0KCAhdG1wIHx8IHRtcC50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSAmJlxuXHRcdFx0XHRcdCggIXNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBoYW5kbGVPYmouc2VsZWN0b3IgfHxcblx0XHRcdFx0XHRcdHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHxcblx0XHRcdFx0XHRzcGVjaWFsLnRlYXJkb3duLmNhbGwoIGVsZW0sIG5hbWVzcGFjZXMsIGVsZW1EYXRhLmhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZWxlbURhdGEuaGFuZGxlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRkZWxldGUgZXZlbnRzWyB0eXBlIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIGRhdGEgYW5kIHRoZSBleHBhbmRvIGlmIGl0J3Mgbm8gbG9uZ2VyIHVzZWRcblx0XHRpZiAoIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBldmVudHMgKSApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblx0XHR9XG5cdH0sXG5cblx0ZGlzcGF0Y2g6IGZ1bmN0aW9uKCBuYXRpdmVFdmVudCApIHtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXG5cdFx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHRcdGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKSxcblxuXHRcdFx0aGFuZGxlcnMgPSAoXG5cdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKVxuXHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Y2xpY2s6IHtcblxuXHRcdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgdG8gZW5zdXJlIGNvcnJlY3Qgc3RhdGUgZm9yIGNoZWNrYWJsZSBpbnB1dHNcblx0XHRcdHNldHVwOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdC8vIGRhdGFQcml2LnNldCggZWwsIFwiY2xpY2tcIiwgLi4uIClcblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiwgcmV0dXJuVHJ1ZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSxcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJpbmcgYSBjbGlja1xuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHRsZXZlcmFnZU5hdGl2ZSggZWwsIFwiY2xpY2tcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0sXG5cblx0XHRcdC8vIEZvciBjcm9zcy1icm93c2VyIGNvbnNpc3RlbmN5LCBzdXBwcmVzcyBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdC8vIEFsc28gcHJldmVudCBpdCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgbGV2ZXJhZ2VkIG5hdGl2ZS1ldmVudCBzdGFja1xuXHRcdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcblx0XHRcdFx0cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoIHRhcmdldC50eXBlICkgJiZcblx0XHRcdFx0XHR0YXJnZXQuY2xpY2sgJiYgbm9kZU5hbWUoIHRhcmdldCwgXCJpbnB1dFwiICkgJiZcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRhcmdldCwgXCJjbGlja1wiICkgfHxcblx0XHRcdFx0XHRub2RlTmFtZSggdGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIEVuc3VyZSB0aGUgcHJlc2VuY2Ugb2YgYW4gZXZlbnQgbGlzdGVuZXIgdGhhdCBoYW5kbGVzIG1hbnVhbGx5LXRyaWdnZXJlZFxuLy8gc3ludGhldGljIGV2ZW50cyBieSBpbnRlcnJ1cHRpbmcgcHJvZ3Jlc3MgdW50aWwgcmVpbnZva2VkIGluIHJlc3BvbnNlIHRvXG4vLyAqbmF0aXZlKiBldmVudHMgdGhhdCBpdCBmaXJlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhhdCBzdGF0ZSBjaGFuZ2VzIGhhdmVcbi8vIGFscmVhZHkgb2NjdXJyZWQgYmVmb3JlIG90aGVyIGxpc3RlbmVycyBhcmUgaW52b2tlZC5cbmZ1bmN0aW9uIGxldmVyYWdlTmF0aXZlKCBlbCwgdHlwZSwgZXhwZWN0U3luYyApIHtcblxuXHQvLyBNaXNzaW5nIGV4cGVjdFN5bmMgaW5kaWNhdGVzIGEgdHJpZ2dlciBjYWxsLCB3aGljaCBtdXN0IGZvcmNlIHNldHVwIHRocm91Z2ggalF1ZXJ5LmV2ZW50LmFkZFxuXHRpZiAoICFleHBlY3RTeW5jICkge1xuXHRcdGlmICggZGF0YVByaXYuZ2V0KCBlbCwgdHlwZSApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwgcmV0dXJuVHJ1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZWdpc3RlciB0aGUgY29udHJvbGxlciBhcyBhIHNwZWNpYWwgdW5pdmVyc2FsIGhhbmRsZXIgZm9yIGFsbCBldmVudCBuYW1lc3BhY2VzXG5cdGRhdGFQcml2LnNldCggZWwsIHR5cGUsIGZhbHNlICk7XG5cdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCB7XG5cdFx0bmFtZXNwYWNlOiBmYWxzZSxcblx0XHRoYW5kbGVyOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgbm90QXN5bmMsIHJlc3VsdCxcblx0XHRcdFx0c2F2ZWQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0aWYgKCAoIGV2ZW50LmlzVHJpZ2dlciAmIDEgKSAmJiB0aGlzWyB0eXBlIF0gKSB7XG5cblx0XHRcdFx0Ly8gSW50ZXJydXB0IHByb2Nlc3Npbmcgb2YgdGhlIG91dGVyIHN5bnRoZXRpYyAudHJpZ2dlcigpZWQgZXZlbnRcblx0XHRcdFx0Ly8gU2F2ZWQgZGF0YSBzaG91bGQgYmUgZmFsc2UgaW4gc3VjaCBjYXNlcywgYnV0IG1pZ2h0IGJlIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3Rcblx0XHRcdFx0Ly8gZnJvbSBhbiBhc3luYyBuYXRpdmUgaGFuZGxlciAoZ2gtNDM1MClcblx0XHRcdFx0aWYgKCAhc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgYXJndW1lbnRzIGZvciB1c2Ugd2hlbiBoYW5kbGluZyB0aGUgaW5uZXIgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdFx0Ly8gVGhlcmUgd2lsbCBhbHdheXMgYmUgYXQgbGVhc3Qgb25lIGFyZ3VtZW50IChhbiBldmVudCBvYmplY3QpLCBzbyB0aGlzIGFycmF5XG5cdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgY29uZnVzZWQgd2l0aCBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0LlxuXHRcdFx0XHRcdHNhdmVkID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBzYXZlZCApO1xuXG5cdFx0XHRcdFx0Ly8gVHJpZ2dlciB0aGUgbmF0aXZlIGV2ZW50IGFuZCBjYXB0dXJlIGl0cyByZXN1bHRcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHQvLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91c1xuXHRcdFx0XHRcdG5vdEFzeW5jID0gZXhwZWN0U3luYyggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdHRoaXNbIHR5cGUgXSgpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCB8fCBub3RBc3luYyApIHtcblx0XHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgZmFsc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0ID0ge307XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc2F2ZWQgIT09IHJlc3VsdCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSBvdXRlciBzeW50aGV0aWMgZXZlbnRcblx0XHRcdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHRcdFx0Ly8gSW4gQ2hyb21lLCBpZiBhbiBlbGVtZW50IGhhdmluZyBhIGZvY3Vzb3V0IGhhbmRsZXIgaXMgYmx1cnJlZCBieVxuXHRcdFx0XHRcdFx0Ly8gY2xpY2tpbmcgb3V0c2lkZSBvZiBpdCwgaXQgaW52b2tlcyB0aGUgaGFuZGxlciBzeW5jaHJvbm91c2x5LiBJZlxuXHRcdFx0XHRcdFx0Ly8gdGhhdCBoYW5kbGVyIGNhbGxzIGAucmVtb3ZlKClgIG9uIHRoZSBlbGVtZW50LCB0aGUgZGF0YSBpcyBjbGVhcmVkLFxuXHRcdFx0XHRcdFx0Ly8gbGVhdmluZyBgcmVzdWx0YCB1bmRlZmluZWQuIFdlIG5lZWQgdG8gZ3VhcmQgYWdhaW5zdCB0aGlzLlxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdCAmJiByZXN1bHQudmFsdWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoaXMgaXMgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IGZvciBhbiBldmVudCB3aXRoIGEgYnViYmxpbmcgc3Vycm9nYXRlXG5cdFx0XHRcdC8vIChmb2N1cyBvciBibHVyKSwgYXNzdW1lIHRoYXQgdGhlIHN1cnJvZ2F0ZSBhbHJlYWR5IHByb3BhZ2F0ZWQgZnJvbSB0cmlnZ2VyaW5nIHRoZVxuXHRcdFx0XHQvLyBuYXRpdmUgZXZlbnQgYW5kIHByZXZlbnQgdGhhdCBmcm9tIGhhcHBlbmluZyBhZ2FpbiBoZXJlLlxuXHRcdFx0XHQvLyBUaGlzIHRlY2huaWNhbGx5IGdldHMgdGhlIG9yZGVyaW5nIHdyb25nIHcuci50LiB0byBgLnRyaWdnZXIoKWAgKGluIHdoaWNoIHRoZVxuXHRcdFx0XHQvLyBidWJibGluZyBzdXJyb2dhdGUgcHJvcGFnYXRlcyAqYWZ0ZXIqIHRoZSBub24tYnViYmxpbmcgYmFzZSksIGJ1dCB0aGF0IHNlZW1zXG5cdFx0XHRcdC8vIGxlc3MgYmFkIHRoYW4gZHVwbGljYXRpb24uXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fSApLmRlbGVnYXRlVHlwZSApIHtcblx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgbmF0aXZlIGV2ZW50IHRyaWdnZXJlZCBhYm92ZSwgZXZlcnl0aGluZyBpcyBub3cgaW4gb3JkZXJcblx0XHRcdC8vIEZpcmUgYW4gaW5uZXIgc3ludGhldGljIGV2ZW50IHdpdGggdGhlIG9yaWdpbmFsIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggc2F2ZWQubGVuZ3RoICkge1xuXG5cdFx0XHRcdC8vIC4uLmFuZCBjYXB0dXJlIHRoZSByZXN1bHRcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCB7XG5cdFx0XHRcdFx0dmFsdWU6IGpRdWVyeS5ldmVudC50cmlnZ2VyKFxuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcblx0XHRcdFx0XHRcdC8vIEV4dGVuZCB3aXRoIHRoZSBwcm90b3R5cGUgdG8gcmVzZXQgdGhlIGFib3ZlIHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXh0ZW5kKCBzYXZlZFsgMCBdLCBqUXVlcnkuRXZlbnQucHJvdG90eXBlICksXG5cdFx0XHRcdFx0XHRzYXZlZC5zbGljZSggMSApLFxuXHRcdFx0XHRcdFx0dGhpc1xuXHRcdFx0XHRcdClcblx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIEFib3J0IGhhbmRsaW5nIG9mIHRoZSBuYXRpdmUgZXZlbnRcblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG5cblx0Ly8gTWFyayBpdCBhcyBmaXhlZFxuXHR0aGlzWyBqUXVlcnkuZXhwYW5kbyBdID0gdHJ1ZTtcbn07XG5cbi8vIGpRdWVyeS5FdmVudCBpcyBiYXNlZCBvbiBET00zIEV2ZW50cyBhcyBzcGVjaWZpZWQgYnkgdGhlIEVDTUFTY3JpcHQgTGFuZ3VhZ2UgQmluZGluZ1xuLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IGpRdWVyeS5FdmVudCxcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzU2ltdWxhdGVkOiBmYWxzZSxcblxuXHRwcmV2ZW50RGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdH1cblx0fSxcblx0c3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9XG59O1xuXG4vLyBJbmNsdWRlcyBhbGwgY29tbW9uIGV2ZW50IHByb3BzIGluY2x1ZGluZyBLZXlFdmVudCBhbmQgTW91c2VFdmVudCBzcGVjaWZpYyBwcm9wc1xualF1ZXJ5LmVhY2goIHtcblx0YWx0S2V5OiB0cnVlLFxuXHRidWJibGVzOiB0cnVlLFxuXHRjYW5jZWxhYmxlOiB0cnVlLFxuXHRjaGFuZ2VkVG91Y2hlczogdHJ1ZSxcblx0Y3RybEtleTogdHJ1ZSxcblx0ZGV0YWlsOiB0cnVlLFxuXHRldmVudFBoYXNlOiB0cnVlLFxuXHRtZXRhS2V5OiB0cnVlLFxuXHRwYWdlWDogdHJ1ZSxcblx0cGFnZVk6IHRydWUsXG5cdHNoaWZ0S2V5OiB0cnVlLFxuXHR2aWV3OiB0cnVlLFxuXHRcImNoYXJcIjogdHJ1ZSxcblx0Y29kZTogdHJ1ZSxcblx0Y2hhckNvZGU6IHRydWUsXG5cdGtleTogdHJ1ZSxcblx0a2V5Q29kZTogdHJ1ZSxcblx0YnV0dG9uOiB0cnVlLFxuXHRidXR0b25zOiB0cnVlLFxuXHRjbGllbnRYOiB0cnVlLFxuXHRjbGllbnRZOiB0cnVlLFxuXHRvZmZzZXRYOiB0cnVlLFxuXHRvZmZzZXRZOiB0cnVlLFxuXHRwb2ludGVySWQ6IHRydWUsXG5cdHBvaW50ZXJUeXBlOiB0cnVlLFxuXHRzY3JlZW5YOiB0cnVlLFxuXHRzY3JlZW5ZOiB0cnVlLFxuXHR0YXJnZXRUb3VjaGVzOiB0cnVlLFxuXHR0b0VsZW1lbnQ6IHRydWUsXG5cdHRvdWNoZXM6IHRydWUsXG5cdHdoaWNoOiB0cnVlXG59LCBqUXVlcnkuZXZlbnQuYWRkUHJvcCApO1xuXG5qUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggdHlwZSwgZGVsZWdhdGVUeXBlICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdID0ge1xuXG5cdFx0Ly8gVXRpbGl6ZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImZvY3VzXCIsIC4uLiApXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiYmx1clwiLCAuLi4gKVxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUsIGV4cGVjdFN5bmMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIGZhbHNlIHRvIGFsbG93IG5vcm1hbCBwcm9jZXNzaW5nIGluIHRoZSBjYWxsZXJcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlclxuXHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIG5vbi1mYWxzZSB0byBhbGxvdyBub3JtYWwgZXZlbnQtcGF0aCBwcm9wYWdhdGlvblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHByZXNzIG5hdGl2ZSBmb2N1cyBvciBibHVyIGFzIGl0J3MgYWxyZWFkeSBiZWluZyBmaXJlZFxuXHRcdC8vIGluIGxldmVyYWdlTmF0aXZlLlxuXHRcdF9kZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdC8vXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA3MCtcblx0XHQvLyBPbmx5IEZpcmVmb3ggaW5jbHVkZXMgYm9yZGVyIHdpZHRoc1xuXHRcdC8vIGluIGNvbXB1dGVkIGRpbWVuc2lvbnMuIChnaC00NTI5KVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDtib3JkZXItY29sbGFwc2U6c2VwYXJhdGVcIjtcblx0XHRcdFx0dHIuc3R5bGUuY3NzVGV4dCA9IFwiYm9yZGVyOjFweCBzb2xpZFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSGVpZ2h0IHNldCB0aHJvdWdoIGNzc1RleHQgZG9lcyBub3QgZ2V0IGFwcGxpZWQuXG5cdFx0XHRcdC8vIENvbXB1dGVkIGhlaWdodCB0aGVuIGNvbWVzIGJhY2sgYXMgMC5cblx0XHRcdFx0dHIuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5oZWlnaHQgPSBcIjlweFwiO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgOCBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEluIG91ciBib2R5QmFja2dyb3VuZC5odG1sIGlmcmFtZSxcblx0XHRcdFx0Ly8gZGlzcGxheSBmb3IgYWxsIGRpdiBlbGVtZW50cyBpcyBzZXQgdG8gXCJpbmxpbmVcIixcblx0XHRcdFx0Ly8gd2hpY2ggY2F1c2VzIGEgcHJvYmxlbSBvbmx5IGluIEFuZHJvaWQgOCBDaHJvbWUgODYuXG5cdFx0XHRcdC8vIEVuc3VyaW5nIHRoZSBkaXYgaXMgZGlzcGxheTogYmxvY2tcblx0XHRcdFx0Ly8gZ2V0cyBhcm91bmQgdGhpcyBpc3N1ZS5cblx0XHRcdFx0dHJDaGlsZC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudFxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdGFibGUgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHIgKVxuXHRcdFx0XHRcdC5hcHBlbmRDaGlsZCggdHJDaGlsZCApO1xuXG5cdFx0XHRcdHRyU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggdHIgKTtcblx0XHRcdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPSAoIHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyVG9wV2lkdGgsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCApICkgPT09IHRyLm9mZnNldEhlaWdodDtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0KSArIFwicHhcIjtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKCB7XG5cdG1hcmdpbjogXCJcIixcblx0cGFkZGluZzogXCJcIixcblx0Ym9yZGVyOiBcIldpZHRoXCJcbn0sIGZ1bmN0aW9uKCBwcmVmaXgsIHN1ZmZpeCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXSA9IHtcblx0XHRleHBhbmQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBpID0gMCxcblx0XHRcdFx0ZXhwYW5kZWQgPSB7fSxcblxuXHRcdFx0XHQvLyBBc3N1bWVzIGEgc2luZ2xlIG51bWJlciBpZiBub3QgYSBzdHJpbmdcblx0XHRcdFx0cGFydHMgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZS5zcGxpdCggXCIgXCIgKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggcHJlZml4ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0uc2V0ID0gc2V0UG9zaXRpdmVOdW1iZXI7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fVxufSApO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0O1xuXHRcdHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cdFx0dGhpcy5zdGFydCA9IHRoaXMubm93ID0gdGhpcy5jdXIoKTtcblx0XHR0aGlzLmVuZCA9IGVuZDtcblx0XHR0aGlzLnVuaXQgPSB1bml0IHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApO1xuXHR9LFxuXHRjdXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRyZXR1cm4gaG9va3MgJiYgaG9va3MuZ2V0ID9cblx0XHRcdGhvb2tzLmdldCggdGhpcyApIDpcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5nZXQoIHRoaXMgKTtcblx0fSxcblx0cnVuOiBmdW5jdGlvbiggcGVyY2VudCApIHtcblx0XHR2YXIgZWFzZWQsXG5cdFx0XHRob29rcyA9IFR3ZWVuLnByb3BIb29rc1sgdGhpcy5wcm9wIF07XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5kdXJhdGlvbiApIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBqUXVlcnkuZWFzaW5nWyB0aGlzLmVhc2luZyBdKFxuXHRcdFx0XHRwZXJjZW50LCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKiBwZXJjZW50LCAwLCAxLCB0aGlzLm9wdGlvbnMuZHVyYXRpb25cblx0XHRcdCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucG9zID0gZWFzZWQgPSBwZXJjZW50O1xuXHRcdH1cblx0XHR0aGlzLm5vdyA9ICggdGhpcy5lbmQgLSB0aGlzLnN0YXJ0ICkgKiBlYXNlZCArIHRoaXMuc3RhcnQ7XG5cblx0XHRpZiAoIHRoaXMub3B0aW9ucy5zdGVwICkge1xuXHRcdFx0dGhpcy5vcHRpb25zLnN0ZXAuY2FsbCggdGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgaG9va3Muc2V0ICkge1xuXHRcdFx0aG9va3Muc2V0KCB0aGlzICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdFR3ZWVuLnByb3BIb29rcy5fZGVmYXVsdC5zZXQoIHRoaXMgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn07XG5cblR3ZWVuLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFR3ZWVuLnByb3RvdHlwZTtcblxuVHdlZW4ucHJvcEhvb2tzID0ge1xuXHRfZGVmYXVsdDoge1xuXHRcdGdldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0dmFyIHJlc3VsdDtcblxuXHRcdFx0Ly8gVXNlIGEgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgZGlyZWN0bHkgd2hlbiBpdCBpcyBub3QgYSBET00gZWxlbWVudCxcblx0XHRcdC8vIG9yIHdoZW4gdGhlcmUgaXMgbm8gbWF0Y2hpbmcgc3R5bGUgcHJvcGVydHkgdGhhdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgIT09IDEgfHxcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiYgdHdlZW4uZWxlbS5zdHlsZVsgdHdlZW4ucHJvcCBdID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlscy5cblx0XHRcdC8vIFNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0O1xuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcy1pcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblxuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXG5cdFx0XHQvLyBVc2Ugc3RlcCBob29rIGZvciBiYWNrIGNvbXBhdC5cblx0XHRcdC8vIFVzZSBjc3NIb29rIGlmIGl0cyB0aGVyZS5cblx0XHRcdC8vIFVzZSAuc3R5bGUgaWYgYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGUuXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBjYW1lbENhc2UoIGluZGV4ICk7XG5cdFx0ZWFzaW5nID0gc3BlY2lhbEVhc2luZ1sgbmFtZSBdO1xuXHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF07XG5cdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBOb3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29uJ3Qgb3ZlcndyaXRlIGV4aXN0aW5nIGtleXMuXG5cdFx0XHQvLyBSZXVzaW5nICdpbmRleCcgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBBbmltYXRpb24ucHJlZmlsdGVycy5sZW5ndGgsXG5cdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBEb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSApLFxuXHRcdHRpY2sgPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0dmFyIGN1cnJlbnRUaW1lID0gZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdFx0cmVtYWluaW5nID0gTWF0aC5tYXgoIDAsIGFuaW1hdGlvbi5zdGFydFRpbWUgKyBhbmltYXRpb24uZHVyYXRpb24gLSBjdXJyZW50VGltZSApLFxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zIG9ubHlcblx0XHRcdFx0Ly8gQXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIGAxIC0gKCAwLjUgfHwgMCApYCAoIzEyNDk3KVxuXHRcdFx0XHR0ZW1wID0gcmVtYWluaW5nIC8gYW5pbWF0aW9uLmR1cmF0aW9uIHx8IDAsXG5cdFx0XHRcdHBlcmNlbnQgPSAxIC0gdGVtcCxcblx0XHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0XHRsZW5ndGggPSBhbmltYXRpb24udHdlZW5zLmxlbmd0aDtcblxuXHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdICk7XG5cblx0XHRcdC8vIElmIHRoZXJlJ3MgbW9yZSB0byBkbywgeWllbGRcblx0XHRcdGlmICggcGVyY2VudCA8IDEgJiYgbGVuZ3RoICkge1xuXHRcdFx0XHRyZXR1cm4gcmVtYWluaW5nO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGlzIHdhcyBhbiBlbXB0eSBhbmltYXRpb24sIHN5bnRoZXNpemUgYSBmaW5hbCBwcm9ncmVzcyBub3RpZmljYXRpb25cblx0XHRcdGlmICggIWxlbmd0aCApIHtcblx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXNvbHZlIHRoZSBhbmltYXRpb24gYW5kIHJlcG9ydCBpdHMgY29uY2x1c2lvblxuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uIF0gKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2UoIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHtcblx0XHRcdFx0c3BlY2lhbEVhc2luZzoge30sXG5cdFx0XHRcdGVhc2luZzogalF1ZXJ5LmVhc2luZy5fZGVmYXVsdFxuXHRcdFx0fSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCJcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGhhc0NsYXNzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGNsYXNzTmFtZSwgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Y2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiO1xuXHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggZ2V0Q2xhc3MoIGVsZW0gKSApICsgXCIgXCIgKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+IC0xICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsICkgKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgcGFyc2VyRXJyb3JFbGVtO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdHBhcnNlckVycm9yRWxlbSA9IHhtbCAmJiB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApWyAwIF07XG5cdGlmICggIXhtbCB8fCBwYXJzZXJFcnJvckVsZW0gKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIChcblx0XHRcdHBhcnNlckVycm9yRWxlbSA/XG5cdFx0XHRcdGpRdWVyeS5tYXAoIHBhcnNlckVycm9yRWxlbS5jaGlsZE5vZGVzLCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLnRleHRDb250ZW50O1xuXHRcdFx0XHR9ICkuam9pbiggXCJcXG5cIiApIDpcblx0XHRcdFx0ZGF0YVxuXHRcdCkgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0cmJyYWNrZXQgPSAvXFxbXFxdJC8sXG5cdHJDUkxGID0gL1xccj9cXG4vZyxcblx0cnN1Ym1pdHRlclR5cGVzID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLFxuXHRyc3VibWl0dGFibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbmZ1bmN0aW9uIGJ1aWxkUGFyYW1zKCBwcmVmaXgsIG9iaiwgdHJhZGl0aW9uYWwsIGFkZCApIHtcblx0dmFyIG5hbWU7XG5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBvYmogKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblxuXHRcdFx0XHQvLyBUcmVhdCBlYWNoIGFycmF5IGl0ZW0gYXMgYSBzY2FsYXIuXG5cdFx0XHRcdGFkZCggcHJlZml4LCB2ICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gSXRlbSBpcyBub24tc2NhbGFyIChhcnJheSBvciBvYmplY3QpLCBlbmNvZGUgaXRzIG51bWVyaWMgaW5kZXguXG5cdFx0XHRcdGJ1aWxkUGFyYW1zKFxuXHRcdFx0XHRcdHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiAmJiB2ICE9IG51bGwgPyBpIDogXCJcIiApICsgXCJdXCIsXG5cdFx0XHRcdFx0dixcblx0XHRcdFx0XHR0cmFkaXRpb25hbCxcblx0XHRcdFx0XHRhZGRcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9ICk7XG5cblx0fSBlbHNlIGlmICggIXRyYWRpdGlvbmFsICYmIHRvVHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBpc0Z1bmN0aW9uKCB2YWx1ZU9yRnVuY3Rpb24gKSA/XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbigpIDpcblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uO1xuXG5cdFx0XHRzWyBzLmxlbmd0aCBdID0gZW5jb2RlVVJJQ29tcG9uZW50KCBrZXkgKSArIFwiPVwiICtcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KCB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICk7XG5cdFx0fTtcblxuXHRpZiAoIGEgPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8vIElmIGFuIGFycmF5IHdhcyBwYXNzZWQgaW4sIGFzc3VtZSB0aGF0IGl0IGlzIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMuXG5cdGlmICggQXJyYXkuaXNBcnJheSggYSApIHx8ICggYS5qcXVlcnkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBhICkgKSApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSApO1xuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9ICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0eXBlID0gdGhpcy50eXBlO1xuXG5cdFx0XHQvLyBVc2UgLmlzKCBcIjpkaXNhYmxlZFwiICkgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSApLm1hcCggZnVuY3Rpb24oIF9pLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5vcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0IGJ1dCBub3QgaWYganNvbnBcblx0XHRcdGlmICggIWlzU3VjY2VzcyAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJzY3JpcHRcIiwgcy5kYXRhVHlwZXMgKSA+IC0xICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcImpzb25cIiwgcy5kYXRhVHlwZXMgKSA8IDAgKSB7XG5cdFx0XHRcdHMuY29udmVydGVyc1sgXCJ0ZXh0IHNjcmlwdFwiIF0gPSBmdW5jdGlvbigpIHt9O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJMYXN0LU1vZGlmaWVkXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcImV0YWdcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBFeHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dCBhbmQgbm9ybWFsaXplIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0b3BcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpxWEhSO1xuXHR9LFxuXG5cdGdldEpTT046IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIGRhdGEsIGNhbGxiYWNrLCBcImpzb25cIiApO1xuXHR9LFxuXG5cdGdldFNjcmlwdDogZnVuY3Rpb24oIHVybCwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgdW5kZWZpbmVkLCBjYWxsYmFjaywgXCJzY3JpcHRcIiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBfaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdHZhciBpO1xuXHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRpZiAoIGkudG9Mb3dlckNhc2UoKSA9PT0gXCJjb250ZW50LXR5cGVcIiApIHtcblx0XHRcdHMuY29udGVudFR5cGUgPSBzLmhlYWRlcnNbIGkgXSB8fCBcIlwiO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMsIGRvYyApIHtcblx0cmV0dXJuIGpRdWVyeS5hamF4KCB7XG5cdFx0dXJsOiB1cmwsXG5cblx0XHQvLyBNYWtlIHRoaXMgZXhwbGljaXQsIHNpbmNlIHVzZXIgY2FuIG92ZXJyaWRlIHRoaXMgdGhyb3VnaCBhamF4U2V0dXAgKCMxMTI2NClcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGRhdGFUeXBlOiBcInNjcmlwdFwiLFxuXHRcdGNhY2hlOiB0cnVlLFxuXHRcdGFzeW5jOiBmYWxzZSxcblx0XHRnbG9iYWw6IGZhbHNlLFxuXG5cdFx0Ly8gT25seSBldmFsdWF0ZSB0aGUgcmVzcG9uc2UgaWYgaXQgaXMgc3VjY2Vzc2Z1bCAoZ2gtNDEyNilcblx0XHQvLyBkYXRhRmlsdGVyIGlzIG5vdCBpbnZva2VkIGZvciBmYWlsdXJlIHJlc3BvbnNlcywgc28gdXNpbmcgaXQgaW5zdGVhZFxuXHRcdC8vIG9mIHRoZSBkZWZhdWx0IGNvbnZlcnRlciBpcyBrbHVkZ3kgYnV0IGl0IHdvcmtzLlxuXHRcdGNvbnZlcnRlcnM6IHtcblx0XHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oKSB7fVxuXHRcdH0sXG5cdFx0ZGF0YUZpbHRlcjogZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHJlc3BvbnNlLCBvcHRpb25zLCBkb2MgKTtcblx0XHR9XG5cdH0gKTtcbn07XG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR3cmFwQWxsOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgd3JhcDtcblxuXHRcdGlmICggdGhpc1sgMCBdICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRcdGh0bWwgPSBodG1sLmNhbGwoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgZWxlbWVudHMgdG8gd3JhcCB0aGUgdGFyZ2V0IGFyb3VuZFxuXHRcdFx0d3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1sgMCBdLm93bmVyRG9jdW1lbnQgKS5lcSggMCApLmNsb25lKCB0cnVlICk7XG5cblx0XHRcdGlmICggdGhpc1sgMCBdLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHdyYXAuaW5zZXJ0QmVmb3JlKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0d3JhcC5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0d2hpbGUgKCBlbGVtLmZpcnN0RWxlbWVudENoaWxkICkge1xuXHRcdFx0XHRcdGVsZW0gPSBlbGVtLmZpcnN0RWxlbWVudENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9ICkuYXBwZW5kKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d3JhcElubmVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGh0bWxJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBodG1sSXNGdW5jdGlvbiA/IGh0bWwuY2FsbCggdGhpcywgaSApIDogaHRtbCApO1xuXHRcdH0gKTtcblx0fSxcblxuXHR1bndyYXA6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR0aGlzLnBhcmVudCggc2VsZWN0b3IgKS5ub3QoIFwiYm9keVwiICkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0fSApO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5oaWRkZW4gPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICFqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUoIGVsZW0gKTtcbn07XG5qUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGUgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuICEhKCBlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0IHx8IGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKTtcbn07XG5cblxuXG5cbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gZnVuY3Rpb24oKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCAoIGUgKSB7fVxufTtcblxudmFyIHhoclN1Y2Nlc3NTdGF0dXMgPSB7XG5cblx0XHQvLyBGaWxlIHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIGNvZGUgMCwgYXNzdW1lIDIwMFxuXHRcdDA6IDIwMCxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0Ly8gIzE0NTA6IHNvbWV0aW1lcyBJRSByZXR1cm5zIDEyMjMgd2hlbiBpdCBzaG91bGQgYmUgMjA0XG5cdFx0MTIyMzogMjA0XG5cdH0sXG5cdHhoclN1cHBvcnRlZCA9IGpRdWVyeS5hamF4U2V0dGluZ3MueGhyKCk7XG5cbnN1cHBvcnQuY29ycyA9ICEheGhyU3VwcG9ydGVkICYmICggXCJ3aXRoQ3JlZGVudGlhbHNcIiBpbiB4aHJTdXBwb3J0ZWQgKTtcbnN1cHBvcnQuYWpheCA9IHhoclN1cHBvcnRlZCA9ICEheGhyU3VwcG9ydGVkO1xuXG5qUXVlcnkuYWpheFRyYW5zcG9ydCggZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdHZhciBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaztcblxuXHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdGlmICggc3VwcG9ydC5jb3JzIHx8IHhoclN1cHBvcnRlZCAmJiAhb3B0aW9ucy5jcm9zc0RvbWFpbiApIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHR2YXIgaSxcblx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpO1xuXG5cdFx0XHRcdHhoci5vcGVuKFxuXHRcdFx0XHRcdG9wdGlvbnMudHlwZSxcblx0XHRcdFx0XHRvcHRpb25zLnVybCxcblx0XHRcdFx0XHRvcHRpb25zLmFzeW5jLFxuXHRcdFx0XHRcdG9wdGlvbnMudXNlcm5hbWUsXG5cdFx0XHRcdFx0b3B0aW9ucy5wYXNzd29yZFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRmb3IgKCBpIGluIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdHhoci5vdmVycmlkZU1pbWVUeXBlKCBvcHRpb25zLm1pbWVUeXBlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHQvLyBGb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLCBzZWVpbmcgYXMgY29uZGl0aW9ucyBmb3IgYSBwcmVmbGlnaHQgYXJlXG5cdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHQvLyBGb3Igc2FtZS1kb21haW4gcmVxdWVzdHMsIHdvbid0IGNoYW5nZSBoZWFkZXIgaWYgYWxyZWFkeSBwcm92aWRlZC5cblx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSApIHtcblx0XHRcdFx0XHRoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdID0gXCJYTUxIdHRwUmVxdWVzdFwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0Zm9yICggaSBpbiBoZWFkZXJzICkge1xuXHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBlcnJvckNhbGxiYWNrID0geGhyLm9ubG9hZCA9XG5cdFx0XHRcdFx0XHRcdFx0eGhyLm9uZXJyb3IgPSB4aHIub25hYm9ydCA9IHhoci5vbnRpbWVvdXQgPVxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IHhoci5vbnRpbWVvdXQgPSBjYWxsYmFjayggXCJlcnJvclwiICk7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0XHRcdC8vIFVzZSBvbnJlYWR5c3RhdGVjaGFuZ2UgdG8gcmVwbGFjZSBvbmFib3J0XG5cdFx0XHRcdC8vIHRvIGhhbmRsZSB1bmNhdWdodCBhYm9ydHNcblx0XHRcdFx0aWYgKCB4aHIub25hYm9ydCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHhoci5vbmFib3J0ID0gZXJyb3JDYWxsYmFjaztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIENoZWNrIHJlYWR5U3RhdGUgYmVmb3JlIHRpbWVvdXQgYXMgaXQgY2hhbmdlc1xuXHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBbGxvdyBvbmVycm9yIHRvIGJlIGNhbGxlZCBmaXJzdCxcblx0XHRcdFx0XHRcdFx0Ly8gYnV0IHRoYXQgd2lsbCBub3QgaGFuZGxlIGEgbmF0aXZlIGFib3J0XG5cdFx0XHRcdFx0XHRcdC8vIEFsc28sIHNhdmUgZXJyb3JDYWxsYmFjayB0byBhIHZhcmlhYmxlXG5cdFx0XHRcdFx0XHRcdC8vIGFzIHhoci5vbmVycm9yIGNhbm5vdCBiZSBhY2Nlc3NlZFxuXHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGVycm9yQ2FsbGJhY2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBhYm9ydCBjYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGNhbGxiYWNrKCBcImFib3J0XCIgKTtcblxuXHRcdFx0XHR0cnkge1xuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdCAodGhpcyBtYXkgcmFpc2UgYW4gZXhjZXB0aW9uKVxuXHRcdFx0XHRcdHhoci5zZW5kKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhIHx8IG51bGwgKTtcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHQvLyAjMTQ2ODM6IE9ubHkgcmV0aHJvdyBpZiB0aGlzIGhhc24ndCBiZWVuIG5vdGlmaWVkIGFzIGFuIGVycm9yIHlldFxuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFByZXZlbnQgYXV0by1leGVjdXRpb24gb2Ygc2NyaXB0cyB3aGVuIG5vIGV4cGxpY2l0IGRhdGFUeXBlIHdhcyBwcm92aWRlZCAoU2VlIGdoLTI0MzIpXG5qUXVlcnkuYWpheFByZWZpbHRlciggZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLmNvbnRlbnRzLnNjcmlwdCA9IGZhbHNlO1xuXHR9XG59ICk7XG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBcIiArXG5cdFx0XHRcImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgY3Jvc3NEb21haW5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHR9XG59ICk7XG5cbi8vIEJpbmQgc2NyaXB0IHRhZyBoYWNrIHRyYW5zcG9ydFxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gb3IgZm9yY2VkLWJ5LWF0dHJzIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiB8fCBzLnNjcmlwdEF0dHJzICkge1xuXHRcdHZhciBzY3JpcHQsIGNhbGxiYWNrO1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHNjcmlwdCA9IGpRdWVyeSggXCI8c2NyaXB0PlwiIClcblx0XHRcdFx0XHQuYXR0ciggcy5zY3JpcHRBdHRycyB8fCB7fSApXG5cdFx0XHRcdFx0LnByb3AoIHsgY2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LCBzcmM6IHMudXJsIH0gKVxuXHRcdFx0XHRcdC5vbiggXCJsb2FkIGVycm9yXCIsIGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZS5ndWlkKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBfaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXG5cdFx0XHRcdC8vIElmIGN1ckNTUyByZXR1cm5zIHBlcmNlbnRhZ2UsIGZhbGxiYWNrIHRvIG9mZnNldFxuXHRcdFx0XHRyZXR1cm4gcm51bW5vbnB4LnRlc3QoIGNvbXB1dGVkICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggZWxlbSApLnBvc2l0aW9uKClbIHByb3AgXSArIFwicHhcIiA6XG5cdFx0XHRcdFx0Y29tcHV0ZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHQpO1xufSApO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCgge1xuXHRcdHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsXG5cdFx0Y29udGVudDogdHlwZSxcblx0XHRcIlwiOiBcIm91dGVyXCIgKyBuYW1lXG5cdH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goXG5cdCggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH1cbik7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuLy8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG52YXIgcnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbi8vIEJpbmQgYSBmdW5jdGlvbiB0byBhIGNvbnRleHQsIG9wdGlvbmFsbHkgcGFydGlhbGx5IGFwcGx5aW5nIGFueVxuLy8gYXJndW1lbnRzLlxuLy8galF1ZXJ5LnByb3h5IGlzIGRlcHJlY2F0ZWQgdG8gcHJvbW90ZSBzdGFuZGFyZHMgKHNwZWNpZmljYWxseSBGdW5jdGlvbiNiaW5kKVxuLy8gSG93ZXZlciwgaXQgaXMgbm90IHNsYXRlZCBmb3IgcmVtb3ZhbCBhbnkgdGltZSBzb29uXG5qUXVlcnkucHJveHkgPSBmdW5jdGlvbiggZm4sIGNvbnRleHQgKSB7XG5cdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0dG1wID0gZm5bIGNvbnRleHQgXTtcblx0XHRjb250ZXh0ID0gZm47XG5cdFx0Zm4gPSB0bXA7XG5cdH1cblxuXHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRpZiAoICFpc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvLyBTaW11bGF0ZWQgYmluZFxuXHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzLCAyICk7XG5cdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdH07XG5cblx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdHJldHVybiBwcm94eTtcbn07XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5qUXVlcnkuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5qUXVlcnkuaXNXaW5kb3cgPSBpc1dpbmRvdztcbmpRdWVyeS5jYW1lbENhc2UgPSBjYW1lbENhc2U7XG5qUXVlcnkudHlwZSA9IHRvVHlwZTtcblxualF1ZXJ5Lm5vdyA9IERhdGUubm93O1xuXG5qUXVlcnkuaXNOdW1lcmljID0gZnVuY3Rpb24oIG9iaiApIHtcblxuXHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHQvLyBzdHJpbmdzIGFuZCBudW1iZXJzIChwcmltaXRpdmVzIG9yIG9iamVjdHMpXG5cdC8vIHRoYXQgY2FuIGJlIGNvZXJjZWQgdG8gZmluaXRlIG51bWJlcnMgKGdoLTI2NjIpXG5cdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRyZXR1cm4gKCB0eXBlID09PSBcIm51bWJlclwiIHx8IHR5cGUgPT09IFwic3RyaW5nXCIgKSAmJlxuXG5cdFx0Ly8gcGFyc2VGbG9hdCBOYU5zIG51bWVyaWMtY2FzdCBmYWxzZSBwb3NpdGl2ZXMgKFwiXCIpXG5cdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdC8vIHN1YnRyYWN0aW9uIGZvcmNlcyBpbmZpbml0aWVzIHRvIE5hTlxuXHRcdCFpc05hTiggb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgKTtcbn07XG5cbmpRdWVyeS50cmltID0gZnVuY3Rpb24oIHRleHQgKSB7XG5cdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFwiXCIgOlxuXHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xufTtcblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoIHR5cGVvZiBub0dsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8ZGl2IGNsYXNzPVxcXCJtb2RhbCBmYWRlXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiIHJvbGU9XFxcImRpYWxvZ1xcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1kaWFsb2cgZ2Rwcl9tb2RhbFxcXCIgcm9sZT1cXFwiZG9jdW1lbnRcXFwiPiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIj4gPGRpdiBjbGFzcz1cXFwibW9kYWwtaGVhZGVyXFxcIj4gPGg1PiA8aSBjbGFzcz1cXFwiZmEtc29saWQgZmEtdXNlci1sb2NrIGljb25cXFwiIGFyaWEtaGlkZGVuPVxcXCJ0cnVlXFxcIj48L2k+IDxzcGFuIGlkPVxcXCJ0ZXh0VGl0bGVNb2RhbFxcXCI+PC9zcGFuPiAgPC9oNT4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGNsb3NlXFxcIiBkYXRhLWRpc21pc3M9XFxcIm1vZGFsXFxcIiBhcmlhLWxhYmVsPVxcXCJDaGl1ZGlcXFwiPiA8aSBjbGFzcz1cXFwiZmFzIGZhLXRpbWVzXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPiA8L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcIm1vZGFsLWJvZHlcXFwiPiA8ZGl2IGNsYXNzPVxcXCJub3RpY2UgdGV4dC1qdXN0aWZ5XFxcIj4gPHNwYW4gaWQ9XFxcInRleHRBYnN0cmFjdE1vZGFsXFxcIj48L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzbWFsbCBtdC0yIHRleHQtbXV0ZWRcXFwiPiA8aSBjbGFzcz1cXFwiZmFzIGZhLWNoZWNrLWRvdWJsZVxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT4gRGF0YSB1bHRpbW8gY29uc2Vuc286IDxzcGFuIGNsYXNzPVxcXCJsYXN0LWNvbnNlbnQtZGF0ZVxcXCI+PGVtPm5vbiBkaXNwb25pYmlsZTwvZW0+PC9zcGFuPiA8YSBpZD1cXFwiZGVsZXRlX2Nvb2tpZVxcXCIgaHJlZj1cXFwiI0VsaW1pbmFVbHRpbW9Db25zZW5zb1xcXCI+PGkgY2xhc3M9XFxcImZhcyBmYS10cmFzaC1hbHRcXFwiPjwvaT4gPHNwYW4gaWQ9XFxcInRleHRCdXR0b25SZXNldENvb2tpZVxcXCI+PC9zcGFuPjwvYT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW5cXFwiPiA8YSBjbGFzcz1cXFwiYnRuIGJ0bi1zZWNvbmRhcnkgYnRuLXNtIGZsb2F0LWxlZnRcXFwiIGlkPVxcXCJsaW5rUHJpdmFjeVBvbGljeVxcXCIgYWx0PVxcXCJQcml2YWN5IFBvbGljeVxcXCIgaHJlZj1cXFwiLi9wcml2YWN5X3BvbGljeS5odG1sXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+IDxpIGNsYXNzPVxcXCJmYXMgZmEtZmlsZS1jb250cmFjdFxcXCIgYXJpYS1oaWRkZW49XFxcInRydWVcXFwiPjwvaT4gPHNwYW4gaWQ9XFxcInRleHRCdXR0b25PcGVuUG9saWN5XFxcIj48L3NwYW4+IDwvYT4gPGEgaWQ9XFxcImFjY2VwdF9wb2xpY3lcXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgYnRuLXNtIGZsb2F0LWVuZFxcXCIgZGF0YS1kaXNtaXNzPVxcXCJtb2RhbFxcXCI+PGkgY2xhc3M9XFxcImZhcyBmYS11c2VyLWNoZWNrXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPiA8c3BhbiBpZD1cXFwidGV4dEJ1dHRvbkFjY2VwdFxcXCI+PC9zcGFuPjwvYT4gPGRpdiBjbGFzcz1cXFwiY29sLTEyXFxcIj4gPHNtYWxsIGNsYXNzPVxcXCJzbWFsbCB0ZXh0LW11dGVkXFxcIj5HZW5lcmF0YSBjb24gPGEgdGl0bGU9XFxcIkdEUFIgQ29tbW9uc1xcXCIgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ2RwcmNvbW1vbnMuaXRcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5HRFBSIENvbW1vbnM8L2E+PC9zbWFsbD4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PlwiO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgY29kZTsiLCIvLyBNb2R1bGVcbnZhciBjb2RlID0gXCI8YSBocmVmPVxcXCIjR0RQUkNvbW1vbnMtZGlhbG9nXFxcIiBpZD1cXFwib3Blbl9jb29raWVtb2RhbFxcXCIgY2xhc3M9XFxcImZpeGVkaWNvblxcXCIgYXJpYS1sYWJlbD1cXFwiT3BlbiBDb29raWUgTm90aWNlXFxcIj4gPGkgY2xhc3M9XFxcImZhLXNvbGlkIGZhLXVzZXItbG9jayBpY29uXFxcIiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+PC9pPiA8L2E+XCI7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBjb2RlOyIsIlwidXNlIHN0cmljdFwiO1xuaW1wb3J0IGNvb2tpZW1vZGFsIGZyb20gJy4vY29tcG9uZW50cy9jb29raWVtb2RhbC5odG1sJztcbmltcG9ydCBmaXhlZGljb24gZnJvbSAnLi9jb21wb25lbnRzL2ZpeGVkaWNvbi5odG1sJztcblxuaW1wb3J0ICcuL3N0eWxlcy9tYWluLnNjc3MnXG5pbXBvcnQgJy4vc3R5bGVzL3N0eWxlLmNzcydcblxuJCA9IHdpbmRvdy4kID0gd2luZG93LmpRdWVyeSA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5yZXF1aXJlKCdqcXVlcnknKTtcbnJlcXVpcmUoJ2Jvb3RzdHJhcCcpO1xucmVxdWlyZSgnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLWZyZWUnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNvb2tpZUFsZXJ0KGNvbmZpZyA9IG51bGwpIHtcblxuICAgIC8vc2hvd3MgbW9kZSBvZiBtb2RhbHNcbiAgICBjb25zdCBtb2RhbHNob19ldmVyID0gJ2V2ZXInOyAvL2lzIGV2ZXIgc2hvd2Qgb24gcGFnZSBsb2FkXG4gICAgY29uc3QgbW9kYWxzaG9fY29va2llID0gJ2Nvb2tpZSc7IC8vaXMgYmFlcyBvZiBhY2NlcHRhbmNlIGNvb2tpZVxuXG4gICAgLy9kZWZhdWx0IGRheSBleHBpcmUgY29va2llXG4gICAgY29uc3QgY29va2llX2V4cGlyZSA9IDIwO1xuXG4gICAgLy8gQ29uZmlndXJhdGlvbiB2YXJpYWJsZXNcbiAgICBjb25zdCBjb29raWVuYW1lID0gJ0dEUFJDb21tb25zJztcblxuICAgIC8vRElWUyBJRFxuICAgIGNvbnN0IGNsYXNzbm90aWNlID0gJy5nZHByY29tbW9ucy1ub3RpY2UnO1xuICAgIGNvbnN0IGNsYXNzZml4ZWRpY29uID0gJy5nZHByY29tbW9ucy1maXhlZGljb24nO1xuXG4gICAgbGV0IGNvb2tpZVZhbHVlID0ge1xuICAgICAgICBsb2FkOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgYWNjZXB0ZWQ6IGZhbHNlLFxuICAgIH07XG5cbiAgICAvLyBJTklUIENPTlRFTlQgRElWc1xuICAgIGNvbnN0IGdkcHJjb21tb25zbm90aWNlID0gJChjbGFzc25vdGljZSkuaHRtbChjb29raWVtb2RhbCk7XG5cbiAgICAvLyBTaG93IG1vZGFsXG4gICAgZnVuY3Rpb24gc2hvd0Nvb2tpZUFsZXJ0KCkge1xuICAgICAgICBsZXQgY29va2llID0gZ2V0Q29va2llKGNvb2tpZW5hbWUpO1xuICAgICAgICBpZiAoY29va2llICE9IG51bGwpIHtcbiAgICAgICAgICAgICQoY2xhc3Nub3RpY2UgKyAnIC5sYXN0LWNvbnNlbnQtZGF0ZScpLmh0bWwobmV3IERhdGUoY29va2llLmxvYWQpLnRvRGF0ZVN0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICAkKGNsYXNzbm90aWNlICsgJyAubW9kYWwnKS5tb2RhbCgnc2hvdycpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVyYXNlQ29va2llKG5hbWUpIHtcbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gbmFtZSArICc9OyBNYXgtQWdlPS05OTk5OTk5OTsnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldENvb2tpZShuYW1lLCB2YWx1ZSwgZGF5cyA9IGNvb2tpZV9leHBpcmUpIHtcbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIHZhciBleHBpcmVzID0gXCJcIjtcbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSArIChkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCkpO1xuICAgICAgICAgICAgZXhwaXJlcyA9IFwiOyBleHBpcmVzPVwiICsgZGF0ZS50b1VUQ1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IG5hbWUgKyBcIj1cIiArICh2YWx1ZSB8fCBcIlwiKSArIGV4cGlyZXMgKyBcIjsgcGF0aD0vXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHtcbiAgICAgICAgbGV0IG5hbWVFUSA9IG5hbWUgKyBcIj1cIjtcbiAgICAgICAgbGV0IGNhID0gZG9jdW1lbnQuY29va2llLnNwbGl0KCc7Jyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2EubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjID0gY2FbaV07XG4gICAgICAgICAgICB3aGlsZSAoYy5jaGFyQXQoMCkgPT0gJyAnKSBjID0gYy5zdWJzdHJpbmcoMSwgYy5sZW5ndGgpO1xuICAgICAgICAgICAgaWYgKGMuaW5kZXhPZihuYW1lRVEpID09IDApIHtcbiAgICAgICAgICAgICAgICBsZXQgb3V0ID0gYy5zdWJzdHJpbmcobmFtZUVRLmxlbmd0aCwgYy5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKG91dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgJChjbGFzc25vdGljZSArICcgI2FjY2VwdF9wb2xpY3knKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2FjY2VwdGVkJyk7XG4gICAgICAgIGNvb2tpZVZhbHVlLmFjY2VwdGVkID0gdHJ1ZTtcbiAgICAgICAgc2V0Q29va2llKGNvb2tpZW5hbWUsIGNvb2tpZVZhbHVlKTtcbiAgICAgICAgJChjbGFzc25vdGljZSArICcgLm1vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICB9KTtcblxuICAgICQoY2xhc3Nub3RpY2UgKyAnICNkZWxldGVfY29va2llJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGVyYXNlQ29va2llKGNvb2tpZW5hbWUpO1xuICAgICAgICBjb25zb2xlLmxvZygnZXJhc2VkJyk7XG4gICAgICAgICQoY2xhc3Nub3RpY2UgKyAnIC5sYXN0LWNvbnNlbnQtZGF0ZScpLmh0bWwoJ25vbiBkaXNwb25pYmlsZScpO1xuICAgIH0pO1xuXG5cbiAgICAvLyBGZWF0dXJlc1xuICAgIGlmIChjb25maWcuZml4ZWRpY29uLnNob3cgPT09IHRydWUpIHtcbiAgICAgICAgJChjbGFzc2ZpeGVkaWNvbikuaHRtbChmaXhlZGljb24pO1xuICAgICAgICAkKGNsYXNzZml4ZWRpY29uICsgJyAjb3Blbl9jb29raWVtb2RhbCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2hvd0Nvb2tpZUFsZXJ0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnLi4nKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5tb2RhbC5zaG93T25QYWdlTG9hZCA9PSBtb2RhbHNob19ldmVyKSB7XG4gICAgICAgIHNob3dDb29raWVBbGVydCgpO1xuXG4gICAgfSBlbHNlIGlmIChjb25maWcubW9kYWwuc2hvd09uUGFnZUxvYWQgPT0gbW9kYWxzaG9fY29va2llKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGdldENvb2tpZShjb29raWVuYW1lKSk7XG4gICAgICAgIGlmIChnZXRDb29raWUoY29va2llbmFtZSkgPT0gbnVsbCkge1xuICAgICAgICAgICAgc2hvd0Nvb2tpZUFsZXJ0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcudGV4dCkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy50ZXh0LmxpbmtQcml2YWN5UG9saWN5KSB7XG4gICAgICAgICAgICAgICAgJCgnI2xpbmtQcml2YWN5UG9saWN5JykuYXR0cihcImhyZWZcIiwgY29uZmlnLnRleHQubGlua1ByaXZhY3lQb2xpY3kpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjbGlua1ByaXZhY3lQb2xpY3knKS5hdHRyKFwiaHJlZlwiLCAnLycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy50ZXh0LnRleHRUaXRsZU1vZGFsKSB7XG4gICAgICAgICAgICAgICAgJCgnI3RleHRUaXRsZU1vZGFsJykuaHRtbChjb25maWcudGV4dC50ZXh0VGl0bGVNb2RhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJyN0ZXh0VGl0bGVNb2RhbCcpLmh0bWwoJ2V4YW1wbGUgdGl0bGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcudGV4dC50ZXh0QWJzdHJhY3RNb2RhbCkge1xuICAgICAgICAgICAgICAgICQoJyN0ZXh0QWJzdHJhY3RNb2RhbCcpLmh0bWwoY29uZmlnLnRleHQudGV4dEFic3RyYWN0TW9kYWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjdGV4dEFic3RyYWN0TW9kYWwnKS5odG1sKCdleGFtcGxlIGFic3RyYWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnLnRleHQudGV4dEJ1dHRvbkFjY2VwdCkge1xuICAgICAgICAgICAgICAgICQoJyN0ZXh0QnV0dG9uQWNjZXB0JykuaHRtbChjb25maWcudGV4dC50ZXh0QnV0dG9uQWNjZXB0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJCgnI3RleHRCdXR0b25BY2NlcHQnKS5odG1sKCdhY2NlcHQgZXhhbXBsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbmZpZy50ZXh0LnRleHRCdXR0b25PcGVuUG9saWN5KSB7XG4gICAgICAgICAgICAgICAgJCgnI3RleHRCdXR0b25PcGVuUG9saWN5JykuaHRtbChjb25maWcudGV4dC50ZXh0QnV0dG9uT3BlblBvbGljeSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQoJyN0ZXh0QnV0dG9uT3BlblBvbGljeScpLmh0bWwoJ2V4YW1wbGUgb3BlbiBwb2xpY3knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb25maWcudGV4dC50ZXh0QnV0dG9uUmVzZXRDb29raWUpIHtcbiAgICAgICAgICAgICAgICAkKCcjdGV4dEJ1dHRvblJlc2V0Q29va2llJykuaHRtbChjb25maWcudGV4dC50ZXh0QnV0dG9uUmVzZXRDb29raWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKCcjdGV4dEJ1dHRvblJlc2V0Q29va2llJykuaHRtbCgnZXhhbXBsZSBkZWxldGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY29va2llQWxlcnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbmltcG9ydCB7IGNvb2tpZUFsZXJ0IH0gZnJvbSAnLi9jb29raWVBbGVydC5qcyc7XHJcblxyXG5jb25zdCBjb25maWcgPSB7XHJcbiAgICB0ZXh0OiB7XHJcbiAgICAgICAgbGlua1ByaXZhY3lQb2xpY3k6IFwiaHR0cDovL3d3dy5nZHByY29tbW9ucy5pdFwiLFxyXG4gICAgICAgIHRleHRUaXRsZU1vZGFsOiBcIkluZm9ybWF0aXZhIENvb2tpZVwiLFxyXG4gICAgICAgIHRleHRBYnN0cmFjdE1vZGFsOiBcIlF1ZXN0byBzaXRvIHV0aWxpenphIGVzY2x1c2l2YW1lbnRlIGNvb2tpZSBlL28gYWx0cmkgc3RydW1lbnRpIGRpIHRyYWNjaWFtZW50byBkaSB0aXBvIHRlY25pY28gbyBhbmFsaXRpY2kgYWwgc29sbyBzY29wbyBkaSBhbmFsaXNpIHN0YXRpc3RpY2EgZGVsIHRyYWZmaWNvIHNlbnphIHJpc2FsaXJlIGFsbCdpZGVudGl0w6AgZGVsIHNpbmdvbG8gdXRlbnRlLiBJbiBvbHRyZSwgbm9uIHJhY2NvZ2xpZSBpbmZvcm1hemlvbmkgcGVyc29uYWxpIGluIG1vZG8gYXV0b21hdGljbyBzZW56YSBlc3BsaWNpdG8gY29uc2Vuc28uIEluIGFsY3VuaSBjYXNpIHNvbm8gdXRpbGl6emF0ZSByaXNvcnNlIGVzdGVybmUuIEFpIGZpbmkgbGVnaXNsYXRpdmksIGEgc2NvcG8gaW5mb3JtYXRpdm8gc2kgY2hpZWRlIGxhIGNvbnN1bHRhemlvbmUgZGVsbGEgUHJpdmFjeSBQb2xpY3kgZSBwcm9zZWd1aXJlIGNsaWNjYW5kbyBzdSBcXCdIbyBjYXBpdG9cXCdcIixcclxuICAgICAgICB0ZXh0QnV0dG9uQWNjZXB0OiBcIkhvIGNhcGl0b1wiLFxyXG4gICAgICAgIHRleHRCdXR0b25PcGVuUG9saWN5OiBcIkxlZ2dpIGxcXCdpbmZvcm1hdGl2YVwiLFxyXG4gICAgICAgIHRleHRCdXR0b25SZXNldENvb2tpZTogXCJlbGltaW5hXCIsXHJcbiAgICB9LFxyXG5cclxuICAgIG1vZGFsOiB7XHJcbiAgICAgICAgc2hvd09uUGFnZUxvYWQ6ICdjb29raWUnLFxyXG4gICAgfSxcclxuXHJcbiAgICBmaXhlZGljb246IHtcclxuICAgICAgICBzaG93OiB0cnVlXHJcbiAgICB9XHJcbn07XHJcblxyXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICBjb29raWVBbGVydChjb25maWcpO1xyXG59OyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsIk9iamVjdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZDIiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwiZm9yRWFjaCIsImtleSIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdHlwZW9mIiwib2JqIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiQXJyYXkiLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiX2kiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJUeXBlRXJyb3IiLCJfbm9uSXRlcmFibGVSZXN0IiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiX2FycmF5TGlrZVRvQXJyYXkiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiZnJvbSIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJvIiwibWluTGVuIiwibiIsInRvU3RyaW5nIiwic2xpY2UiLCJuYW1lIiwidGVzdCIsImxlbiIsImFycjIiLCJub29wIiwiX1dJTkRPVyIsIl9ET0NVTUVOVCIsIl9NVVRBVElPTl9PQlNFUlZFUiIsIl9QRVJGT1JNQU5DRSIsIm1hcmsiLCJtZWFzdXJlIiwid2luZG93IiwiZG9jdW1lbnQiLCJNdXRhdGlvbk9ic2VydmVyIiwicGVyZm9ybWFuY2UiLCJlIiwiX3JlZiR1c2VyQWdlbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJXSU5ET1ciLCJET0NVTUVOVCIsIk1VVEFUSU9OX09CU0VSVkVSIiwiUEVSRk9STUFOQ0UiLCJJU19CUk9XU0VSIiwiSVNfRE9NIiwiZG9jdW1lbnRFbGVtZW50IiwiaGVhZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVhdGVFbGVtZW50IiwiSVNfSUUiLCJpbmRleE9mIiwiREVGQVVMVF9SRVBMQUNFTUVOVF9DTEFTUyIsIkRBVEFfRkFfSTJTVkciLCJEQVRBX0ZBX1BTRVVET19FTEVNRU5UIiwiREFUQV9QUkVGSVgiLCJEQVRBX0lDT04iLCJIVE1MX0NMQVNTX0kyU1ZHX0JBU0VfQ0xBU1MiLCJUQUdOQU1FU19UT19TS0lQX0ZPUl9QU0VVRE9FTEVNRU5UUyIsIlBST0RVQ1RJT04iLCJQUkVGSVhfVE9fU1RZTEUiLCJTVFlMRV9UT19QUkVGSVgiLCJQUkVGSVhfVE9fTE9OR19TVFlMRSIsIkxPTkdfU1RZTEVfVE9fUFJFRklYIiwiSUNPTl9TRUxFQ1RJT05fU1lOVEFYX1BBVFRFUk4iLCJMQVlFUlNfVEVYVF9DTEFTU05BTUUiLCJGT05UX0ZBTUlMWV9QQVRURVJOIiwiRk9OVF9XRUlHSFRfVE9fUFJFRklYIiwib25lVG9UZW4iLCJvbmVUb1R3ZW50eSIsImNvbmNhdCIsIkFUVFJJQlVURVNfV0FUQ0hFRF9GT1JfTVVUQVRJT04iLCJEVU9UT05FX0NMQVNTRVMiLCJSRVNFUlZFRF9DTEFTU0VTIiwibWFwIiwiaW5pdGlhbCIsIkZvbnRBd2Vzb21lQ29uZmlnIiwicXVlcnlTZWxlY3RvciIsIl9yZWYiLCJfcmVmMiIsImF0dHIiLCJ2YWwiLCJjb2VyY2UiLCJlbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZ2V0QXR0ckNvbmZpZyIsIl9jb25maWciLCJmYW1pbHlQcmVmaXgiLCJzdHlsZURlZmF1bHQiLCJyZXBsYWNlbWVudENsYXNzIiwiYXV0b1JlcGxhY2VTdmciLCJhdXRvQWRkQ3NzIiwiYXV0b0ExMXkiLCJzZWFyY2hQc2V1ZG9FbGVtZW50cyIsIm9ic2VydmVNdXRhdGlvbnMiLCJtdXRhdGVBcHByb2FjaCIsImtlZXBPcmlnaW5hbFNvdXJjZSIsIm1lYXN1cmVQZXJmb3JtYW5jZSIsInNob3dNaXNzaW5nSWNvbnMiLCJjb25maWciLCJzZXQiLCJfb25DaGFuZ2VDYiIsImNiIiwiZ2V0IiwiZCIsIm1lYW5pbmdsZXNzVHJhbnNmb3JtIiwic2l6ZSIsIngiLCJ5Iiwicm90YXRlIiwiZmxpcFgiLCJmbGlwWSIsIm5leHRVbmlxdWVJZCIsImlkIiwiTWF0aCIsInJhbmRvbSIsInRvQXJyYXkiLCJhcnJheSIsImNsYXNzQXJyYXkiLCJub2RlIiwiY2xhc3NMaXN0Iiwic3BsaXQiLCJodG1sRXNjYXBlIiwic3RyIiwicmVwbGFjZSIsImpvaW5TdHlsZXMiLCJzdHlsZXMiLCJyZWR1Y2UiLCJhY2MiLCJzdHlsZU5hbWUiLCJ0cmltIiwidHJhbnNmb3JtSXNNZWFuaW5nZnVsIiwidHJhbnNmb3JtIiwiY3NzIiwiZGZwIiwiZHJjIiwiZnAiLCJyYyIsInMiLCJkUGF0dCIsIlJlZ0V4cCIsImN1c3RvbVByb3BQYXR0IiwiclBhdHQiLCJfY3NzSW5zZXJ0ZWQiLCJlbnN1cmVDc3MiLCJzdHlsZSIsInNldEF0dHJpYnV0ZSIsImlubmVySFRNTCIsImhlYWRDaGlsZHJlbiIsImNoaWxkTm9kZXMiLCJiZWZvcmVDaGlsZCIsImNoaWxkIiwidGFnTmFtZSIsInRvVXBwZXJDYXNlIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0Q3NzIiwiSW5qZWN0Q1NTIiwibWl4b3V0IiwiZG9tIiwiaG9va3MiLCJiZWZvcmVET01FbGVtZW50Q3JlYXRpb24iLCJiZWZvcmVJMnN2ZyIsInciLCJzaGltcyIsIm5hbWVzcGFjZSIsImZ1bmN0aW9ucyIsImxvYWRlZCIsImRvbXJlYWR5IiwiZm4iLCJzZXRUaW1lb3V0IiwidG9IdG1sIiwiYWJzdHJhY3ROb2RlcyIsInRhZyIsIl9hYnN0cmFjdE5vZGVzJGF0dHJpYiIsImF0dHJpYnV0ZXMiLCJfYWJzdHJhY3ROb2RlcyRjaGlsZHIiLCJjaGlsZHJlbiIsImF0dHJpYnV0ZU5hbWUiLCJqb2luQXR0cmlidXRlcyIsImpvaW4iLCJpY29uRnJvbU1hcHBpbmciLCJtYXBwaW5nIiwicHJlZml4IiwiaWNvbk5hbWUiLCJpY29uIiwiZG9TY3JvbGwiLCJyZWFkeVN0YXRlIiwibGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3ViamVjdCIsImluaXRpYWxWYWx1ZSIsInRoaXNDb250ZXh0IiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZnVuYyIsImEiLCJiIiwiYyIsImJpbmRJbnRlcm5hbDQiLCJ0b0hleCIsInVuaWNvZGUiLCJkZWNvZGVkIiwic3RyaW5nIiwib3V0cHV0IiwiY291bnRlciIsImNoYXJDb2RlQXQiLCJleHRyYSIsInVjczJkZWNvZGUiLCJub3JtYWxpemVJY29ucyIsImljb25zIiwiZGVmaW5lSWNvbnMiLCJwYXJhbXMiLCJfcGFyYW1zJHNraXBIb29rcyIsInNraXBIb29rcyIsIm5vcm1hbGl6ZWQiLCJhZGRQYWNrIiwiTE9OR19TVFlMRSIsInZhbHVlcyIsIl9kZWZhdWx0VXNhYmxlUHJlZml4IiwiX2J5VW5pY29kZSIsIl9ieUxpZ2F0dXJlIiwiX2J5T2xkTmFtZSIsIl9ieU9sZFVuaWNvZGUiLCJfYnlBbGlhcyIsIlBSRUZJWEVTIiwiZ2V0SWNvbk5hbWUiLCJjbHMiLCJwYXJ0cyIsImJ1aWxkIiwibG9va3VwIiwicmVkdWNlciIsImFsaWFzIiwiYWxpYXNlcyIsImhhc1JlZ3VsYXIiLCJhdXRvRmV0Y2hTdmciLCJzaGltTG9va3VwcyIsInNoaW0iLCJtYXliZU5hbWVNYXliZVVuaWNvZGUiLCJuYW1lcyIsInVuaWNvZGVzIiwiZ2V0Q2Fub25pY2FsUHJlZml4IiwiYnlVbmljb2RlIiwiYnlBbGlhcyIsImJ5T2xkTmFtZSIsImdldERlZmF1bHRVc2FibGVQcmVmaXgiLCJzdHlsZU9yUHJlZml4IiwiZGVmaW5lZCIsImdldENhbm9uaWNhbEljb24iLCJfcGFyYW1zJHNraXBMb29rdXBzIiwic2tpcExvb2t1cHMiLCJnaXZlblByZWZpeCIsImNhbm9uaWNhbCIsImluY2x1ZGVzIiwicmVzdCIsImFsaWFzSWNvbk5hbWUiLCJMaWJyYXJ5IiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIl9jbGFzc0NhbGxDaGVjayIsInRoaXMiLCJkZWZpbml0aW9ucyIsInByb3RvUHJvcHMiLCJfdGhpcyIsIl9sZW4iLCJfa2V5IiwiYWRkaXRpb25zIiwiX3B1bGxEZWZpbml0aW9ucyIsImxvbmdQcmVmaXgiLCJkZWZpbml0aW9uIiwiX25vcm1hbGl6ZWQka2V5IiwiX3BsdWdpbnMiLCJfaG9va3MiLCJwcm92aWRlcnMiLCJkZWZhdWx0UHJvdmlkZXJLZXlzIiwiY2hhaW5Ib29rcyIsImhvb2siLCJhY2N1bXVsYXRvciIsImFyZ3MiLCJob29rRm5zIiwiaG9va0ZuIiwiY2FsbEhvb2tzIiwiX2xlbjIiLCJfa2V5MiIsImNhbGxQcm92aWRlZCIsImZpbmRJY29uRGVmaW5pdGlvbiIsImljb25Mb29rdXAiLCJsaWJyYXJ5IiwiaTJzdmciLCJQcm9taXNlIiwicmVqZWN0Iiwid2F0Y2giLCJhdXRvUmVwbGFjZVN2Z1Jvb3QiLCJhdXRvUmVwbGFjZSIsImFwaSIsIm5vQXV0byIsInBhcnNlIiwiX2ljb24iLCJtYXRjaCIsImNhbm9uaWNhbEljb24iLCJfcHJlZml4IiwiX3BhcmFtcyRhdXRvUmVwbGFjZVN2IiwiZG9tVmFyaWFudHMiLCJhYnN0cmFjdENyZWF0b3IiLCJhYnN0cmFjdCIsImNvbnRhaW5lciIsImh0bWwiLCJtYWtlSW5saW5lU3ZnQWJzdHJhY3QiLCJfcGFyYW1zJGljb25zIiwibWFpbiIsIm1hc2siLCJzeW1ib2wiLCJ0aXRsZSIsIm1hc2tJZCIsInRpdGxlSWQiLCJfcGFyYW1zJHdhdGNoYWJsZSIsIndhdGNoYWJsZSIsImZvdW5kIiwid2lkdGgiLCJoZWlnaHQiLCJpc1VwbG9hZGVkSWNvbiIsImF0dHJDbGFzcyIsImNsYXNzZXMiLCJjb250ZW50Iiwicm9sZSIsInVwbG9hZGVkSWNvbldpZHRoU3R5bGUiLCJhc1N5bWJvbCIsIm9mZnNldCIsImFzSWNvbiIsIm1ha2VMYXllcnNUZXh0QWJzdHJhY3QiLCJfcGFyYW1zJHdhdGNoYWJsZTIiLCJfcmVmMiR3aWR0aCIsIl9yZWYyJGhlaWdodCIsIl9yZWYyJHN0YXJ0Q2VudGVyZWQiLCJzdGFydENlbnRlcmVkIiwidHJhbnNmb3JtRm9yQ3NzIiwic3R5bGVTdHJpbmciLCJjbGFzcyIsIm1ha2VMYXllcnNDb3VudGVyQWJzdHJhY3QiLCJzdHlsZXMkMSIsImFzRm91bmRJY29uIiwidmVjdG9yRGF0YSIsImZpbGwiLCJtaXNzaW5nSWNvblJlc29sdXRpb25NaXhpbiIsImZpbmRJY29uIiwicmVzb2x2ZSIsImNvbnNvbGUiLCJlcnJvciIsIm1heWJlTm90aWZ5TWlzc2luZyIsIm5vb3AkMSIsInAiLCJwcmVhbWJsZSIsInBlcmYiLCJlbmQiLCJub29wJDIiLCJpc1dhdGNoZWQiLCJjcmVhdGVFbGVtZW50TlMiLCJjb252ZXJ0U1ZHIiwiYWJzdHJhY3RPYmoiLCJfcGFyYW1zJGNlRm4iLCJjZUZuIiwiY3JlYXRlVGV4dE5vZGUiLCJhcHBlbmRDaGlsZCIsIm11dGF0b3JzIiwibXV0YXRpb24iLCJwYXJlbnROb2RlIiwiY29tbWVudCIsImNyZWF0ZUNvbW1lbnQiLCJvdXRlckhUTUwiLCJub2RlQXNDb21tZW50IiwicmVwbGFjZUNoaWxkIiwicmVtb3ZlIiwibmVzdCIsImZvclN2ZyIsInNwbGl0Q2xhc3NlcyIsInRvU3ZnIiwidG9Ob2RlIiwicmVtb3ZlQXR0cmlidXRlIiwibmV3SW5uZXJIVE1MIiwicGVyZm9ybU9wZXJhdGlvblN5bmMiLCJvcCIsInBlcmZvcm0iLCJtdXRhdGlvbnMiLCJjYWxsYmFjayIsImNhbGxiYWNrRnVuY3Rpb24iLCJmcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm11dGF0b3IiLCJkaXNhYmxlZCIsImRpc2FibGVPYnNlcnZhdGlvbiIsImVuYWJsZU9ic2VydmF0aW9uIiwibW8iLCJvYnNlcnZlIiwib3B0aW9ucyIsIl9vcHRpb25zJHRyZWVDYWxsYmFjayIsInRyZWVDYWxsYmFjayIsIl9vcHRpb25zJG5vZGVDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsIl9vcHRpb25zJHBzZXVkb0VsZW1lbiIsInBzZXVkb0VsZW1lbnRzQ2FsbGJhY2siLCJfb3B0aW9ucyRvYnNlcnZlTXV0YXQiLCJvYnNlcnZlTXV0YXRpb25zUm9vdCIsIm9iamVjdHMiLCJkZWZhdWx0UHJlZml4IiwibXV0YXRpb25SZWNvcmQiLCJ0eXBlIiwiYWRkZWROb2RlcyIsImhhc1ByZWZpeEFuZEljb24iLCJfZ2V0Q2Fub25pY2FsSWNvbiIsImNvbnRhaW5zIiwiY2hpbGRMaXN0IiwiY2hhcmFjdGVyRGF0YSIsInN1YnRyZWUiLCJzdHlsZVBhcnNlciIsInByb3AiLCJjbGFzc1BhcnNlciIsImxpZ2F0dXJlIiwiZXhpc3RpbmdQcmVmaXgiLCJleGlzdGluZ0ljb25OYW1lIiwiaW5uZXJUZXh0IiwiYXR0cmlidXRlc1BhcnNlciIsImV4dHJhQXR0cmlidXRlcyIsInBhcnNlTWV0YSIsInBhcnNlciIsIl9jbGFzc1BhcnNlciIsImV4dHJhQ2xhc3NlcyIsInBsdWdpbk1ldGEiLCJleHRyYVN0eWxlcyIsInN0eWxlcyQyIiwiZ2VuZXJhdGVNdXRhdGlvbiIsIm5vZGVNZXRhIiwib25UcmVlIiwiaHRtbENsYXNzTGlzdCIsImhjbEFkZCIsInN1ZmZpeCIsImFkZCIsImhjbFJlbW92ZSIsInByZWZpeGVzIiwicHJlZml4ZXNEb21RdWVyeSIsImNhbmRpZGF0ZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWxsIiwidGhlbiIsInJlc29sdmVkTXV0YXRpb25zIiwiY2F0Y2giLCJvbk5vZGUiLCJyZW5kZXIiLCJpY29uRGVmaW5pdGlvbiIsIl9wYXJhbXMkdHJhbnNmb3JtIiwiX3BhcmFtcyRzeW1ib2wiLCJfcGFyYW1zJG1hc2siLCJfcGFyYW1zJG1hc2tJZCIsIl9wYXJhbXMkdGl0bGUiLCJfcGFyYW1zJHRpdGxlSWQiLCJfcGFyYW1zJGNsYXNzZXMiLCJfcGFyYW1zJGF0dHJpYnV0ZXMiLCJfcGFyYW1zJHN0eWxlcyIsIlJlcGxhY2VFbGVtZW50cyIsIm1heWJlSWNvbkRlZmluaXRpb24iLCJtdXRhdGlvbk9ic2VydmVyQ2FsbGJhY2tzIiwicHJvdmlkZXMiLCJwcm92aWRlcnMkJDEiLCJfcGFyYW1zJG5vZGUiLCJfcGFyYW1zJGNhbGxiYWNrIiwiZ2VuZXJhdGVTdmdSZXBsYWNlbWVudE11dGF0aW9uIiwiZ2VuZXJhdGVBYnN0cmFjdEljb24iLCJfcmVmMyIsIm5leHRDaGlsZCIsImNvbnRhaW5lcldpZHRoIiwiaWNvbldpZHRoIiwiTGF5ZXJzIiwibGF5ZXIiLCJhc3NlbWJsZXIiLCJMYXllcnNDb3VudGVyIiwiTGF5ZXJzVGV4dCIsInRleHQiLCJnZW5lcmF0ZUxheWVyc1RleHQiLCJjb21wdXRlZEZvbnRTaXplIiwicGFyc2VJbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZm9udFNpemUiLCJib3VuZGluZ0NsaWVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJDTEVBTl9DT05URU5UX1BBVFRFUk4iLCJTRUNPTkRBUllfVU5JQ09ERV9SQU5HRSIsInJlcGxhY2VGb3JQb3NpdGlvbiIsInBvc2l0aW9uIiwicGVuZGluZ0F0dHJpYnV0ZSIsIm9sZFVuaWNvZGUiLCJuZXdVbmljb2RlIiwiYWxyZWFkeVByb2Nlc3NlZFBzZXVkb0VsZW1lbnQiLCJmb250RmFtaWx5IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImZvbnRXZWlnaHQiLCJyZW1vdmVDaGlsZCIsIl9jb250ZW50IiwidG9Mb3dlckNhc2UiLCJfaGV4VmFsdWVGcm9tQ29udGVudCIsInNlY29uZCIsImZpcnN0IiwiY2xlYW5lZCIsImNvZGVQb2ludCIsImluZGV4IiwiaXNQcmVwZW5kVGVuIiwiaXNEb3VibGVkIiwiaXNTZWNvbmRhcnkiLCJoZXhWYWx1ZUZyb21Db250ZW50IiwiaGV4VmFsdWUiLCJpc1Y0Iiwic3RhcnRzV2l0aCIsImljb25JZGVudGlmaWVyIiwiaWNvbk5hbWU0IiwibWV0YSIsImZpcnN0Q2hpbGQiLCJwcm9jZXNzYWJsZSIsIm9wZXJhdGlvbnMiLCJfdW53YXRjaGVkIiwicGFyc2VUcmFuc2Zvcm1TdHJpbmciLCJ0cmFuc2Zvcm1TdHJpbmciLCJwYXJzZUZsb2F0IiwiaXNOYU4iLCJQb3dlclRyYW5zZm9ybXMiLCJwYXJzZU5vZGVBdHRyaWJ1dGVzIiwiZ2VuZXJhdGVBYnN0cmFjdFRyYW5zZm9ybUdyb3VwaW5nIiwib3V0ZXIiLCJpbm5lclRyYW5zbGF0ZSIsImlubmVyU2NhbGUiLCJpbm5lclJvdGF0ZSIsImlubmVyIiwicGF0aCIsIkFMTF9TUEFDRSIsImZpbGxCbGFjayIsImZvcmNlIiwiTWFza3MiLCJtYXNrRGF0YSIsImdlbmVyYXRlQWJzdHJhY3RNYXNrIiwiZXhwbGljaXRNYXNrSWQiLCJtYWluV2lkdGgiLCJtYWluUGF0aCIsIm1hc2tXaWR0aCIsIm1hc2tQYXRoIiwidHJhbnMiLCJ0cmFuc2Zvcm1Gb3JTdmciLCJtYXNrUmVjdCIsIm1hc2tJbm5lckdyb3VwQ2hpbGRyZW5NaXhpbiIsIm1hc2tJbm5lckdyb3VwIiwibWFza091dGVyR3JvdXAiLCJjbGlwSWQiLCJtYXNrVGFnIiwibWFza1VuaXRzIiwibWFza0NvbnRlbnRVbml0cyIsImRlZnMiLCJNaXNzaW5nSWNvbkluZGljYXRvciIsInJlZHVjZU1vdGlvbiIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwibWlzc2luZ0ljb25BYnN0cmFjdCIsImdDaGlsZHJlbiIsIkZJTEwiLCJBTklNQVRJT05fQkFTRSIsImF0dHJpYnV0ZVR5cGUiLCJyZXBlYXRDb3VudCIsImR1ciIsIk9QQUNJVFlfQU5JTUFURSIsImRvdCIsImN4IiwiY3kiLCJyIiwib3BhY2l0eSIsIm1peG91dHNUbyIsInBzZXVkb0VsZW1lbnRzMnN2ZyIsInVud2F0Y2giLCJib290c3RyYXAiLCJkaXNjb25uZWN0Iiwic3ltYm9sRGF0YSIsImsiLCJwbHVnaW4iLCJ0ayIsInNrIiwiYnVua2VyIiwicGx1Z2lucyIsIkZvbnRBd2Vzb21lIiwiYWRkUGFja3MiLCJwYWNrcyIsImFkZFNoaW1zIiwiX25hbWVzcGFjZSRzaGltcyIsImJvdHRvbSIsInJpZ2h0IiwibGVmdCIsImF1dG8iLCJiYXNlUGxhY2VtZW50cyIsInN0YXJ0IiwiY2xpcHBpbmdQYXJlbnRzIiwidmlld3BvcnQiLCJwb3BwZXIiLCJyZWZlcmVuY2UiLCJ2YXJpYXRpb25QbGFjZW1lbnRzIiwicGxhY2VtZW50IiwiYmVmb3JlUmVhZCIsInJlYWQiLCJhZnRlclJlYWQiLCJiZWZvcmVNYWluIiwiYWZ0ZXJNYWluIiwiYmVmb3JlV3JpdGUiLCJ3cml0ZSIsImFmdGVyV3JpdGUiLCJtb2RpZmllclBoYXNlcyIsImdldE5vZGVOYW1lIiwibm9kZU5hbWUiLCJnZXRXaW5kb3ciLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJpc0VsZW1lbnQiLCJFbGVtZW50IiwiaXNIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNTaGFkb3dSb290IiwiU2hhZG93Um9vdCIsImVuYWJsZWQiLCJwaGFzZSIsInN0YXRlIiwiZWxlbWVudHMiLCJhc3NpZ24iLCJlZmZlY3QiLCJpbml0aWFsU3R5bGVzIiwic3RyYXRlZ3kiLCJ0b3AiLCJtYXJnaW4iLCJhcnJvdyIsImhhc093blByb3BlcnR5IiwicHJvcGVydHkiLCJhdHRyaWJ1dGUiLCJyZXF1aXJlcyIsImdldEJhc2VQbGFjZW1lbnQiLCJtYXgiLCJtaW4iLCJyb3VuZCIsImluY2x1ZGVTY2FsZSIsInJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsImdldExheW91dFJlY3QiLCJjbGllbnRSZWN0IiwiYWJzIiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInBhcmVudCIsInJvb3ROb2RlIiwiZ2V0Um9vdE5vZGUiLCJpc1NhbWVOb2RlIiwiaG9zdCIsImlzVGFibGVFbGVtZW50IiwiZ2V0RG9jdW1lbnRFbGVtZW50IiwiZ2V0UGFyZW50Tm9kZSIsImFzc2lnbmVkU2xvdCIsImdldFRydWVPZmZzZXRQYXJlbnQiLCJvZmZzZXRQYXJlbnQiLCJnZXRPZmZzZXRQYXJlbnQiLCJpc0ZpcmVmb3giLCJjdXJyZW50Tm9kZSIsInBlcnNwZWN0aXZlIiwiY29udGFpbiIsIndpbGxDaGFuZ2UiLCJnZXRDb250YWluaW5nQmxvY2siLCJnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQiLCJ3aXRoaW4iLCJtZXJnZVBhZGRpbmdPYmplY3QiLCJwYWRkaW5nT2JqZWN0IiwiZXhwYW5kVG9IYXNoTWFwIiwiaGFzaE1hcCIsIl9zdGF0ZSRtb2RpZmllcnNEYXRhJCIsImFycm93RWxlbWVudCIsInBvcHBlck9mZnNldHMiLCJtb2RpZmllcnNEYXRhIiwiYmFzZVBsYWNlbWVudCIsImF4aXMiLCJwYWRkaW5nIiwicmVjdHMiLCJ0b1BhZGRpbmdPYmplY3QiLCJhcnJvd1JlY3QiLCJtaW5Qcm9wIiwibWF4UHJvcCIsImVuZERpZmYiLCJzdGFydERpZmYiLCJhcnJvd09mZnNldFBhcmVudCIsImNsaWVudFNpemUiLCJjbGllbnRIZWlnaHQiLCJjbGllbnRXaWR0aCIsImNlbnRlclRvUmVmZXJlbmNlIiwiY2VudGVyIiwiYXhpc1Byb3AiLCJjZW50ZXJPZmZzZXQiLCJfb3B0aW9ucyRlbGVtZW50IiwicmVxdWlyZXNJZkV4aXN0cyIsImdldFZhcmlhdGlvbiIsInVuc2V0U2lkZXMiLCJtYXBUb1N0eWxlcyIsIl9PYmplY3QkYXNzaWduMiIsInBvcHBlclJlY3QiLCJ2YXJpYXRpb24iLCJvZmZzZXRzIiwiZ3B1QWNjZWxlcmF0aW9uIiwiYWRhcHRpdmUiLCJyb3VuZE9mZnNldHMiLCJpc0ZpeGVkIiwiX29mZnNldHMkeCIsIl9vZmZzZXRzJHkiLCJoYXNYIiwiaGFzWSIsInNpZGVYIiwic2lkZVkiLCJ3aW4iLCJoZWlnaHRQcm9wIiwid2lkdGhQcm9wIiwidmlzdWFsVmlld3BvcnQiLCJfT2JqZWN0JGFzc2lnbiIsImNvbW1vblN0eWxlcyIsIl9yZWY0IiwiZHByIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJvdW5kT2Zmc2V0c0J5RFBSIiwiX3JlZjUiLCJfb3B0aW9ucyRncHVBY2NlbGVyYXQiLCJfb3B0aW9ucyRhZGFwdGl2ZSIsIl9vcHRpb25zJHJvdW5kT2Zmc2V0cyIsImRhdGEiLCJwYXNzaXZlIiwiX29wdGlvbnMkc2Nyb2xsIiwic2Nyb2xsIiwiX29wdGlvbnMkcmVzaXplIiwicmVzaXplIiwic2Nyb2xsUGFyZW50cyIsInNjcm9sbFBhcmVudCIsInVwZGF0ZSIsImhhc2giLCJnZXRPcHBvc2l0ZVBsYWNlbWVudCIsIm1hdGNoZWQiLCJnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCIsImdldFdpbmRvd1Njcm9sbCIsInNjcm9sbExlZnQiLCJwYWdlWE9mZnNldCIsInNjcm9sbFRvcCIsInBhZ2VZT2Zmc2V0IiwiZ2V0V2luZG93U2Nyb2xsQmFyWCIsImlzU2Nyb2xsUGFyZW50IiwiX2dldENvbXB1dGVkU3R5bGUiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsImdldFNjcm9sbFBhcmVudCIsImJvZHkiLCJsaXN0U2Nyb2xsUGFyZW50cyIsImxpc3QiLCJfZWxlbWVudCRvd25lckRvY3VtZW4iLCJpc0JvZHkiLCJ1cGRhdGVkTGlzdCIsInJlY3RUb0NsaWVudFJlY3QiLCJnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZSIsImNsaXBwaW5nUGFyZW50IiwiZ2V0Vmlld3BvcnRSZWN0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0Iiwid2luU2Nyb2xsIiwic2Nyb2xsV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJkaXJlY3Rpb24iLCJnZXREb2N1bWVudFJlY3QiLCJjb21wdXRlT2Zmc2V0cyIsImNvbW1vblgiLCJjb21tb25ZIiwibWFpbkF4aXMiLCJkZXRlY3RPdmVyZmxvdyIsIl9vcHRpb25zIiwiX29wdGlvbnMkcGxhY2VtZW50IiwiX29wdGlvbnMkYm91bmRhcnkiLCJib3VuZGFyeSIsIl9vcHRpb25zJHJvb3RCb3VuZGFyeSIsInJvb3RCb3VuZGFyeSIsIl9vcHRpb25zJGVsZW1lbnRDb250ZSIsImVsZW1lbnRDb250ZXh0IiwiX29wdGlvbnMkYWx0Qm91bmRhcnkiLCJhbHRCb3VuZGFyeSIsIl9vcHRpb25zJHBhZGRpbmciLCJhbHRDb250ZXh0IiwiY2xpcHBpbmdDbGllbnRSZWN0IiwibWFpbkNsaXBwaW5nUGFyZW50cyIsImNsaXBwZXJFbGVtZW50IiwiZ2V0Q2xpcHBpbmdQYXJlbnRzIiwiZmlyc3RDbGlwcGluZ1BhcmVudCIsImNsaXBwaW5nUmVjdCIsImFjY1JlY3QiLCJnZXRDbGlwcGluZ1JlY3QiLCJjb250ZXh0RWxlbWVudCIsInJlZmVyZW5jZUNsaWVudFJlY3QiLCJwb3BwZXJDbGllbnRSZWN0IiwiZWxlbWVudENsaWVudFJlY3QiLCJvdmVyZmxvd09mZnNldHMiLCJvZmZzZXREYXRhIiwibXVsdGlwbHkiLCJfc2tpcCIsIl9vcHRpb25zJG1haW5BeGlzIiwiY2hlY2tNYWluQXhpcyIsIl9vcHRpb25zJGFsdEF4aXMiLCJhbHRBeGlzIiwiY2hlY2tBbHRBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tQbGFjZW1lbnRzIiwiX29wdGlvbnMkZmxpcFZhcmlhdGlvIiwiZmxpcFZhcmlhdGlvbnMiLCJhbGxvd2VkQXV0b1BsYWNlbWVudHMiLCJwcmVmZXJyZWRQbGFjZW1lbnQiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzIiwicGxhY2VtZW50cyIsIl9vcHRpb25zJGFsbG93ZWRBdXRvUCIsImFsbG93ZWRQbGFjZW1lbnRzIiwib3ZlcmZsb3dzIiwic29ydCIsImNvbXB1dGVBdXRvUGxhY2VtZW50IiwicmVmZXJlbmNlUmVjdCIsImNoZWNrc01hcCIsIk1hcCIsIm1ha2VGYWxsYmFja0NoZWNrcyIsImZpcnN0Rml0dGluZ1BsYWNlbWVudCIsIl9iYXNlUGxhY2VtZW50IiwiaXNTdGFydFZhcmlhdGlvbiIsImlzVmVydGljYWwiLCJtYWluVmFyaWF0aW9uU2lkZSIsImFsdFZhcmlhdGlvblNpZGUiLCJjaGVja3MiLCJldmVyeSIsImNoZWNrIiwiX2xvb3AiLCJmaXR0aW5nUGxhY2VtZW50IiwiZmluZCIsInJlc2V0IiwiZ2V0U2lkZU9mZnNldHMiLCJwcmV2ZW50ZWRPZmZzZXRzIiwiaXNBbnlTaWRlRnVsbHlDbGlwcGVkIiwic29tZSIsInNpZGUiLCJwcmV2ZW50T3ZlcmZsb3ciLCJyZWZlcmVuY2VPdmVyZmxvdyIsInBvcHBlckFsdE92ZXJmbG93IiwicmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzIiwicG9wcGVyRXNjYXBlT2Zmc2V0cyIsImlzUmVmZXJlbmNlSGlkZGVuIiwiaGFzUG9wcGVyRXNjYXBlZCIsIl9vcHRpb25zJG9mZnNldCIsImludmVydERpc3RhbmNlIiwic2tpZGRpbmciLCJkaXN0YW5jZSIsImRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZIiwiX2RhdGEkc3RhdGUkcGxhY2VtZW50IiwiX29wdGlvbnMkdGV0aGVyIiwidGV0aGVyIiwiX29wdGlvbnMkdGV0aGVyT2Zmc2V0IiwidGV0aGVyT2Zmc2V0IiwiaXNCYXNlUGxhY2VtZW50IiwidGV0aGVyT2Zmc2V0VmFsdWUiLCJub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUiLCJvZmZzZXRNb2RpZmllclN0YXRlIiwiX29mZnNldE1vZGlmaWVyU3RhdGUkIiwibWFpblNpZGUiLCJhbHRTaWRlIiwiYWRkaXRpdmUiLCJtYXhMZW4iLCJhcnJvd1BhZGRpbmdPYmplY3QiLCJhcnJvd1BhZGRpbmdNaW4iLCJhcnJvd1BhZGRpbmdNYXgiLCJhcnJvd0xlbiIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNsaWVudE9mZnNldCIsIm9mZnNldE1vZGlmaWVyVmFsdWUiLCJ0ZXRoZXJNYXgiLCJwcmV2ZW50ZWRPZmZzZXQiLCJfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIiwiX21haW5TaWRlIiwiX2FsdFNpZGUiLCJfb2Zmc2V0IiwiX21pbiIsIl9tYXgiLCJpc09yaWdpblNpZGUiLCJfb2Zmc2V0TW9kaWZpZXJWYWx1ZSIsIl90ZXRoZXJNaW4iLCJfdGV0aGVyTWF4IiwiX3ByZXZlbnRlZE9mZnNldCIsInYiLCJ3aXRoaW5NYXhDbGFtcCIsImdldENvbXBvc2l0ZVJlY3QiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImlzT2Zmc2V0UGFyZW50QW5FbGVtZW50Iiwib2Zmc2V0UGFyZW50SXNTY2FsZWQiLCJpc0VsZW1lbnRTY2FsZWQiLCJvcmRlciIsIm1vZGlmaWVycyIsInZpc2l0ZWQiLCJTZXQiLCJtb2RpZmllciIsImRlcCIsImhhcyIsImRlcE1vZGlmaWVyIiwiREVGQVVMVF9PUFRJT05TIiwiYXJlVmFsaWRFbGVtZW50cyIsInBvcHBlckdlbmVyYXRvciIsImdlbmVyYXRvck9wdGlvbnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyIsIl9nZW5lcmF0b3JPcHRpb25zJGRlZiIsImRlZmF1bHRNb2RpZmllcnMiLCJfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyIiwiZGVmYXVsdE9wdGlvbnMiLCJwZW5kaW5nIiwib3JkZXJlZE1vZGlmaWVycyIsImVmZmVjdENsZWFudXBGbnMiLCJpc0Rlc3Ryb3llZCIsInNldE9wdGlvbnMiLCJzZXRPcHRpb25zQWN0aW9uIiwiY2xlYW51cE1vZGlmaWVyRWZmZWN0cyIsIm1lcmdlZCIsIm9yZGVyTW9kaWZpZXJzIiwiY3VycmVudCIsImV4aXN0aW5nIiwibSIsIl9yZWYzJG9wdGlvbnMiLCJjbGVhbnVwRm4iLCJmb3JjZVVwZGF0ZSIsIl9zdGF0ZSRlbGVtZW50cyIsIl9zdGF0ZSRvcmRlcmVkTW9kaWZpZSIsIl9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIiLCJkZXN0cm95Iiwib25GaXJzdFVwZGF0ZSIsImNyZWF0ZVBvcHBlciIsImV2ZW50TGlzdGVuZXJzIiwiVFJBTlNJVElPTl9FTkQiLCJnZXRTZWxlY3RvciIsInNlbGVjdG9yIiwiaHJlZkF0dHIiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiZ2V0RWxlbWVudEZyb21TZWxlY3RvciIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwianF1ZXJ5Iiwibm9kZVR5cGUiLCJnZXRFbGVtZW50IiwidHlwZUNoZWNrQ29uZmlnIiwiY29tcG9uZW50TmFtZSIsImNvbmZpZ1R5cGVzIiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsImlzVmlzaWJsZSIsImdldENsaWVudFJlY3RzIiwiaXNEaXNhYmxlZCIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJoYXNBdHRyaWJ1dGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsInJlZmxvdyIsImdldGpRdWVyeSIsImpRdWVyeSIsIkRPTUNvbnRlbnRMb2FkZWRDYWxsYmFja3MiLCJpc1JUTCIsImRpciIsImRlZmluZUpRdWVyeVBsdWdpbiIsIiQiLCJOQU1FIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwialF1ZXJ5SW50ZXJmYWNlIiwibm9Db25mbGljdCIsImV4ZWN1dGUiLCJleGVjdXRlQWZ0ZXJUcmFuc2l0aW9uIiwidHJhbnNpdGlvbkVsZW1lbnQiLCJ3YWl0Rm9yVHJhbnNpdGlvbiIsImVtdWxhdGVkRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsIk51bWJlciIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJjYWxsZWQiLCJoYW5kbGVyIiwiZ2V0TmV4dEFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50Iiwic2hvdWxkR2V0TmV4dCIsImlzQ3ljbGVBbGxvd2VkIiwibGlzdExlbmd0aCIsIm5hbWVzcGFjZVJlZ2V4Iiwic3RyaXBOYW1lUmVnZXgiLCJzdHJpcFVpZFJlZ2V4IiwiZXZlbnRSZWdpc3RyeSIsInVpZEV2ZW50IiwiY3VzdG9tRXZlbnRzIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJjdXN0b21FdmVudHNSZWdleCIsIm5hdGl2ZUV2ZW50cyIsImdldFVpZEV2ZW50IiwidWlkIiwiZ2V0RXZlbnQiLCJmaW5kSGFuZGxlciIsImV2ZW50cyIsImRlbGVnYXRpb25TZWxlY3RvciIsInVpZEV2ZW50TGlzdCIsImV2ZW50Iiwib3JpZ2luYWxIYW5kbGVyIiwibm9ybWFsaXplUGFyYW1zIiwib3JpZ2luYWxUeXBlRXZlbnQiLCJkZWxlZ2F0aW9uRm4iLCJkZWxlZ2F0aW9uIiwidHlwZUV2ZW50IiwiZ2V0VHlwZUV2ZW50IiwiYWRkSGFuZGxlciIsIm9uZU9mZiIsIndyYXBGbiIsInJlbGF0ZWRUYXJnZXQiLCJkZWxlZ2F0ZVRhcmdldCIsImhhbmRsZXJzIiwicHJldmlvdXNGbiIsImRvbUVsZW1lbnRzIiwiRXZlbnRIYW5kbGVyIiwib2ZmIiwiYm9vdHN0cmFwRGVsZWdhdGlvbkhhbmRsZXIiLCJib290c3RyYXBIYW5kbGVyIiwicmVtb3ZlSGFuZGxlciIsIkJvb2xlYW4iLCJvbiIsIm9uZSIsImluTmFtZXNwYWNlIiwiaXNOYW1lc3BhY2UiLCJlbGVtZW50RXZlbnQiLCJzdG9yZUVsZW1lbnRFdmVudCIsImhhbmRsZXJLZXkiLCJyZW1vdmVOYW1lc3BhY2VkSGFuZGxlcnMiLCJrZXlIYW5kbGVycyIsInRyaWdnZXIiLCJpc05hdGl2ZSIsImpRdWVyeUV2ZW50IiwiYnViYmxlcyIsIm5hdGl2ZURpc3BhdGNoIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2dCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIkN1c3RvbUV2ZW50IiwiY2FuY2VsYWJsZSIsInByZXZlbnREZWZhdWx0IiwiZWxlbWVudE1hcCIsIkRhdGEiLCJpbnN0YW5jZU1hcCIsImRlbGV0ZSIsIkJhc2VDb21wb25lbnQiLCJfZWxlbWVudCIsIkRBVEFfS0VZIiwiZGlzcG9zZSIsIkVWRU5UX0tFWSIsImdldE93blByb3BlcnR5TmFtZXMiLCJwcm9wZXJ0eU5hbWUiLCJfcXVldWVDYWxsYmFjayIsImlzQW5pbWF0ZWQiLCJzdGF0aWMiLCJnZXRJbnN0YW5jZSIsIlZFUlNJT04iLCJFcnJvciIsImVuYWJsZURpc21pc3NUcmlnZ2VyIiwiY29tcG9uZW50IiwibWV0aG9kIiwiY2xpY2tFdmVudCIsImNsb3Nlc3QiLCJnZXRPckNyZWF0ZUluc3RhbmNlIiwiQWxlcnQiLCJjbG9zZSIsIl9kZXN0cm95RWxlbWVudCIsImVhY2giLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ1IiwiQnV0dG9uIiwidG9nZ2xlIiwibm9ybWFsaXplRGF0YSIsIm5vcm1hbGl6ZURhdGFLZXkiLCJjaHIiLCJidXR0b24iLCJNYW5pcHVsYXRvciIsInNldERhdGFBdHRyaWJ1dGUiLCJyZW1vdmVEYXRhQXR0cmlidXRlIiwiZ2V0RGF0YUF0dHJpYnV0ZXMiLCJkYXRhc2V0IiwicHVyZUtleSIsImNoYXJBdCIsImdldERhdGFBdHRyaWJ1dGUiLCJTZWxlY3RvckVuZ2luZSIsImZpbmRPbmUiLCJwYXJlbnRzIiwiYW5jZXN0b3IiLCJwcmV2IiwicHJldmlvdXMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZm9jdXNhYmxlQ2hpbGRyZW4iLCJmb2N1c2FibGVzIiwiZWwiLCJOQU1FJGIiLCJEZWZhdWx0JGEiLCJpbnRlcnZhbCIsImtleWJvYXJkIiwic2xpZGUiLCJwYXVzZSIsIndyYXAiLCJ0b3VjaCIsIkRlZmF1bHRUeXBlJGEiLCJPUkRFUl9ORVhUIiwiT1JERVJfUFJFViIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiS0VZX1RPX0RJUkVDVElPTiIsIkVWRU5UX1NMSUQiLCJDTEFTU19OQU1FX0FDVElWRSQyIiwiU0VMRUNUT1JfQUNUSVZFX0lURU0iLCJDYXJvdXNlbCIsInN1cGVyIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwidG91Y2hTdGFydFgiLCJ0b3VjaERlbHRhWCIsIl9nZXRDb25maWciLCJfaW5kaWNhdG9yc0VsZW1lbnQiLCJfdG91Y2hTdXBwb3J0ZWQiLCJtYXhUb3VjaFBvaW50cyIsIl9wb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJEZWZhdWx0IiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwiX3VwZGF0ZUludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJiaW5kIiwidG8iLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJfaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJfa2V5ZG93biIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwiaGFzUG9pbnRlclBlblRvdWNoIiwicG9pbnRlclR5cGUiLCJjbGllbnRYIiwidG91Y2hlcyIsIm1vdmUiLCJjbGVhclRpbWVvdXQiLCJpdGVtSW1nIiwiX2dldEl0ZW1CeU9yZGVyIiwiaXNOZXh0IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImFjdGl2ZUluZGljYXRvciIsImluZGljYXRvcnMiLCJlbGVtZW50SW50ZXJ2YWwiLCJkZWZhdWx0SW50ZXJ2YWwiLCJkaXJlY3Rpb25Pck9yZGVyIiwiX2RpcmVjdGlvblRvT3JkZXIiLCJhY3RpdmVFbGVtZW50SW5kZXgiLCJuZXh0RWxlbWVudCIsIm5leHRFbGVtZW50SW5kZXgiLCJpc0N5Y2xpbmciLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiX29yZGVyVG9EaXJlY3Rpb24iLCJ0cmlnZ2VyU2xpZEV2ZW50IiwiY29tcGxldGVDYWxsQmFjayIsImFjdGlvbiIsInJpZGUiLCJjYXJvdXNlbEludGVyZmFjZSIsInNsaWRlSW5kZXgiLCJkYXRhQXBpQ2xpY2tIYW5kbGVyIiwiY2Fyb3VzZWxzIiwiTkFNRSRhIiwiRGVmYXVsdCQ5IiwiRGVmYXVsdFR5cGUkOSIsIkNMQVNTX05BTUVfU0hPVyQ3IiwiQ0xBU1NfTkFNRV9DT0xMQVBTRSIsIkNMQVNTX05BTUVfQ09MTEFQU0lORyIsIkNMQVNTX05BTUVfQ09MTEFQU0VEIiwiQ0xBU1NfTkFNRV9ERUVQRVJfQ0hJTERSRU4iLCJTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0IiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJlbGVtIiwiZmlsdGVyRWxlbWVudCIsImZvdW5kRWxlbSIsIl9zZWxlY3RvciIsIl9pbml0aWFsaXplQ2hpbGRyZW4iLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiX2lzU2hvd24iLCJoaWRlIiwic2hvdyIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInRlbXBBY3RpdmVEYXRhIiwiZWxlbUFjdGl2ZSIsImRpbWVuc2lvbiIsIl9nZXREaW1lbnNpb24iLCJzY3JvbGxTaXplIiwidHJpZ2dlckFycmF5TGVuZ3RoIiwic2VsZWN0ZWQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCJOQU1FJDkiLCJFU0NBUEVfS0VZJDIiLCJTUEFDRV9LRVkiLCJBUlJPV19VUF9LRVkiLCJBUlJPV19ET1dOX0tFWSIsIlJFR0VYUF9LRVlET1dOIiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMyIsIkVWRU5UX0tFWURPV05fREFUQV9BUEkiLCJDTEFTU19OQU1FX1NIT1ckNiIsIlNFTEVDVE9SX0RBVEFfVE9HR0xFJDMiLCJTRUxFQ1RPUl9NRU5VIiwiUExBQ0VNRU5UX1RPUCIsIlBMQUNFTUVOVF9UT1BFTkQiLCJQTEFDRU1FTlRfQk9UVE9NIiwiUExBQ0VNRU5UX0JPVFRPTUVORCIsIlBMQUNFTUVOVF9SSUdIVCIsIlBMQUNFTUVOVF9MRUZUIiwiRGVmYXVsdCQ4IiwiZGlzcGxheSIsInBvcHBlckNvbmZpZyIsImF1dG9DbG9zZSIsIkRlZmF1bHRUeXBlJDgiLCJEcm9wZG93biIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJEZWZhdWx0VHlwZSIsImdldFBhcmVudEZyb21FbGVtZW50IiwiX2NyZWF0ZVBvcHBlciIsImZvY3VzIiwiX2NvbXBsZXRlSGlkZSIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiaXNEaXNwbGF5U3RhdGljIiwiX2dldFBsYWNlbWVudCIsInBhcmVudERyb3Bkb3duIiwiaXNFbmQiLCJfZ2V0T2Zmc2V0IiwicG9wcGVyRGF0YSIsImRlZmF1bHRCc1BvcHBlckNvbmZpZyIsIl9zZWxlY3RNZW51SXRlbSIsIml0ZW1zIiwidG9nZ2xlcyIsImNvbnRleHQiLCJjb21wb3NlZFBhdGgiLCJpc01lbnVUYXJnZXQiLCJpc0FjdGl2ZSIsInN0b3BQcm9wYWdhdGlvbiIsImdldFRvZ2dsZUJ1dHRvbiIsImNsZWFyTWVudXMiLCJkYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJTRUxFQ1RPUl9GSVhFRF9DT05URU5UIiwiU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQiLCJTY3JvbGxCYXJIZWxwZXIiLCJnZXRXaWR0aCIsImRvY3VtZW50V2lkdGgiLCJpbm5lcldpZHRoIiwiX2Rpc2FibGVPdmVyRmxvdyIsIl9zZXRFbGVtZW50QXR0cmlidXRlcyIsImNhbGN1bGF0ZWRWYWx1ZSIsIl9zYXZlSW5pdGlhbEF0dHJpYnV0ZSIsInN0eWxlUHJvcCIsInNjcm9sbGJhcldpZHRoIiwiX2FwcGx5TWFuaXB1bGF0aW9uQ2FsbGJhY2siLCJfcmVzZXRFbGVtZW50QXR0cmlidXRlcyIsImFjdHVhbFZhbHVlIiwicmVtb3ZlUHJvcGVydHkiLCJjYWxsQmFjayIsImlzT3ZlcmZsb3dpbmciLCJEZWZhdWx0JDciLCJjbGFzc05hbWUiLCJyb290RWxlbWVudCIsImNsaWNrQ2FsbGJhY2siLCJEZWZhdWx0VHlwZSQ3IiwiQ0xBU1NfTkFNRV9TSE9XJDUiLCJFVkVOVF9NT1VTRURPV04iLCJCYWNrZHJvcCIsIl9pc0FwcGVuZGVkIiwiX2FwcGVuZCIsIl9nZXRFbGVtZW50IiwiX2VtdWxhdGVBbmltYXRpb24iLCJiYWNrZHJvcCIsImFwcGVuZCIsIkRlZmF1bHQkNiIsInRyYXBFbGVtZW50IiwiYXV0b2ZvY3VzIiwiRGVmYXVsdFR5cGUkNiIsIkVWRU5UX0tFWSQ3IiwiVEFCX05BVl9CQUNLV0FSRCIsIkZvY3VzVHJhcCIsIl9pc0FjdGl2ZSIsIl9sYXN0VGFiTmF2RGlyZWN0aW9uIiwiYWN0aXZhdGUiLCJfaGFuZGxlRm9jdXNpbiIsIl9oYW5kbGVLZXlkb3duIiwiZGVhY3RpdmF0ZSIsInNoaWZ0S2V5IiwiTkFNRSQ2IiwiRVNDQVBFX0tFWSQxIiwiRGVmYXVsdCQ1IiwiRGVmYXVsdFR5cGUkNSIsIkVWRU5UX0hJRERFTiQzIiwiRVZFTlRfU0hPVyQzIiwiRVZFTlRfUkVTSVpFIiwiRVZFTlRfQ0xJQ0tfRElTTUlTUyIsIkVWRU5UX0tFWURPV05fRElTTUlTUyQxIiwiRVZFTlRfTU9VU0VET1dOX0RJU01JU1MiLCJDTEFTU19OQU1FX09QRU4iLCJDTEFTU19OQU1FX1NIT1ckNCIsIkNMQVNTX05BTUVfU1RBVElDIiwiTW9kYWwiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2luaXRpYWxpemVCYWNrRHJvcCIsIl9mb2N1c3RyYXAiLCJfaW5pdGlhbGl6ZUZvY3VzVHJhcCIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbEJhciIsIl9pc0FuaW1hdGVkIiwiX2FkanVzdERpYWxvZyIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaHRtbEVsZW1lbnQiLCJoYW5kbGVVcGRhdGUiLCJtb2RhbEJvZHkiLCJfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbiIsIl9yZXNldEFkanVzdG1lbnRzIiwiY3VycmVudFRhcmdldCIsImlzTW9kYWxPdmVyZmxvd2luZyIsImlzQm9keU92ZXJmbG93aW5nIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJzaG93RXZlbnQiLCJhbGxSZWFkeU9wZW4iLCJOQU1FJDUiLCJEZWZhdWx0JDQiLCJEZWZhdWx0VHlwZSQ0IiwiQ0xBU1NfTkFNRV9TSE9XJDMiLCJPUEVOX1NFTEVDVE9SIiwiRVZFTlRfSElEREVOJDIiLCJPZmZjYW52YXMiLCJ2aXNpYmlsaXR5IiwiYmx1ciIsInVyaUF0dHJpYnV0ZXMiLCJTQUZFX1VSTF9QQVRURVJOIiwiREFUQV9VUkxfUEFUVEVSTiIsImFsbG93ZWRBdHRyaWJ1dGUiLCJhbGxvd2VkQXR0cmlidXRlTGlzdCIsIm5vZGVWYWx1ZSIsInJlZ0V4cCIsImF0dHJpYnV0ZVJlZ2V4Iiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsImFsbG93TGlzdCIsInNhbml0aXplRm4iLCJjcmVhdGVkRG9jdW1lbnQiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJlbGVtZW50TmFtZSIsImF0dHJpYnV0ZUxpc3QiLCJhbGxvd2VkQXR0cmlidXRlcyIsIk5BTUUkNCIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsIkRlZmF1bHRUeXBlJDMiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsImRlbGF5IiwiY3VzdG9tQ2xhc3MiLCJzYW5pdGl6ZSIsIkF0dGFjaG1lbnRNYXAiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiRGVmYXVsdCQzIiwiYXJlYSIsImJyIiwiY29sIiwiY29kZSIsImRpdiIsImVtIiwiaHIiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJpbWciLCJsaSIsIm9sIiwicHJlIiwic21hbGwiLCJzcGFuIiwic3ViIiwic3VwIiwic3Ryb25nIiwidSIsInVsIiwiRXZlbnQkMiIsIkhJREUiLCJISURERU4iLCJTSE9XIiwiU0hPV04iLCJJTlNFUlRFRCIsIkNMSUNLIiwiRk9DVVNJTiIsIkZPQ1VTT1VUIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJDTEFTU19OQU1FX0ZBREUkMiIsIkNMQVNTX05BTUVfU0hPVyQyIiwiSE9WRVJfU1RBVEVfU0hPVyIsIkhPVkVSX1NUQVRFX09VVCIsIlNFTEVDVE9SX1RPT0xUSVBfSU5ORVIiLCJTRUxFQ1RPUl9NT0RBTCIsIkVWRU5UX01PREFMX0hJREUiLCJUUklHR0VSX0hPVkVSIiwiVFJJR0dFUl9GT0NVUyIsIlRvb2x0aXAiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiX2luaXRpYWxpemVPbkRlbGVnYXRlZFRhcmdldCIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiX2hpZGVNb2RhbEhhbmRsZXIiLCJfZGlzcG9zZVBvcHBlciIsImlzV2l0aENvbnRlbnQiLCJzaGFkb3dSb290IiwiaXNJblRoZURvbSIsImdldFRpdGxlIiwidGlwSWQiLCJmbG9vciIsImdldEVsZW1lbnRCeUlkIiwiZ2V0VUlEIiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiX2FkZEF0dGFjaG1lbnRDbGFzcyIsIl9yZXNvbHZlUG9zc2libGVGdW5jdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJzZXRDb250ZW50IiwiX3Nhbml0aXplQW5kU2V0Q29udGVudCIsInRlbXBsYXRlRWxlbWVudCIsInNldEVsZW1lbnRDb250ZW50IiwidGV4dENvbnRlbnQiLCJ1cGRhdGVBdHRhY2htZW50IiwiX2dldERlbGVnYXRlQ29uZmlnIiwiX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSIsIl9nZXRCYXNpY0NsYXNzUHJlZml4IiwiZXZlbnRJbiIsImV2ZW50T3V0IiwiX2ZpeFRpdGxlIiwib3JpZ2luYWxUaXRsZVR5cGUiLCJkYXRhQXR0cmlidXRlcyIsImRhdGFBdHRyIiwiYmFzaWNDbGFzc1ByZWZpeFJlZ2V4IiwidGFiQ2xhc3MiLCJ0b2tlbiIsInRDbGFzcyIsIkRlZmF1bHQkMiIsIkRlZmF1bHRUeXBlJDIiLCJFdmVudCQxIiwiUG9wb3ZlciIsIl9nZXRDb250ZW50IiwiTkFNRSQyIiwiRGVmYXVsdCQxIiwiRGVmYXVsdFR5cGUkMSIsIkNMQVNTX05BTUVfQUNUSVZFJDEiLCJTRUxFQ1RPUl9MSU5LX0lURU1TIiwiTUVUSE9EX1BPU0lUSU9OIiwiU2Nyb2xsU3B5IiwiX3Njcm9sbEVsZW1lbnQiLCJfb2Zmc2V0cyIsIl90YXJnZXRzIiwiX2FjdGl2ZVRhcmdldCIsIl9zY3JvbGxIZWlnaHQiLCJfcHJvY2VzcyIsInJlZnJlc2giLCJhdXRvTWV0aG9kIiwib2Zmc2V0TWV0aG9kIiwib2Zmc2V0QmFzZSIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwidGFyZ2V0U2VsZWN0b3IiLCJ0YXJnZXRCQ1IiLCJpdGVtIiwiX2dldE9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwibWF4U2Nyb2xsIiwiX2FjdGl2YXRlIiwiX2NsZWFyIiwicXVlcmllcyIsImxpbmsiLCJsaXN0R3JvdXAiLCJuYXZJdGVtIiwic3B5IiwiQ0xBU1NfTkFNRV9BQ1RJVkUiLCJDTEFTU19OQU1FX0ZBREUkMSIsIkNMQVNTX05BTUVfU0hPVyQxIiwiU0VMRUNUT1JfQUNUSVZFIiwiU0VMRUNUT1JfQUNUSVZFX1VMIiwiVGFiIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRlRXZlbnQiLCJjb21wbGV0ZSIsImFjdGl2ZSIsImlzVHJhbnNpdGlvbmluZyIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd24iLCJDTEFTU19OQU1FX0hJREUiLCJDTEFTU19OQU1FX1NIT1ciLCJDTEFTU19OQU1FX1NIT1dJTkciLCJhdXRvaGlkZSIsIlRvYXN0IiwiX2hhc01vdXNlSW50ZXJhY3Rpb24iLCJfaGFzS2V5Ym9hcmRJbnRlcmFjdGlvbiIsIl9jbGVhclRpbWVvdXQiLCJfbWF5YmVTY2hlZHVsZUhpZGUiLCJfb25JbnRlcmFjdGlvbiIsImlzSW50ZXJhY3RpbmciLCJnbG9iYWwiLCJub0dsb2JhbCIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiY2xhc3MydHlwZSIsImhhc093biIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsInN1cHBvcnQiLCJpc0Z1bmN0aW9uIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwic3JjIiwibm9uY2UiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJkb2MiLCJzY3JpcHQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwiaiIsInNwbGljZSIsImV4dGVuZCIsImNvcHkiLCJjb3B5SXNBcnJheSIsImNsb25lIiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJpbnZlcnQiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsImd1aWQiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaE5hdGl2ZSIsImJvb2xlYW5zIiwid2hpdGVzcGFjZSIsImlkZW50aWZpZXIiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJydHJpbSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGUiLCJub25IZXgiLCJoaWdoIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJjaCIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJlbHMiLCJzZWVkIiwibmlkIiwiZ3JvdXBzIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwiZXhlYyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXNhRXJyb3IiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2VVUkkiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiYXR0YWNoRXZlbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidG1wIiwiaW5wdXQiLCJtYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJvTWF0Y2hlc1NlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJkaXNjb25uZWN0ZWRNYXRjaCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiYWRvd24iLCJidXAiLCJjb21wYXJlIiwic29ydERldGFjaGVkIiwiYXVwIiwiYXAiLCJicCIsInVuc2hpZnQiLCJleHByIiwic3BlY2lmaWVkIiwic2VsIiwidW5pcXVlU29ydCIsImR1cGxpY2F0ZXMiLCJkZXRlY3REdXBsaWNhdGVzIiwic29ydFN0YWJsZSIsInNlbGVjdG9ycyIsImNyZWF0ZVBzZXVkbyIsInJlbGF0aXZlIiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImxhbmciLCJlbGVtTGFuZyIsImxvY2F0aW9uIiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJ0b2tlbnMiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsImNvbnRleHRzIiwibXVsdGlwbGVDb250ZXh0cyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJmaWx0ZXJzIiwicGFyc2VPbmx5Iiwic29GYXIiLCJwcmVGaWx0ZXJzIiwiY2FjaGVkIiwic2V0TWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJieVNldCIsImJ5RWxlbWVudCIsInN1cGVyTWF0Y2hlciIsIm91dGVybW9zdCIsIm1hdGNoZWRDb3VudCIsInNldE1hdGNoZWQiLCJjb250ZXh0QmFja3VwIiwiZGlycnVuc1VuaXF1ZSIsIm1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInNpYmxpbmciLCJ0YXJnZXRzIiwibCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsInByb21pc2UiLCJmYWlsIiwiQ2FsbGJhY2tzIiwiXyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJxdWV1ZSIsImZpcmluZ0luZGV4IiwiZmlyZSIsIm9uY2UiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJ0dXBsZXMiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZWFkeVdhaXQiLCJ3YWl0IiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwiY2FtZWxDYXNlIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiSlNPTiIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsInNob3dIaWRlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsIm5vZGVzIiwiaHRtbFByZWZpbHRlciIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsInNhZmVBY3RpdmVFbGVtZW50IiwidHlwZXMiLCJvcmlnRm4iLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwidCIsImhhbmRsZU9iaiIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiY3JlYXRlIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwicHJlRGlzcGF0Y2giLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImFkZFByb3AiLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50Iiwid2hpY2giLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJwcmVwZW5kIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwic2Nyb2xsYm94U2l6ZVZhbCIsInJlbGlhYmxlVHJEaW1lbnNpb25zVmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJib3hTaXppbmdSZWxpYWJsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmVsaWFibGVUckRpbWVuc2lvbnMiLCJ0YWJsZSIsInRyQ2hpbGQiLCJ0clN0eWxlIiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwiY2FwTmFtZSIsInZlbmRvclByb3BOYW1lIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJib3giLCJpc0JvcmRlckJveCIsImNvbXB1dGVkVmFsIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiVHdlZW4iLCJlYXNpbmciLCJjc3NIb29rcyIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsInNjcm9sbGJveFNpemVCdWdneSIsImJvcmRlciIsImV4cGFuZCIsImV4cGFuZGVkIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwicHJlZmlsdGVyIiwic3BlZWQiLCJvcHQiLCJzcGVlZHMiLCJmYWRlVG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJ0aW1lIiwidGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJnZXR0ZXIiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInBhcnNlckVycm9yRWxlbSIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImxhc3RNb2RpZmllZCIsImV0YWciLCJ1cmwiLCJpc0xvY2FsIiwicHJvdG9jb2wiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCJ4aHJTdXBwb3J0ZWQiLCJjb3JzIiwiZXJyb3JDYWxsYmFjayIsIm9wZW4iLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsIl9qUXVlcnkiLCJfJCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJ0b1N0cmluZ1RhZyIsInJlcXVpcmUiLCJsaW5rUHJpdmFjeVBvbGljeSIsInRleHRUaXRsZU1vZGFsIiwidGV4dEFic3RyYWN0TW9kYWwiLCJ0ZXh0QnV0dG9uQWNjZXB0IiwidGV4dEJ1dHRvbk9wZW5Qb2xpY3kiLCJ0ZXh0QnV0dG9uUmVzZXRDb29raWUiLCJtb2RhbCIsInNob3dPblBhZ2VMb2FkIiwiZml4ZWRpY29uIiwibW9kYWxzaG9fZXZlciIsIm1vZGFsc2hvX2Nvb2tpZSIsImNvb2tpZV9leHBpcmUiLCJjb29raWVuYW1lIiwiY2xhc3Nub3RpY2UiLCJjbGFzc2ZpeGVkaWNvbiIsImNvb2tpZVZhbHVlIiwiZ2V0VGltZSIsImFjY2VwdGVkIiwic2hvd0Nvb2tpZUFsZXJ0IiwiY29va2llIiwiZ2V0Q29va2llIiwidG9EYXRlU3RyaW5nIiwiZXJhc2VDb29raWUiLCJzZXRDb29raWUiLCJkYXlzIiwic3RyaW5naWZ5IiwiZXhwaXJlcyIsImRhdGUiLCJzZXRUaW1lIiwidG9VVENTdHJpbmciLCJuYW1lRVEiLCJjYSIsInN1YnN0cmluZyIsIm91dCIsImNvb2tpZW1vZGFsIiwibG9nIiwiY29va2llQWxlcnQiXSwic291cmNlUm9vdCI6IiJ9